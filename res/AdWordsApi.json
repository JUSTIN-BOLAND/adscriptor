{
  "definitions": [
    {
      "!name": "AdsApp",
      "AdsApp": {
        "adCustomizerSources": "fn() -> +AdCustomizerSourceSelector",
        "adGroupTargeting": "fn() -> +AccountAdGroupTargeting",
        "adGroups": "fn() -> +AdGroupSelector",
        "adMedia": "fn() -> +AdMedia",
        "adParams": "fn() -> +AdParamSelector",
        "ads": "fn() -> +AdSelector",
        "biddingStrategies": "fn() -> +BiddingStrategySelector",
        "budgetOrders": "fn() -> +BudgetOrderSelector",
        "budgets": "fn() -> +BudgetSelector",
        "bulkUploads": "fn() -> +BulkUploads",
        "campaigns": "fn() -> +CampaignSelector",
        "createLabel": "fn(name: string, description: string, backgroundColor: string)",
        "currentAccount": "fn() -> +Account",
        "display": "fn() -> +Display",
        "drafts": "fn() -> +DraftSelector",
        "excludedPlacementLists": "fn() -> +ExcludedPlacementListSelector",
        "experiments": "fn() -> +ExperimentSelector",
        "extensions": "fn() -> +Extensions",
        "getExecutionInfo": "fn() -> +ExecutionInfo",
        "keywords": "fn() -> +KeywordSelector",
        "labels": "fn() -> +LabelSelector",
        "negativeKeywordLists": "fn() -> +NegativeKeywordListSelector",
        "newAdCustomizerSourceBuilder": "fn() -> +AdCustomizerSourceBuilder",
        "newExcludedPlacementListBuilder": "fn() -> +ExcludedPlacementListBuilder",
        "newNegativeKeywordListBuilder": "fn() -> +NegativeKeywordListBuilder",
        "productAds": "fn() -> +ProductAdSelector",
        "productGroups": "fn() -> +ProductGroupSelector",
        "report": "fn(query: string, optArgs: object) -> +Report",
        "shoppingAdGroupTargeting": "fn() -> +AccountShoppingAdGroupTargeting",
        "shoppingAdGroups": "fn() -> +ShoppingAdGroupSelector",
        "shoppingCampaignTargeting": "fn() -> +AccountShoppingCampaignTargeting",
        "shoppingCampaigns": "fn() -> +ShoppingCampaignSelector",
        "targeting": "fn() -> +Targeting",
        "userlists": "fn() -> +UserListSelector",
        "videoAdGroups": "fn() -> +VideoAdGroupSelector",
        "videoAds": "fn() -> +VideoAdSelector",
        "videoCampaigns": "fn() -> +VideoCampaignSelector",
        "videoTargeting": "fn() -> +VideoTargeting"
      },
      "AdWordsApp": {
        "adCustomizerSources": "fn() -> +AdCustomizerSourceSelector",
        "adGroupTargeting": "fn() -> +AccountAdGroupTargeting",
        "adGroups": "fn() -> +AdGroupSelector",
        "adMedia": "fn() -> +AdMedia",
        "adParams": "fn() -> +AdParamSelector",
        "ads": "fn() -> +AdSelector",
        "biddingStrategies": "fn() -> +BiddingStrategySelector",
        "budgetOrders": "fn() -> +BudgetOrderSelector",
        "budgets": "fn() -> +BudgetSelector",
        "bulkUploads": "fn() -> +BulkUploads",
        "campaigns": "fn() -> +CampaignSelector",
        "createLabel": "fn(name: string, description: string, backgroundColor: string)",
        "currentAccount": "fn() -> +Account",
        "display": "fn() -> +Display",
        "drafts": "fn() -> +DraftSelector",
        "excludedPlacementLists": "fn() -> +ExcludedPlacementListSelector",
        "experiments": "fn() -> +ExperimentSelector",
        "extensions": "fn() -> +Extensions",
        "getExecutionInfo": "fn() -> +ExecutionInfo",
        "keywords": "fn() -> +KeywordSelector",
        "labels": "fn() -> +LabelSelector",
        "negativeKeywordLists": "fn() -> +NegativeKeywordListSelector",
        "newAdCustomizerSourceBuilder": "fn() -> +AdCustomizerSourceBuilder",
        "newExcludedPlacementListBuilder": "fn() -> +ExcludedPlacementListBuilder",
        "newNegativeKeywordListBuilder": "fn() -> +NegativeKeywordListBuilder",
        "productAds": "fn() -> +ProductAdSelector",
        "productGroups": "fn() -> +ProductGroupSelector",
        "report": "fn(query: string, optArgs: object) -> +Report",
        "shoppingAdGroupTargeting": "fn() -> +AccountShoppingAdGroupTargeting",
        "shoppingAdGroups": "fn() -> +ShoppingAdGroupSelector",
        "shoppingCampaignTargeting": "fn() -> +AccountShoppingCampaignTargeting",
        "shoppingCampaigns": "fn() -> +ShoppingCampaignSelector",
        "targeting": "fn() -> +Targeting",
        "userlists": "fn() -> +UserListSelector",
        "videoAdGroups": "fn() -> +VideoAdGroupSelector",
        "videoAds": "fn() -> +VideoAdSelector",
        "videoCampaigns": "fn() -> +VideoCampaignSelector",
        "videoTargeting": "fn() -> +VideoTargeting"
      },
      "!define": {
        "Account": {
          "prototype": {
            "addCallout": "fn(calloutExtension: Callout) -> +CalloutOperation",
            "addMobileApp": "fn(mobileAppExtension: MobileApp) -> +MobileAppOperation",
            "addSitelink": "fn(sitelinkExtension: Sitelink) -> +SitelinkOperation",
            "addSnippet": "fn(snippetExtension: Snippet) -> +SnippetOperation",
            "extensions": "fn() -> +AccountExtensions",
            "getCurrencyCode": "fn() -> string",
            "getCustomerId": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getTimeZone": "fn() -> string",
            "removeCallout": "fn(calloutExtension: Callout)",
            "removeMobileApp": "fn(mobileAppExtension: MobileApp)",
            "removeSnippet": "fn(snippetExtension: Snippet)"
          }
        },
        "AccountAdGroupTargeting": {
          "prototype": {
            "audiences": "fn() -> +SearchAdGroupAudienceSelector",
            "excludedAudiences": "fn() -> +SearchAdGroupExcludedAudienceSelector"
          }
        },
        "AccountCallout": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getText": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setText": "fn(text: string)"
          }
        },
        "AccountCalloutIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AccountCallout",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AccountCalloutSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AccountCalloutSelector",
            "get": "fn() -> +AccountCalloutIterator",
            "orderBy": "fn(orderBy: string) -> +AccountCalloutSelector",
            "withCondition": "fn(condition: string) -> +AccountCalloutSelector",
            "withIds": "fn(ids: [number]) -> +AccountCalloutSelector",
            "withLimit": "fn(limit: number) -> +AccountCalloutSelector"
          }
        },
        "AccountExtensions": {
          "prototype": {
            "callouts": "fn() -> +AccountCalloutSelector",
            "messages": "fn() -> +AccountMessageSelector",
            "mobileApps": "fn() -> +AccountMobileAppSelector",
            "phoneNumbers": "fn() -> +AccountPhoneNumberSelector",
            "sitelinks": "fn() -> +AccountSitelinkSelector",
            "snippets": "fn() -> +AccountSnippetSelector"
          }
        },
        "AccountMessage": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getBusinessName": "fn() -> string",
            "getCountryCode": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getExtensionText": "fn() -> string",
            "getId": "fn() -> number",
            "getMessageText": "fn() -> string",
            "getPhoneNumber": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setBusinessName": "fn(businessName: string)",
            "setCountryCode": "fn(countryCode: string)",
            "setEndDate": "fn(date: object)",
            "setExtensionText": "fn(extensionText: string)",
            "setMessageText": "fn(messageText: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setPhoneNumber": "fn(phoneNumber: string)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)"
          }
        },
        "AccountMessageIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AccountMessage",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AccountMessageSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AccountMessageSelector",
            "get": "fn() -> +AccountMessageIterator",
            "orderBy": "fn(orderBy: string) -> +AccountMessageSelector",
            "withCondition": "fn(condition: string) -> +AccountMessageSelector",
            "withIds": "fn(ids: [number]) -> +AccountMessageSelector",
            "withLimit": "fn(limit: number) -> +AccountMessageSelector"
          }
        },
        "AccountMobileApp": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearLinkUrl": "fn()",
            "clearStartDate": "fn()",
            "getAppId": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLinkText": "fn() -> string",
            "getLinkUrl": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getStore": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "setAppId": "fn(appId: string)",
            "setEndDate": "fn(date: object)",
            "setLinkText": "fn(linkText: string)",
            "setLinkUrl": "fn(linkUrl: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setStore": "fn(store: string)",
            "urls": "fn() -> +MobileAppUrls"
          }
        },
        "AccountMobileAppIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AccountMobileApp",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AccountMobileAppSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AccountMobileAppSelector",
            "get": "fn() -> +AccountMobileAppIterator",
            "orderBy": "fn(orderBy: string) -> +AccountMobileAppSelector",
            "withCondition": "fn(condition: string) -> +AccountMobileAppSelector",
            "withIds": "fn(ids: [number]) -> +AccountMobileAppSelector",
            "withLimit": "fn(limit: number) -> +AccountMobileAppSelector"
          }
        },
        "AccountPhoneNumber": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getCountry": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getPhoneNumber": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setCountry": "fn(country: string)",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setPhoneNumber": "fn(phoneNumber: string)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)"
          }
        },
        "AccountPhoneNumberIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AccountPhoneNumber",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AccountPhoneNumberSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AccountPhoneNumberSelector",
            "get": "fn() -> +AccountPhoneNumberIterator",
            "orderBy": "fn(orderBy: string) -> +AccountPhoneNumberSelector",
            "withCondition": "fn(condition: string) -> +AccountPhoneNumberSelector",
            "withIds": "fn(ids: [number]) -> +AccountPhoneNumberSelector",
            "withLimit": "fn(limit: number) -> +AccountPhoneNumberSelector"
          }
        },
        "AccountShoppingAdGroupTargeting": {
          "prototype": {
            "audiences": "fn() -> +ShoppingAdGroupAudienceSelector"
          }
        },
        "AccountShoppingCampaignTargeting": {
          "prototype": {
            "audiences": "fn() -> +ShoppingCampaignAudienceSelector"
          }
        },
        "AccountSitelink": {
          "prototype": {
            "clearDescription1": "fn()",
            "clearDescription2": "fn()",
            "clearEndDate": "fn()",
            "clearLinkUrl": "fn()",
            "clearStartDate": "fn()",
            "getDescription1": "fn() -> string",
            "getDescription2": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLinkText": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setDescription1": "fn(description1: string)",
            "setDescription2": "fn(description2: string)",
            "setEndDate": "fn(date: object)",
            "setLinkText": "fn(linkText: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "urls": "fn() -> +SitelinkUrls"
          }
        },
        "AccountSitelinkIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AccountSitelink",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AccountSitelinkSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AccountSitelinkSelector",
            "get": "fn() -> +AccountSitelinkIterator",
            "orderBy": "fn(orderBy: string) -> +AccountSitelinkSelector",
            "withCondition": "fn(condition: string) -> +AccountSitelinkSelector",
            "withIds": "fn(ids: [number]) -> +AccountSitelinkSelector",
            "withLimit": "fn(limit: number) -> +AccountSitelinkSelector"
          }
        },
        "AccountSnippet": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getHeader": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValues": "fn() -> [string]",
            "isMobilePreferred": "fn() -> bool",
            "setEndDate": "fn(date: object)",
            "setHeader": "fn(header: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setValues": "fn(values: [string])"
          }
        },
        "AccountSnippetIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AccountSnippet",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AccountSnippetSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AccountSnippetSelector",
            "get": "fn() -> +AccountSnippetIterator",
            "orderBy": "fn(orderBy: string) -> +AccountSnippetSelector",
            "withCondition": "fn(condition: string) -> +AccountSnippetSelector",
            "withIds": "fn(ids: [number]) -> +AccountSnippetSelector",
            "withLimit": "fn(limit: number) -> +AccountSnippetSelector"
          }
        },
        "Ad": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getApprovalStatus": "fn() -> string",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getDescription1": "fn() -> string",
            "getDescription2": "fn() -> string",
            "getDisapprovalReasons": "fn() -> [string]",
            "getDisplayUrl": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getHeadline": "fn() -> string",
            "getId": "fn() -> number",
            "getPolicyApprovalStatus": "fn() -> string",
            "getPolicyTopics": "fn() -> [+PolicyTopic]",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isMobilePreferred": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "AdBuilder": {
          "prototype": {
            "build": "fn() -> +AdOperation",
            "withCustomParameters": "fn(customParameters: object) -> +AdBuilder",
            "withDescription1": "fn(description1: string) -> +AdBuilder",
            "withDescription2": "fn(description2: string) -> +AdBuilder",
            "withDisplayUrl": "fn(displayUrl: string) -> +AdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +AdBuilder",
            "withHeadline": "fn(headline: string) -> +AdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +AdBuilder",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +AdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +AdBuilder"
          }
        },
        "AdBuilderSpace": {
          "prototype": {
            "expandedTextAdBuilder": "fn() -> +ExpandedTextAdBuilder",
            "gmailImageAdBuilder": "fn() -> +GmailImageAdBuilder",
            "gmailMultiProductAdBuilder": "fn() -> +GmailMultiProductAdBuilder",
            "gmailSinglePromotionAdBuilder": "fn() -> +GmailSinglePromotionAdBuilder",
            "html5AdBuilder": "fn() -> +Html5AdBuilder",
            "imageAdBuilder": "fn() -> +ImageAdBuilder",
            "responsiveDisplayAdBuilder": "fn() -> +ResponsiveDisplayAdBuilder",
            "responsiveSearchAdBuilder": "fn() -> +ResponsiveSearchAdBuilder"
          }
        },
        "AdCustomizerItem": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "clearTargetAdGroup": "fn()",
            "clearTargetCampaign": "fn()",
            "clearTargetKeyword": "fn()",
            "getAttributeValue": "fn(name: string) -> object",
            "getAttributeValues": "fn() -> object",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getTargetAdGroupName": "fn() -> string",
            "getTargetCampaignName": "fn() -> string",
            "getTargetKeywordText": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "remove": "fn()",
            "setAttributeValue": "fn(name: string, value: object)",
            "setAttributeValues": "fn(attributeValues: object)",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setTargetAdGroup": "fn(campaignName: string, adGroupName: string)",
            "setTargetCampaign": "fn(campaignName: string)",
            "setTargetKeyword": "fn(keyword: string)"
          }
        },
        "AdCustomizerItemBuilder": {
          "prototype": {
            "build": "fn() -> +AdCustomizerItemOperation",
            "withAttributeValue": "fn(name: string, value: object) -> +AdCustomizerItemBuilder",
            "withAttributeValues": "fn(attributeValues: object) -> +AdCustomizerItemBuilder",
            "withEndDate": "fn(date: object) -> +AdCustomizerItemBuilder",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +AdCustomizerItemBuilder",
            "withSchedules": "fn(schedules: [ExtensionSchedule]) -> +AdCustomizerItemBuilder",
            "withStartDate": "fn(date: object) -> +AdCustomizerItemBuilder",
            "withTargetAdGroup": "fn(campaignName: string, adGroupName: string) -> +AdCustomizerItemBuilder",
            "withTargetCampaign": "fn(campaignName: string) -> +AdCustomizerItemBuilder",
            "withTargetKeyword": "fn(keyword: string) -> +AdCustomizerItemBuilder"
          }
        },
        "AdCustomizerItemIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdCustomizerItem",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdCustomizerItemOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +AdCustomizerItem",
            "isSuccessful": "fn() -> bool"
          }
        },
        "AdCustomizerItemSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdCustomizerItemSelector",
            "get": "fn() -> +AdCustomizerItemIterator",
            "orderBy": "fn(orderBy: string) -> +AdCustomizerItemSelector",
            "withCondition": "fn(condition: string) -> +AdCustomizerItemSelector",
            "withIds": "fn(ids: [number]) -> +AdCustomizerItemSelector",
            "withLimit": "fn(limit: number) -> +AdCustomizerItemSelector"
          }
        },
        "AdCustomizerSource": {
          "prototype": {
            "adCustomizerItemBuilder": "fn() -> +AdCustomizerItemBuilder",
            "getAttributes": "fn() -> object",
            "getEntityType": "fn() -> string",
            "getName": "fn() -> string",
            "items": "fn() -> +AdCustomizerItemSelector"
          }
        },
        "AdCustomizerSourceBuilder": {
          "prototype": {
            "addAttribute": "fn(name: string, type: string) -> +AdCustomizerSourceBuilder",
            "addAttributes": "fn(attributes: object) -> +AdCustomizerSourceBuilder",
            "build": "fn() -> +AdCustomizerSourceOperation",
            "withName": "fn(name: string) -> +AdCustomizerSourceBuilder"
          }
        },
        "AdCustomizerSourceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdCustomizerSource",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdCustomizerSourceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +AdCustomizerSource",
            "isSuccessful": "fn() -> bool"
          }
        },
        "AdCustomizerSourceSelector": {
          "prototype": {
            "get": "fn() -> +AdCustomizerSourceIterator",
            "withLimit": "fn(limit: number) -> +AdCustomizerSourceSelector"
          }
        },
        "AdGroup": {
          "prototype": {
            "adParams": "fn() -> +AdParamSelector",
            "addCallout": "fn(calloutExtension: Callout) -> +CalloutOperation",
            "addMessage": "fn(messageExtension: Message) -> +MessageOperation",
            "addMobileApp": "fn(mobileAppExtension: MobileApp) -> +MobileAppOperation",
            "addPhoneNumber": "fn(phoneNumberExtension: PhoneNumber) -> +PhoneNumberOperation",
            "addSitelink": "fn(sitelinkExtension: Sitelink) -> +SitelinkOperation",
            "addSnippet": "fn(snippetExtension: Snippet) -> +SnippetOperation",
            "ads": "fn() -> +AdSelector",
            "applyLabel": "fn(name: string)",
            "bidding": "fn() -> +AdGroupBidding",
            "clearMobileBidModifier": "fn()",
            "createNegativeKeyword": "fn(keywordText: string)",
            "devices": "fn() -> +AdGroupDevices",
            "display": "fn() -> +AdGroupDisplay",
            "enable": "fn()",
            "extensions": "fn() -> +AdGroupExtensions",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMobileBidModifier": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "isRemoved": "fn() -> bool",
            "keywords": "fn() -> +KeywordSelector",
            "labels": "fn() -> +LabelSelector",
            "negativeKeywords": "fn() -> +NegativeKeywordSelector",
            "newAd": "fn() -> +AdBuilderSpace",
            "newKeywordBuilder": "fn() -> +KeywordBuilder",
            "newTextAdBuilder": "fn() -> +AdBuilder",
            "pause": "fn()",
            "removeCallout": "fn(calloutExtension: Callout)",
            "removeLabel": "fn(name: string)",
            "removeMessage": "fn(messageExtension: Message)",
            "removeMobileApp": "fn(mobileAppExtension: MobileApp)",
            "removePhoneNumber": "fn(phoneNumberExtension: PhoneNumber)",
            "removeSitelink": "fn(sitelinkExtension: Sitelink)",
            "removeSnippet": "fn(snippetExtension: Snippet)",
            "setMobileBidModifier": "fn(modifier: number)",
            "setName": "fn(name: string)",
            "targeting": "fn() -> +AdGroupTargeting",
            "urls": "fn() -> +AdGroupUrls"
          }
        },
        "AdGroupBidding": {
          "prototype": {
            "getCpa": "fn() -> number",
            "getCpc": "fn() -> number",
            "getCpm": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpa": "fn(cpa: number)",
            "setCpc": "fn(cpc: number)",
            "setCpm": "fn(cpm: number)"
          }
        },
        "AdGroupBuilder": {
          "prototype": {
            "build": "fn() -> +AdGroupOperation",
            "withBiddingStrategy": "fn(biddingStrategy: string) -> +AdGroupBuilder",
            "withCpa": "fn(cpa: number) -> +AdGroupBuilder",
            "withCpc": "fn(cpc: number) -> +AdGroupBuilder",
            "withCpm": "fn(cpm: number) -> +AdGroupBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +AdGroupBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +AdGroupBuilder",
            "withName": "fn(name: string) -> +AdGroupBuilder",
            "withStatus": "fn(status: string) -> +AdGroupBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +AdGroupBuilder"
          }
        },
        "AdGroupCallout": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getText": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setText": "fn(text: string)"
          }
        },
        "AdGroupCalloutIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdGroupCallout",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdGroupCalloutSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdGroupCalloutSelector",
            "get": "fn() -> +AdGroupCalloutIterator",
            "orderBy": "fn(orderBy: string) -> +AdGroupCalloutSelector",
            "withCondition": "fn(condition: string) -> +AdGroupCalloutSelector",
            "withIds": "fn(ids: [number]) -> +AdGroupCalloutSelector",
            "withLimit": "fn(limit: number) -> +AdGroupCalloutSelector"
          }
        },
        "AdGroupDevices": {
          "prototype": {
            "clearDesktopBidModifier": "fn()",
            "clearMobileBidModifier": "fn()",
            "clearTabletBidModifier": "fn()",
            "getDesktopBidModifier": "fn() -> number",
            "getMobileBidModifier": "fn() -> number",
            "getTabletBidModifier": "fn() -> number",
            "setDesktopBidModifier": "fn(modifier: number)",
            "setMobileBidModifier": "fn(modifier: number)",
            "setTabletBidModifier": "fn(modifier: number)"
          }
        },
        "AdGroupDisplay": {
          "prototype": {
            "audiences": "fn() -> +AudienceSelector",
            "excludedAudiences": "fn() -> +ExcludedAudienceSelector",
            "excludedKeywords": "fn() -> +ExcludedDisplayKeywordSelector",
            "excludedPlacements": "fn() -> +ExcludedPlacementSelector",
            "excludedTopics": "fn() -> +ExcludedTopicSelector",
            "excludedYouTubeChannels": "fn() -> +ExcludedYouTubeChannelSelector",
            "excludedYouTubeVideos": "fn() -> +ExcludedYouTubeVideoSelector",
            "keywords": "fn() -> +DisplayKeywordSelector",
            "newAudienceBuilder": "fn() -> +AudienceBuilder",
            "newKeywordBuilder": "fn() -> +DisplayKeywordBuilder",
            "newPlacementBuilder": "fn() -> +PlacementBuilder",
            "newTopicBuilder": "fn() -> +TopicBuilder",
            "newYouTubeChannelBuilder": "fn() -> +YouTubeChannelBuilder",
            "newYouTubeVideoBuilder": "fn() -> +YouTubeVideoBuilder",
            "placements": "fn() -> +PlacementSelector",
            "topics": "fn() -> +TopicSelector",
            "youTubeChannels": "fn() -> +YouTubeChannelSelector",
            "youTubeVideos": "fn() -> +YouTubeVideoSelector"
          }
        },
        "AdGroupExtensions": {
          "prototype": {
            "callouts": "fn() -> +AdGroupCalloutSelector",
            "messages": "fn() -> +AdGroupMessageSelector",
            "mobileApps": "fn() -> +AdGroupMobileAppSelector",
            "phoneNumbers": "fn() -> +AdGroupPhoneNumberSelector",
            "sitelinks": "fn() -> +AdGroupSitelinkSelector",
            "snippets": "fn() -> +AdGroupSnippetSelector"
          }
        },
        "AdGroupIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdGroup",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdGroupMessage": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getBusinessName": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getCountryCode": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getExtensionText": "fn() -> string",
            "getId": "fn() -> number",
            "getMessageText": "fn() -> string",
            "getPhoneNumber": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setBusinessName": "fn(businessName: string)",
            "setCountryCode": "fn(countryCode: string)",
            "setEndDate": "fn(date: object)",
            "setExtensionText": "fn(extensionText: string)",
            "setMessageText": "fn(messageText: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setPhoneNumber": "fn(phoneNumber: string)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)"
          }
        },
        "AdGroupMessageIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdGroupMessage",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdGroupMessageSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdGroupMessageSelector",
            "get": "fn() -> +AdGroupMessageIterator",
            "orderBy": "fn(orderBy: string) -> +AdGroupMessageSelector",
            "withCondition": "fn(condition: string) -> +AdGroupMessageSelector",
            "withIds": "fn(ids: [number]) -> +AdGroupMessageSelector",
            "withLimit": "fn(limit: number) -> +AdGroupMessageSelector"
          }
        },
        "AdGroupMobileApp": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearLinkUrl": "fn()",
            "clearStartDate": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getAppId": "fn() -> string",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLinkText": "fn() -> string",
            "getLinkUrl": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getStore": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "setAppId": "fn(appId: string)",
            "setEndDate": "fn(date: object)",
            "setLinkText": "fn(linkText: string)",
            "setLinkUrl": "fn(linkUrl: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setStore": "fn(store: string)",
            "urls": "fn() -> +MobileAppUrls"
          }
        },
        "AdGroupMobileAppIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdGroupMobileApp",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdGroupMobileAppSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdGroupMobileAppSelector",
            "get": "fn() -> +AdGroupMobileAppIterator",
            "orderBy": "fn(orderBy: string) -> +AdGroupMobileAppSelector",
            "withCondition": "fn(condition: string) -> +AdGroupMobileAppSelector",
            "withIds": "fn(ids: [number]) -> +AdGroupMobileAppSelector",
            "withLimit": "fn(limit: number) -> +AdGroupMobileAppSelector"
          }
        },
        "AdGroupOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +AdGroup",
            "isSuccessful": "fn() -> bool"
          }
        },
        "AdGroupPhoneNumber": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getCountry": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getPhoneNumber": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isCallOnly": "fn() -> bool",
            "isMobilePreferred": "fn() -> bool",
            "setCallOnly": "fn(callOnly: bool)",
            "setCountry": "fn(country: string)",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setPhoneNumber": "fn(phoneNumber: string)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)"
          }
        },
        "AdGroupPhoneNumberIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdGroupPhoneNumber",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdGroupPhoneNumberSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdGroupPhoneNumberSelector",
            "get": "fn() -> +AdGroupPhoneNumberIterator",
            "orderBy": "fn(orderBy: string) -> +AdGroupPhoneNumberSelector",
            "withCondition": "fn(condition: string) -> +AdGroupPhoneNumberSelector",
            "withIds": "fn(ids: [number]) -> +AdGroupPhoneNumberSelector",
            "withLimit": "fn(limit: number) -> +AdGroupPhoneNumberSelector"
          }
        },
        "AdGroupSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdGroupSelector",
            "get": "fn() -> +AdGroupIterator",
            "orderBy": "fn(orderBy: string) -> +AdGroupSelector",
            "withCondition": "fn(condition: string) -> +AdGroupSelector",
            "withIds": "fn(ids: [number]) -> +AdGroupSelector",
            "withLimit": "fn(limit: number) -> +AdGroupSelector"
          }
        },
        "AdGroupSitelink": {
          "prototype": {
            "clearDescription1": "fn()",
            "clearDescription2": "fn()",
            "clearEndDate": "fn()",
            "clearLinkUrl": "fn()",
            "clearStartDate": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getDescription1": "fn() -> string",
            "getDescription2": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLinkText": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setDescription1": "fn(description1: string)",
            "setDescription2": "fn(description2: string)",
            "setEndDate": "fn(date: object)",
            "setLinkText": "fn(linkText: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "urls": "fn() -> +SitelinkUrls"
          }
        },
        "AdGroupSitelinkIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdGroupSitelink",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdGroupSitelinkSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdGroupSitelinkSelector",
            "get": "fn() -> +AdGroupSitelinkIterator",
            "orderBy": "fn(orderBy: string) -> +AdGroupSitelinkSelector",
            "withCondition": "fn(condition: string) -> +AdGroupSitelinkSelector",
            "withIds": "fn(ids: [number]) -> +AdGroupSitelinkSelector",
            "withLimit": "fn(limit: number) -> +AdGroupSitelinkSelector"
          }
        },
        "AdGroupSnippet": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getHeader": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValues": "fn() -> [string]",
            "isMobilePreferred": "fn() -> bool",
            "setEndDate": "fn(date: object)",
            "setHeader": "fn(header: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setValues": "fn(values: [string])"
          }
        },
        "AdGroupSnippetIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdGroupSnippet",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdGroupSnippetSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdGroupSnippetSelector",
            "get": "fn() -> +AdGroupSnippetIterator",
            "orderBy": "fn(orderBy: string) -> +AdGroupSnippetSelector",
            "withCondition": "fn(condition: string) -> +AdGroupSnippetSelector",
            "withIds": "fn(ids: [number]) -> +AdGroupSnippetSelector",
            "withLimit": "fn(limit: number) -> +AdGroupSnippetSelector"
          }
        },
        "AdGroupTargeting": {
          "prototype": {
            "audiences": "fn() -> +SearchAdGroupAudienceSelector",
            "excludedAudiences": "fn() -> +SearchAdGroupExcludedAudienceSelector",
            "getTargetingSetting": "fn(criterionTypeGroup: string) -> string",
            "newUserListBuilder": "fn() -> +SearchAdGroupAudienceBuilder",
            "setTargetingSetting": "fn(criterionTypeGroup: string, targetingSetting: string)"
          }
        },
        "AdGroupUrls": {
          "prototype": {
            "clearFinalUrlSuffix": "fn()",
            "clearTrackingTemplate": "fn()",
            "getCustomParameters": "fn() -> object",
            "getFinalUrlSuffix": "fn() -> string",
            "getTrackingTemplate": "fn() -> string",
            "setCustomParameters": "fn(customParameters: object)",
            "setFinalUrlSuffix": "fn(suffix: string)",
            "setTrackingTemplate": "fn(trackingTemplate: string)"
          }
        },
        "AdGroupVideoTargeting": {
          "prototype": {
            "ages": "fn() -> +VideoAgeSelector",
            "audiences": "fn() -> +VideoAudienceSelector",
            "excludedAges": "fn() -> +ExcludedVideoAgeSelector",
            "excludedAudiences": "fn() -> +ExcludedVideoAudienceSelector",
            "excludedGenders": "fn() -> +ExcludedVideoGenderSelector",
            "excludedKeywords": "fn() -> +ExcludedVideoKeywordSelector",
            "excludedMobileAppCategories": "fn() -> +ExcludedVideoMobileAppCategorySelector",
            "excludedMobileApplications": "fn() -> +ExcludedVideoMobileApplicationSelector",
            "excludedParentalStatuses": "fn() -> +ExcludedVideoParentalStatusSelector",
            "excludedPlacements": "fn() -> +ExcludedVideoPlacementSelector",
            "excludedTopics": "fn() -> +ExcludedVideoTopicSelector",
            "excludedYouTubeChannels": "fn() -> +ExcludedVideoYouTubeChannelSelector",
            "excludedYouTubeVideos": "fn() -> +ExcludedVideoYouTubeVideoSelector",
            "genders": "fn() -> +VideoGenderSelector",
            "keywords": "fn() -> +VideoKeywordSelector",
            "mobileAppCategories": "fn() -> +VideoMobileAppCategorySelector",
            "mobileApplications": "fn() -> +VideoMobileApplicationSelector",
            "newAgeBuilder": "fn() -> +VideoAgeBuilder",
            "newAudienceBuilder": "fn() -> +VideoAudienceBuilder",
            "newGenderBuilder": "fn() -> +VideoGenderBuilder",
            "newKeywordBuilder": "fn() -> +VideoKeywordBuilder",
            "newMobileAppCategoryBuilder": "fn() -> +VideoMobileAppCategoryBuilder",
            "newMobileApplicationBuilder": "fn() -> +VideoMobileApplicationBuilder",
            "newParentalStatusBuilder": "fn() -> +VideoParentalStatusBuilder",
            "newPlacementBuilder": "fn() -> +VideoPlacementBuilder",
            "newTopicBuilder": "fn() -> +VideoTopicBuilder",
            "newYouTubeChannelBuilder": "fn() -> +VideoYouTubeChannelBuilder",
            "newYouTubeVideoBuilder": "fn() -> +VideoYouTubeVideoBuilder",
            "parentalStatuses": "fn() -> +VideoParentalStatusSelector",
            "placements": "fn() -> +VideoPlacementSelector",
            "topics": "fn() -> +VideoTopicSelector",
            "youTubeChannels": "fn() -> +VideoYouTubeChannelSelector",
            "youTubeVideos": "fn() -> +VideoYouTubeVideoSelector"
          }
        },
        "AdIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Ad",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdMedia": {
          "prototype": {
            "media": "fn() -> +MediaSelector",
            "newImageBuilder": "fn() -> +ImageBuilder",
            "newMediaBundleBuilder": "fn() -> +MediaBundleBuilder",
            "newVideoBuilder": "fn() -> +VideoBuilder"
          }
        },
        "AdOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Ad",
            "isSuccessful": "fn() -> bool"
          }
        },
        "AdParam": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getEntityType": "fn() -> string",
            "getIndex": "fn() -> number",
            "getInsertionText": "fn() -> string",
            "getKeyword": "fn() -> +Keyword",
            "remove": "fn()",
            "setInsertionText": "fn(insertionText: string)"
          }
        },
        "AdParamIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdParam",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdParamSelector": {
          "prototype": {
            "get": "fn() -> +AdParamIterator"
          }
        },
        "AdSchedule": {
          "prototype": {
            "getBaseCampaign": "fn() -> +Campaign",
            "getBidModifier": "fn() -> number",
            "getCampaign": "fn() -> +Campaign",
            "getDayOfWeek": "fn() -> string",
            "getEndHour": "fn() -> number",
            "getEndMinute": "fn() -> number",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStartHour": "fn() -> number",
            "getStartMinute": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "AdScheduleIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AdSchedule",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AdScheduleOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +AdSchedule",
            "isSuccessful": "fn() -> bool"
          }
        },
        "AdScheduleSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdScheduleSelector",
            "get": "fn() -> +AdScheduleIterator",
            "orderBy": "fn(orderBy: string) -> +AdScheduleSelector",
            "withCondition": "fn(condition: string) -> +AdScheduleSelector",
            "withIds": "fn(ids: [[number]]) -> +AdScheduleSelector",
            "withLimit": "fn(limit: number) -> +AdScheduleSelector"
          }
        },
        "AdSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AdSelector",
            "get": "fn() -> +AdIterator",
            "orderBy": "fn(orderBy: string) -> +AdSelector",
            "withCondition": "fn(condition: string) -> +AdSelector",
            "withIds": "fn(ids: [[number]]) -> +AdSelector",
            "withLimit": "fn(limit: number) -> +AdSelector"
          }
        },
        "AdTypeSpace": {
          "prototype": {
            "expandedTextAd": "fn() -> bool",
            "gmailImageAd": "fn() -> bool",
            "gmailMultiProductAd": "fn() -> bool",
            "gmailSinglePromotionAd": "fn() -> bool",
            "html5Ad": "fn() -> bool",
            "imageAd": "fn() -> bool",
            "responsiveDisplayAd": "fn() -> bool",
            "responsiveSearchAd": "fn() -> bool"
          }
        },
        "AdUrls": {
          "prototype": {
            "getCustomParameters": "fn() -> object",
            "getFinalUrl": "fn() -> string",
            "getFinalUrlSuffix": "fn() -> string",
            "getMobileFinalUrl": "fn() -> string",
            "getTrackingTemplate": "fn() -> string"
          }
        },
        "AdViewSpace": {
          "prototype": {
            "expandedTextAd": "fn() -> +ExpandedTextAd",
            "gmailImageAd": "fn() -> +GmailImageAd",
            "gmailMultiProductAd": "fn() -> +GmailMultiProductAd",
            "gmailSinglePromotionAd": "fn() -> +GmailSinglePromotionAd",
            "html5Ad": "fn() -> +Html5Ad",
            "imageAd": "fn() -> +ImageAd",
            "responsiveDisplayAd": "fn() -> +ResponsiveDisplayAd",
            "responsiveSearchAd": "fn() -> +ResponsiveSearchAd"
          }
        },
        "Address": {
          "prototype": {
            "getCityName": "fn() -> string",
            "getCountryCode": "fn() -> string",
            "getPostalCode": "fn() -> string",
            "getProvinceCode": "fn() -> string",
            "getProvinceName": "fn() -> string",
            "getStreetAddress": "fn() -> string",
            "getStreetAddress2": "fn() -> string"
          }
        },
        "Asset": {
          "prototype": {
            "pinning": "string",
            "text": "string"
          }
        },
        "Audience": {
          "prototype": {
            "bidding": "fn() -> +AudienceBidding",
            "getAdGroup": "fn() -> +AdGroup",
            "getAudienceId": "fn() -> number",
            "getAudienceType": "fn() -> string",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "AudienceBidding": {
          "prototype": {
            "clearCpc": "fn()",
            "clearCpm": "fn()",
            "getCpc": "fn() -> number",
            "getCpm": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpc": "fn(cpc: number)",
            "setCpm": "fn(cpm: number)"
          }
        },
        "AudienceBuilder": {
          "prototype": {
            "build": "fn() -> +AudienceOperation",
            "exclude": "fn() -> +ExcludedAudienceOperation",
            "withAudience": "fn(userList: UserList) -> +AudienceBuilder",
            "withAudienceId": "fn(audienceId: number) -> +AudienceBuilder",
            "withAudienceType": "fn(audienceType: string) -> +AudienceBuilder",
            "withCpc": "fn(cpc: number) -> +AudienceBuilder",
            "withCpm": "fn(cpm: number) -> +AudienceBuilder"
          }
        },
        "AudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Audience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Audience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "AudienceSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +AudienceSelector",
            "get": "fn() -> +AudienceIterator",
            "orderBy": "fn(orderBy: string) -> +AudienceSelector",
            "withCondition": "fn(condition: string) -> +AudienceSelector",
            "withIds": "fn(ids: [[number]]) -> +AudienceSelector",
            "withLimit": "fn(limit: number) -> +AudienceSelector"
          }
        },
        "BiddingStrategy": {
          "prototype": {
            "adGroups": "fn() -> +AdGroupSelector",
            "campaigns": "fn() -> +CampaignSelector",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "keywords": "fn() -> +KeywordSelector",
            "shoppingAdGroups": "fn() -> +ShoppingAdGroupSelector",
            "shoppingCampaigns": "fn() -> +ShoppingCampaignSelector"
          }
        },
        "BiddingStrategyIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +BiddingStrategy",
            "totalNumEntities": "fn() -> number"
          }
        },
        "BiddingStrategySelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +BiddingStrategySelector",
            "get": "fn() -> +BiddingStrategyIterator",
            "orderBy": "fn(orderBy: string) -> +BiddingStrategySelector",
            "withCondition": "fn(condition: string) -> +BiddingStrategySelector",
            "withIds": "fn(ids: [number]) -> +BiddingStrategySelector",
            "withLimit": "fn(limit: number) -> +BiddingStrategySelector"
          }
        },
        "BillingAccount": {
          "prototype": {
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getPrimaryBillingId": "fn() -> string",
            "getSecondaryBillingId": "fn() -> string"
          }
        },
        "Budget": {
          "prototype": {
            "campaigns": "fn() -> +CampaignSelector",
            "getAmount": "fn() -> number",
            "getDeliveryMethod": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getTotalAmount": "fn() -> number",
            "getType": "fn() -> string",
            "isExplicitlyShared": "fn() -> bool",
            "setAmount": "fn(amount: number)",
            "setDeliveryMethod": "fn(deliveryMethod: string)",
            "setTotalAmount": "fn(totalAmount: number)"
          }
        },
        "BudgetIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Budget",
            "totalNumEntities": "fn() -> number"
          }
        },
        "BudgetOrder": {
          "prototype": {
            "getBillingAccount": "fn() -> +BillingAccount",
            "getEndDateTime": "fn() -> +GoogleAdsDate",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getPoNumber": "fn() -> number",
            "getSpendingLimit": "fn() -> number",
            "getStartDateTime": "fn() -> +GoogleAdsDate",
            "getTotalAdjustments": "fn() -> number"
          }
        },
        "BudgetOrderIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +BudgetOrder",
            "totalNumEntities": "fn() -> number"
          }
        },
        "BudgetOrderSelector": {
          "prototype": {
            "get": "fn() -> +BudgetOrderIterator",
            "withCondition": "fn(condition: string) -> +BudgetOrderSelector"
          }
        },
        "BudgetSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +BudgetSelector",
            "get": "fn() -> +BudgetIterator",
            "orderBy": "fn(orderBy: string) -> +BudgetSelector",
            "withCondition": "fn(condition: string) -> +BudgetSelector",
            "withIds": "fn(ids: [number]) -> +BudgetSelector",
            "withLimit": "fn(limit: number) -> +BudgetSelector"
          }
        },
        "BulkUploads": {
          "prototype": {
            "newCsvUpload": "fn(columnNames: [string], optArgs: object) -> +CsvUpload",
            "newFileUpload": "fn(sheet: Sheet, optArgs: object) -> +FileUpload"
          }
        },
        "BumperAdBuilder": {
          "prototype": {
            "build": "fn() -> +VideoAdOperation",
            "withAdName": "fn(adName: string) -> +BumperAdBuilder",
            "withCompanionBanner": "fn(imageMedia: Media) -> +BumperAdBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +BumperAdBuilder",
            "withDisplayUrl": "fn(displayUrl: string) -> +BumperAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +BumperAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +BumperAdBuilder",
            "withVideo": "fn(videoMedia: Media) -> +BumperAdBuilder"
          }
        },
        "Callout": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getText": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setText": "fn(text: string)"
          }
        },
        "CalloutBuilder": {
          "prototype": {
            "build": "fn() -> +CalloutOperation",
            "withEndDate": "fn(date: object) -> +CalloutBuilder",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +CalloutBuilder",
            "withSchedules": "fn(schedules: [ExtensionSchedule]) -> +CalloutBuilder",
            "withStartDate": "fn(date: object) -> +CalloutBuilder",
            "withText": "fn(text: string) -> +CalloutBuilder"
          }
        },
        "CalloutIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Callout",
            "totalNumEntities": "fn() -> number"
          }
        },
        "CalloutOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Callout",
            "isSuccessful": "fn() -> bool"
          }
        },
        "CalloutSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +CalloutSelector",
            "get": "fn() -> +CalloutIterator",
            "orderBy": "fn(orderBy: string) -> +CalloutSelector",
            "withCondition": "fn(condition: string) -> +CalloutSelector",
            "withIds": "fn(ids: [number]) -> +CalloutSelector",
            "withLimit": "fn(limit: number) -> +CalloutSelector"
          }
        },
        "Campaign": {
          "prototype": {
            "adGroups": "fn() -> +AdGroupSelector",
            "addAdSchedule": "fn(dayOfWeek: string, startHour: number, startMinute: number, endHour: number, endMinute: number, bidModifier: number) -> +AdScheduleOperation",
            "addCallout": "fn(calloutExtension: Callout) -> +CalloutOperation",
            "addExcludedPlacementList": "fn(excludedPlacementList: ExcludedPlacementList)",
            "addLocation": "fn(locationId: number, bidModifier: number) -> +TargetedLocationOperation",
            "addMessage": "fn(messageExtension: Message) -> +MessageOperation",
            "addMobileApp": "fn(mobileAppExtension: MobileApp) -> +MobileAppOperation",
            "addNegativeKeywordList": "fn(negativeKeywordList: NegativeKeywordList)",
            "addPhoneNumber": "fn(phoneNumberExtension: PhoneNumber) -> +PhoneNumberOperation",
            "addProximity": "fn(latitude: number, longitude: number, radius: number, radiusUnits: string, optArgs: object) -> +TargetedProximityOperation",
            "addSitelink": "fn(sitelinkExtension: Sitelink) -> +SitelinkOperation",
            "addSnippet": "fn(snippetExtension: Snippet) -> +SnippetOperation",
            "ads": "fn() -> +AdSelector",
            "applyLabel": "fn(name: string)",
            "bidding": "fn() -> +CampaignBidding",
            "createNegativeKeyword": "fn(keywordText: string)",
            "display": "fn() -> +CampaignDisplay",
            "draftCampaigns": "fn() -> +CampaignSelector",
            "drafts": "fn() -> +DraftSelector",
            "enable": "fn()",
            "excludeLocation": "fn(locationId: number) -> +ExcludedLocationOperation",
            "excludedPlacementLists": "fn() -> +ExcludedPlacementListSelector",
            "experimentCampaigns": "fn() -> +CampaignSelector",
            "experiments": "fn() -> +ExperimentSelector",
            "extensions": "fn() -> +CampaignExtensions",
            "getAdRotationType": "fn() -> string",
            "getBaseCampaign": "fn() -> +Campaign",
            "getBiddingStrategyType": "fn() -> string",
            "getBudget": "fn() -> +Budget",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isBaseCampaign": "fn() -> bool",
            "isDraftCampaign": "fn() -> bool",
            "isEnabled": "fn() -> bool",
            "isExperimentCampaign": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "isRemoved": "fn() -> bool",
            "keywords": "fn() -> +KeywordSelector",
            "labels": "fn() -> +LabelSelector",
            "negativeKeywordLists": "fn() -> +NegativeKeywordListSelector",
            "negativeKeywords": "fn() -> +NegativeKeywordSelector",
            "newAdGroupBuilder": "fn() -> +AdGroupBuilder",
            "newDraftBuilder": "fn() -> +DraftBuilder",
            "pause": "fn()",
            "removeCallout": "fn(calloutExtension: Callout)",
            "removeExcludedPlacementList": "fn(excludedPlacementList: ExcludedPlacementList)",
            "removeLabel": "fn(name: string)",
            "removeMessage": "fn(messageExtension: Message)",
            "removeMobileApp": "fn(mobileAppExtension: MobileApp)",
            "removeNegativeKeywordList": "fn(negativeKeywordList: NegativeKeywordList)",
            "removePhoneNumber": "fn(phoneNumberExtension: PhoneNumber)",
            "removeSitelink": "fn(sitelinkExtension: Sitelink)",
            "removeSnippet": "fn(snippetExtension: Snippet)",
            "setAdRotationType": "fn(adRotationType: string)",
            "setEndDate": "fn(date: object)",
            "setName": "fn(name: string)",
            "setStartDate": "fn(date: object)",
            "targeting": "fn() -> +CampaignTargeting",
            "urls": "fn() -> +CampaignUrls"
          }
        },
        "CampaignBidding": {
          "prototype": {
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setStrategy": "fn(biddingStrategy: string)"
          }
        },
        "CampaignCallout": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getText": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setText": "fn(text: string)"
          }
        },
        "CampaignCalloutIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +CampaignCallout",
            "totalNumEntities": "fn() -> number"
          }
        },
        "CampaignCalloutSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +CampaignCalloutSelector",
            "get": "fn() -> +CampaignCalloutIterator",
            "orderBy": "fn(orderBy: string) -> +CampaignCalloutSelector",
            "withCondition": "fn(condition: string) -> +CampaignCalloutSelector",
            "withIds": "fn(ids: [number]) -> +CampaignCalloutSelector",
            "withLimit": "fn(limit: number) -> +CampaignCalloutSelector"
          }
        },
        "CampaignDisplay": {
          "prototype": {
            "audiences": "fn() -> +AudienceSelector",
            "excludedAudiences": "fn() -> +ExcludedAudienceSelector",
            "excludedKeywords": "fn() -> +ExcludedDisplayKeywordSelector",
            "excludedPlacements": "fn() -> +ExcludedPlacementSelector",
            "excludedTopics": "fn() -> +ExcludedTopicSelector",
            "excludedYouTubeChannels": "fn() -> +ExcludedYouTubeChannelSelector",
            "excludedYouTubeVideos": "fn() -> +ExcludedYouTubeVideoSelector",
            "keywords": "fn() -> +DisplayKeywordSelector",
            "newAudienceBuilder": "fn() -> +AudienceBuilder",
            "newKeywordBuilder": "fn() -> +DisplayKeywordBuilder",
            "newPlacementBuilder": "fn() -> +PlacementBuilder",
            "newTopicBuilder": "fn() -> +TopicBuilder",
            "newYouTubeChannelBuilder": "fn() -> +YouTubeChannelBuilder",
            "newYouTubeVideoBuilder": "fn() -> +YouTubeVideoBuilder",
            "placements": "fn() -> +PlacementSelector",
            "topics": "fn() -> +TopicSelector",
            "youTubeChannels": "fn() -> +YouTubeChannelSelector",
            "youTubeVideos": "fn() -> +YouTubeVideoSelector"
          }
        },
        "CampaignExtensions": {
          "prototype": {
            "callouts": "fn() -> +CampaignCalloutSelector",
            "messages": "fn() -> +CampaignMessageSelector",
            "mobileApps": "fn() -> +CampaignMobileAppSelector",
            "phoneNumbers": "fn() -> +CampaignPhoneNumberSelector",
            "sitelinks": "fn() -> +CampaignSitelinkSelector",
            "snippets": "fn() -> +CampaignSnippetSelector"
          }
        },
        "CampaignIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Campaign",
            "totalNumEntities": "fn() -> number"
          }
        },
        "CampaignMessage": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getBaseCampaign": "fn() -> +Campaign",
            "getBusinessName": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getCountryCode": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getExtensionText": "fn() -> string",
            "getId": "fn() -> number",
            "getMessageText": "fn() -> string",
            "getPhoneNumber": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setBusinessName": "fn(businessName: string)",
            "setCountryCode": "fn(countryCode: string)",
            "setEndDate": "fn(date: object)",
            "setExtensionText": "fn(extensionText: string)",
            "setMessageText": "fn(messageText: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setPhoneNumber": "fn(phoneNumber: string)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)"
          }
        },
        "CampaignMessageIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +CampaignMessage",
            "totalNumEntities": "fn() -> number"
          }
        },
        "CampaignMessageSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +CampaignMessageSelector",
            "get": "fn() -> +CampaignMessageIterator",
            "orderBy": "fn(orderBy: string) -> +CampaignMessageSelector",
            "withCondition": "fn(condition: string) -> +CampaignMessageSelector",
            "withIds": "fn(ids: [number]) -> +CampaignMessageSelector",
            "withLimit": "fn(limit: number) -> +CampaignMessageSelector"
          }
        },
        "CampaignMobileApp": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearLinkUrl": "fn()",
            "clearStartDate": "fn()",
            "getAppId": "fn() -> string",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLinkText": "fn() -> string",
            "getLinkUrl": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getStore": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "setAppId": "fn(appId: string)",
            "setEndDate": "fn(date: object)",
            "setLinkText": "fn(linkText: string)",
            "setLinkUrl": "fn(linkUrl: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setStore": "fn(store: string)",
            "urls": "fn() -> +MobileAppUrls"
          }
        },
        "CampaignMobileAppIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +CampaignMobileApp",
            "totalNumEntities": "fn() -> number"
          }
        },
        "CampaignMobileAppSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +CampaignMobileAppSelector",
            "get": "fn() -> +CampaignMobileAppIterator",
            "orderBy": "fn(orderBy: string) -> +CampaignMobileAppSelector",
            "withCondition": "fn(condition: string) -> +CampaignMobileAppSelector",
            "withIds": "fn(ids: [number]) -> +CampaignMobileAppSelector",
            "withLimit": "fn(limit: number) -> +CampaignMobileAppSelector"
          }
        },
        "CampaignPhoneNumber": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getCountry": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getPhoneNumber": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isCallOnly": "fn() -> bool",
            "isMobilePreferred": "fn() -> bool",
            "setCallOnly": "fn(callOnly: bool)",
            "setCountry": "fn(country: string)",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setPhoneNumber": "fn(phoneNumber: string)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)"
          }
        },
        "CampaignPhoneNumberIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +CampaignPhoneNumber",
            "totalNumEntities": "fn() -> number"
          }
        },
        "CampaignPhoneNumberSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +CampaignPhoneNumberSelector",
            "get": "fn() -> +CampaignPhoneNumberIterator",
            "orderBy": "fn(orderBy: string) -> +CampaignPhoneNumberSelector",
            "withCondition": "fn(condition: string) -> +CampaignPhoneNumberSelector",
            "withIds": "fn(ids: [number]) -> +CampaignPhoneNumberSelector",
            "withLimit": "fn(limit: number) -> +CampaignPhoneNumberSelector"
          }
        },
        "CampaignSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +CampaignSelector",
            "get": "fn() -> +CampaignIterator",
            "orderBy": "fn(orderBy: string) -> +CampaignSelector",
            "withCondition": "fn(condition: string) -> +CampaignSelector",
            "withIds": "fn(ids: [number]) -> +CampaignSelector",
            "withLimit": "fn(limit: number) -> +CampaignSelector"
          }
        },
        "CampaignSitelink": {
          "prototype": {
            "clearDescription1": "fn()",
            "clearDescription2": "fn()",
            "clearEndDate": "fn()",
            "clearLinkUrl": "fn()",
            "clearStartDate": "fn()",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getDescription1": "fn() -> string",
            "getDescription2": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLinkText": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setDescription1": "fn(description1: string)",
            "setDescription2": "fn(description2: string)",
            "setEndDate": "fn(date: object)",
            "setLinkText": "fn(linkText: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "urls": "fn() -> +SitelinkUrls"
          }
        },
        "CampaignSitelinkIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +CampaignSitelink",
            "totalNumEntities": "fn() -> number"
          }
        },
        "CampaignSitelinkSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +CampaignSitelinkSelector",
            "get": "fn() -> +CampaignSitelinkIterator",
            "orderBy": "fn(orderBy: string) -> +CampaignSitelinkSelector",
            "withCondition": "fn(condition: string) -> +CampaignSitelinkSelector",
            "withIds": "fn(ids: [number]) -> +CampaignSitelinkSelector",
            "withLimit": "fn(limit: number) -> +CampaignSitelinkSelector"
          }
        },
        "CampaignSnippet": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getHeader": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValues": "fn() -> [string]",
            "isMobilePreferred": "fn() -> bool",
            "setEndDate": "fn(date: object)",
            "setHeader": "fn(header: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setValues": "fn(values: [string])"
          }
        },
        "CampaignSnippetIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +CampaignSnippet",
            "totalNumEntities": "fn() -> number"
          }
        },
        "CampaignSnippetSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +CampaignSnippetSelector",
            "get": "fn() -> +CampaignSnippetIterator",
            "orderBy": "fn(orderBy: string) -> +CampaignSnippetSelector",
            "withCondition": "fn(condition: string) -> +CampaignSnippetSelector",
            "withIds": "fn(ids: [number]) -> +CampaignSnippetSelector",
            "withLimit": "fn(limit: number) -> +CampaignSnippetSelector"
          }
        },
        "CampaignTargeting": {
          "prototype": {
            "adSchedules": "fn() -> +AdScheduleSelector",
            "audiences": "fn() -> +SearchCampaignAudienceSelector",
            "excludedAudiences": "fn() -> +SearchCampaignExcludedAudienceSelector",
            "excludedContentLabels": "fn() -> +ExcludedContentLabelSelector",
            "excludedLocations": "fn() -> +ExcludedLocationSelector",
            "getTargetingSetting": "fn(criterionTypeGroup: string) -> string",
            "languages": "fn() -> +LanguageSelector",
            "newUserListBuilder": "fn() -> +SearchCampaignAudienceBuilder",
            "platforms": "fn() -> +PlatformSelector",
            "setTargetingSetting": "fn(criterionTypeGroup: string, targetingSetting: string)",
            "targetedLocations": "fn() -> +TargetedLocationSelector",
            "targetedProximities": "fn() -> +TargetedProximitySelector"
          }
        },
        "CampaignUrls": {
          "prototype": {
            "clearFinalUrlSuffix": "fn()",
            "clearTrackingTemplate": "fn()",
            "getCustomParameters": "fn() -> object",
            "getFinalUrlSuffix": "fn() -> string",
            "getTrackingTemplate": "fn() -> string",
            "setCustomParameters": "fn(customParameters: object)",
            "setFinalUrlSuffix": "fn(suffix: string)",
            "setTrackingTemplate": "fn(trackingTemplate: string)"
          }
        },
        "CampaignVideoTargeting": {
          "prototype": {
            "ages": "fn() -> +VideoAgeSelector",
            "audiences": "fn() -> +VideoAudienceSelector",
            "excludedAges": "fn() -> +ExcludedVideoAgeSelector",
            "excludedAudiences": "fn() -> +ExcludedVideoAudienceSelector",
            "excludedGenders": "fn() -> +ExcludedVideoGenderSelector",
            "excludedKeywords": "fn() -> +ExcludedVideoKeywordSelector",
            "excludedMobileAppCategories": "fn() -> +ExcludedVideoMobileAppCategorySelector",
            "excludedMobileApplications": "fn() -> +ExcludedVideoMobileApplicationSelector",
            "excludedParentalStatuses": "fn() -> +ExcludedVideoParentalStatusSelector",
            "excludedPlacements": "fn() -> +ExcludedVideoPlacementSelector",
            "excludedTopics": "fn() -> +ExcludedVideoTopicSelector",
            "excludedYouTubeChannels": "fn() -> +ExcludedVideoYouTubeChannelSelector",
            "excludedYouTubeVideos": "fn() -> +ExcludedVideoYouTubeVideoSelector",
            "genders": "fn() -> +VideoGenderSelector",
            "keywords": "fn() -> +VideoKeywordSelector",
            "mobileAppCategories": "fn() -> +VideoMobileAppCategorySelector",
            "mobileApplications": "fn() -> +VideoMobileApplicationSelector",
            "newAgeBuilder": "fn() -> +VideoAgeBuilder",
            "newAudienceBuilder": "fn() -> +VideoAudienceBuilder",
            "newGenderBuilder": "fn() -> +VideoGenderBuilder",
            "newKeywordBuilder": "fn() -> +VideoKeywordBuilder",
            "newMobileAppCategoryBuilder": "fn() -> +VideoMobileAppCategoryBuilder",
            "newMobileApplicationBuilder": "fn() -> +VideoMobileApplicationBuilder",
            "newParentalStatusBuilder": "fn() -> +VideoParentalStatusBuilder",
            "newPlacementBuilder": "fn() -> +VideoPlacementBuilder",
            "newTopicBuilder": "fn() -> +VideoTopicBuilder",
            "newYouTubeChannelBuilder": "fn() -> +VideoYouTubeChannelBuilder",
            "newYouTubeVideoBuilder": "fn() -> +VideoYouTubeVideoBuilder",
            "parentalStatuses": "fn() -> +VideoParentalStatusSelector",
            "placements": "fn() -> +VideoPlacementSelector",
            "topics": "fn() -> +VideoTopicSelector",
            "youTubeChannels": "fn() -> +VideoYouTubeChannelSelector",
            "youTubeVideos": "fn() -> +VideoYouTubeVideoSelector"
          }
        },
        "CsvUpload": {
          "prototype": {
            "append": "fn(row: object) -> +CsvUpload",
            "apply": "fn()",
            "forCampaignManagement": "fn() -> +CsvUpload",
            "forOfflineConversions": "fn() -> +CsvUpload",
            "preview": "fn()",
            "setFileName": "fn(fileName: string) -> +CsvUpload"
          }
        },
        "Dimensions": {
          "prototype": {
            "getHeight": "fn() -> number",
            "getWidth": "fn() -> number"
          }
        },
        "Display": {
          "prototype": {
            "audiences": "fn() -> +AudienceSelector",
            "keywords": "fn() -> +DisplayKeywordSelector",
            "placements": "fn() -> +PlacementSelector",
            "topics": "fn() -> +TopicSelector",
            "youTubeChannels": "fn() -> +YouTubeChannelSelector",
            "youTubeVideos": "fn() -> +YouTubeVideoSelector"
          }
        },
        "DisplayKeyword": {
          "prototype": {
            "bidding": "fn() -> +DisplayKeywordBidding",
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getText": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "DisplayKeywordBidding": {
          "prototype": {
            "clearCpc": "fn()",
            "clearCpm": "fn()",
            "clearStrategy": "fn()",
            "getCpc": "fn() -> number",
            "getCpm": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpc": "fn(cpc: number)",
            "setCpm": "fn(cpm: number)",
            "setStrategy": "fn(biddingStrategy: string)"
          }
        },
        "DisplayKeywordBuilder": {
          "prototype": {
            "build": "fn() -> +DisplayKeywordOperation",
            "exclude": "fn() -> +ExcludedDisplayKeywordOperation",
            "withCpc": "fn(cpc: number) -> +DisplayKeywordBuilder",
            "withCpm": "fn(cpm: number) -> +DisplayKeywordBuilder",
            "withText": "fn(text: string) -> +DisplayKeywordBuilder"
          }
        },
        "DisplayKeywordIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +DisplayKeyword",
            "totalNumEntities": "fn() -> number"
          }
        },
        "DisplayKeywordOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +DisplayKeyword",
            "isSuccessful": "fn() -> bool"
          }
        },
        "DisplayKeywordSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +DisplayKeywordSelector",
            "get": "fn() -> +DisplayKeywordIterator",
            "orderBy": "fn(orderBy: string) -> +DisplayKeywordSelector",
            "withCondition": "fn(condition: string) -> +DisplayKeywordSelector",
            "withIds": "fn(ids: [[number]]) -> +DisplayKeywordSelector",
            "withLimit": "fn(limit: number) -> +DisplayKeywordSelector"
          }
        },
        "Draft": {
          "prototype": {
            "getBaseCampaign": "fn() -> +Campaign",
            "getDraftCampaign": "fn() -> +Campaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatus": "fn() -> string",
            "hasRunningExperiment": "fn() -> bool",
            "newExperimentBuilder": "fn() -> +ExperimentBuilder",
            "remove": "fn()",
            "setName": "fn(name: string)",
            "startApplying": "fn()"
          }
        },
        "DraftBuilder": {
          "prototype": {
            "build": "fn() -> +DraftOperation",
            "withName": "fn(name: string) -> +DraftBuilder"
          }
        },
        "DraftIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Draft",
            "totalNumEntities": "fn() -> number"
          }
        },
        "DraftOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Draft",
            "isSuccessful": "fn() -> bool"
          }
        },
        "DraftSelector": {
          "prototype": {
            "get": "fn() -> +DraftIterator",
            "orderBy": "fn(orderBy: string) -> +DraftSelector",
            "withCondition": "fn(condition: string) -> +DraftSelector",
            "withIds": "fn(ids: [[number]]) -> +DraftSelector",
            "withLimit": "fn(limit: number) -> +DraftSelector"
          }
        },
        "ExcludedAudience": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getAudienceId": "fn() -> number",
            "getAudienceType": "fn() -> string",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "remove": "fn()"
          }
        },
        "ExcludedAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedAudienceSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedAudienceSelector",
            "withCondition": "fn(condition: string) -> +ExcludedAudienceSelector",
            "withLimit": "fn(limit: number) -> +ExcludedAudienceSelector"
          }
        },
        "ExcludedContentLabel": {
          "prototype": {
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getCampaignType": "fn() -> string",
            "getContentLabelType": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedContentLabelIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedContentLabel",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedContentLabelOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedContentLabel",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedContentLabelSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedContentLabelIterator",
            "withIds": "fn(ids: [[number]]) -> +ExcludedContentLabelSelector",
            "withLimit": "fn(limit: number) -> +ExcludedContentLabelSelector"
          }
        },
        "ExcludedDisplayKeyword": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getText": "fn() -> string",
            "remove": "fn()"
          }
        },
        "ExcludedDisplayKeywordIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedDisplayKeyword",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedDisplayKeywordOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedDisplayKeyword",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedDisplayKeywordSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedDisplayKeywordIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedDisplayKeywordSelector",
            "withCondition": "fn(condition: string) -> +ExcludedDisplayKeywordSelector",
            "withLimit": "fn(limit: number) -> +ExcludedDisplayKeywordSelector"
          }
        },
        "ExcludedLocation": {
          "prototype": {
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getCountryCode": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getTargetType": "fn() -> string",
            "getTargetingStatus": "fn() -> string",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedLocationIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedLocation",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedLocationOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedLocation",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedLocationSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedLocationIterator",
            "withLimit": "fn(limit: number) -> +ExcludedLocationSelector"
          }
        },
        "ExcludedPlacement": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getUrl": "fn() -> string",
            "remove": "fn()"
          }
        },
        "ExcludedPlacementIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedPlacement",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedPlacementList": {
          "prototype": {
            "addExcludedPlacement": "fn(url: string)",
            "addExcludedPlacements": "fn(urls: [string])",
            "campaigns": "fn() -> +CampaignSelector",
            "excludedPlacements": "fn() -> +SharedExcludedPlacementSelector",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "setName": "fn(name: string)"
          }
        },
        "ExcludedPlacementListBuilder": {
          "prototype": {
            "build": "fn() -> +ExcludedPlacementListOperation",
            "withName": "fn(name: string) -> +ExcludedPlacementListBuilder"
          }
        },
        "ExcludedPlacementListIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedPlacementList",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedPlacementListOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedPlacementList",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedPlacementListSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedPlacementListIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedPlacementListSelector",
            "withCondition": "fn(condition: string) -> +ExcludedPlacementListSelector",
            "withIds": "fn(ids: [number]) -> +ExcludedPlacementListSelector",
            "withLimit": "fn(limit: number) -> +ExcludedPlacementListSelector"
          }
        },
        "ExcludedPlacementOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedPlacement",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedPlacementSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedPlacementIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedPlacementSelector",
            "withCondition": "fn(condition: string) -> +ExcludedPlacementSelector",
            "withLimit": "fn(limit: number) -> +ExcludedPlacementSelector"
          }
        },
        "ExcludedTopic": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getTopicId": "fn() -> number",
            "remove": "fn()"
          }
        },
        "ExcludedTopicIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedTopic",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedTopicOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedTopic",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedTopicSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedTopicIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedTopicSelector",
            "withCondition": "fn(condition: string) -> +ExcludedTopicSelector",
            "withLimit": "fn(limit: number) -> +ExcludedTopicSelector"
          }
        },
        "ExcludedVideoAge": {
          "prototype": {
            "getAgeRange": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "include": "fn()"
          }
        },
        "ExcludedVideoAgeIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoAge",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoAgeOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoAge",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoAgeSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoAgeIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoAgeSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoAgeSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoAgeSelector"
          }
        },
        "ExcludedVideoAudience": {
          "prototype": {
            "getAudienceId": "fn() -> number",
            "getAudienceType": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedVideoAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoAudienceSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoAudienceSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoAudienceSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoAudienceSelector"
          }
        },
        "ExcludedVideoGender": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getGenderType": "fn() -> string",
            "getId": "fn() -> number",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "include": "fn()"
          }
        },
        "ExcludedVideoGenderIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoGender",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoGenderOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoGender",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoGenderSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoGenderIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoGenderSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoGenderSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoGenderSelector"
          }
        },
        "ExcludedVideoKeyword": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getText": "fn() -> string",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedVideoKeywordIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoKeyword",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoKeywordOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoKeyword",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoKeywordSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoKeywordIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoKeywordSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoKeywordSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoKeywordSelector"
          }
        },
        "ExcludedVideoMobileAppCategory": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMobileAppCategoryId": "fn() -> number",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedVideoMobileAppCategoryIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoMobileAppCategory",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoMobileAppCategoryOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoMobileAppCategory",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoMobileAppCategorySelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoMobileAppCategoryIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoMobileAppCategorySelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoMobileAppCategorySelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoMobileAppCategorySelector"
          }
        },
        "ExcludedVideoMobileApplication": {
          "prototype": {
            "getAppId": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedVideoMobileApplicationIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoMobileApplication",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoMobileApplicationOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoMobileApplication",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoMobileApplicationSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoMobileApplicationIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoMobileApplicationSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoMobileApplicationSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoMobileApplicationSelector"
          }
        },
        "ExcludedVideoParentalStatus": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getParentType": "fn() -> string",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "include": "fn()"
          }
        },
        "ExcludedVideoParentalStatusIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoParentalStatus",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoParentalStatusOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoParentalStatus",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoParentalStatusSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoParentalStatusIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoParentalStatusSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoParentalStatusSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoParentalStatusSelector"
          }
        },
        "ExcludedVideoPlacement": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getUrl": "fn() -> string",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedVideoPlacementIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoPlacement",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoPlacementOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoPlacement",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoPlacementSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoPlacementIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoPlacementSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoPlacementSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoPlacementSelector"
          }
        },
        "ExcludedVideoTopic": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getTopicId": "fn() -> number",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedVideoTopicIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoTopic",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoTopicOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoTopic",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoTopicSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoTopicIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoTopicSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoTopicSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoTopicSelector"
          }
        },
        "ExcludedVideoYouTubeChannel": {
          "prototype": {
            "getChannelId": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "ExcludedVideoYouTubeChannelIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoYouTubeChannel",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoYouTubeChannelOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoYouTubeChannel",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoYouTubeChannelSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoYouTubeChannelIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoYouTubeChannelSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoYouTubeChannelSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoYouTubeChannelSelector"
          }
        },
        "ExcludedVideoYouTubeVideo": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "getVideoId": "fn() -> string",
            "remove": "fn()"
          }
        },
        "ExcludedVideoYouTubeVideoIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedVideoYouTubeVideo",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedVideoYouTubeVideoOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedVideoYouTubeVideo",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedVideoYouTubeVideoSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedVideoYouTubeVideoIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedVideoYouTubeVideoSelector",
            "withCondition": "fn(condition: string) -> +ExcludedVideoYouTubeVideoSelector",
            "withLimit": "fn(limit: number) -> +ExcludedVideoYouTubeVideoSelector"
          }
        },
        "ExcludedYouTubeChannel": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getChannelId": "fn() -> string",
            "getId": "fn() -> number",
            "remove": "fn()"
          }
        },
        "ExcludedYouTubeChannelIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedYouTubeChannel",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedYouTubeChannelOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedYouTubeChannel",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedYouTubeChannelSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedYouTubeChannelIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedYouTubeChannelSelector",
            "withCondition": "fn(condition: string) -> +ExcludedYouTubeChannelSelector",
            "withLimit": "fn(limit: number) -> +ExcludedYouTubeChannelSelector"
          }
        },
        "ExcludedYouTubeVideo": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getVideoId": "fn() -> string",
            "remove": "fn()"
          }
        },
        "ExcludedYouTubeVideoIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ExcludedYouTubeVideo",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExcludedYouTubeVideoOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ExcludedYouTubeVideo",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ExcludedYouTubeVideoSelector": {
          "prototype": {
            "get": "fn() -> +ExcludedYouTubeVideoIterator",
            "orderBy": "fn(orderBy: string) -> +ExcludedYouTubeVideoSelector",
            "withCondition": "fn(condition: string) -> +ExcludedYouTubeVideoSelector",
            "withLimit": "fn(limit: number) -> +ExcludedYouTubeVideoSelector"
          }
        },
        "ExecutionInfo": {
          "prototype": {
            "getRemainingCreateQuota": "fn() -> number",
            "getRemainingGetQuota": "fn() -> number",
            "getRemainingTime": "fn() -> number",
            "isPreview": "fn() -> bool"
          }
        },
        "ExpandedTextAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getApprovalStatus": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getDescription": "fn() -> string",
            "getDescription1": "fn() -> string",
            "getDescription2": "fn() -> string",
            "getDisapprovalReasons": "fn() -> [string]",
            "getEntityType": "fn() -> string",
            "getHeadlinePart1": "fn() -> string",
            "getHeadlinePart2": "fn() -> string",
            "getHeadlinePart3": "fn() -> string",
            "getId": "fn() -> number",
            "getPath1": "fn() -> string",
            "getPath2": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "ExpandedTextAdBuilder": {
          "prototype": {
            "build": "fn() -> +AdOperation",
            "withCustomParameters": "fn(customParameters: object) -> +ExpandedTextAdBuilder",
            "withDescription": "fn(description: string) -> +ExpandedTextAdBuilder",
            "withDescription1": "fn(description1: string) -> +ExpandedTextAdBuilder",
            "withDescription2": "fn(description2: string) -> +ExpandedTextAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +ExpandedTextAdBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +ExpandedTextAdBuilder",
            "withHeadlinePart1": "fn(headlinePart1: string) -> +ExpandedTextAdBuilder",
            "withHeadlinePart2": "fn(headlinePart2: string) -> +ExpandedTextAdBuilder",
            "withHeadlinePart3": "fn(headlinePart3: string) -> +ExpandedTextAdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +ExpandedTextAdBuilder",
            "withPath1": "fn(urlPath1: string) -> +ExpandedTextAdBuilder",
            "withPath2": "fn(urlPath2: string) -> +ExpandedTextAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +ExpandedTextAdBuilder"
          }
        },
        "Experiment": {
          "prototype": {
            "finish": "fn()",
            "getBaseCampaign": "fn() -> +Campaign",
            "getDraft": "fn() -> +Draft",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getExperimentCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatus": "fn() -> string",
            "getTrafficSplitPercent": "fn() -> number",
            "graduate": "fn(budget: Budget)",
            "remove": "fn()",
            "setEndDate": "fn(date: object)",
            "setName": "fn(name: string)",
            "setStartDate": "fn(date: object)",
            "startApplying": "fn()"
          }
        },
        "ExperimentBuilder": {
          "prototype": {
            "startBuilding": "fn()",
            "withEndDate": "fn(date: object) -> +ExperimentBuilder",
            "withName": "fn(name: string) -> +ExperimentBuilder",
            "withStartDate": "fn(date: object) -> +ExperimentBuilder",
            "withTrafficSplitPercent": "fn(trafficSplitPercent: number) -> +ExperimentBuilder"
          }
        },
        "ExperimentIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Experiment",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ExperimentSelector": {
          "prototype": {
            "get": "fn() -> +ExperimentIterator",
            "orderBy": "fn(orderBy: string) -> +ExperimentSelector",
            "withCondition": "fn(condition: string) -> +ExperimentSelector",
            "withIds": "fn(ids: [number]) -> +ExperimentSelector",
            "withLimit": "fn(limit: number) -> +ExperimentSelector"
          }
        },
        "ExtensionSchedule": {
          "prototype": {
            "getDayOfWeek": "fn() -> string",
            "getEndHour": "fn() -> number",
            "getEndMinute": "fn() -> number",
            "getStartHour": "fn() -> number",
            "getStartMinute": "fn() -> number"
          }
        },
        "Extensions": {
          "prototype": {
            "callouts": "fn() -> +CalloutSelector",
            "messages": "fn() -> +MessageSelector",
            "mobileApps": "fn() -> +MobileAppSelector",
            "newCalloutBuilder": "fn() -> +CalloutBuilder",
            "newMessageBuilder": "fn() -> +MessageBuilder",
            "newMobileAppBuilder": "fn() -> +MobileAppBuilder",
            "newPhoneNumberBuilder": "fn() -> +PhoneNumberBuilder",
            "newSitelinkBuilder": "fn() -> +SitelinkBuilder",
            "newSnippetBuilder": "fn() -> +SnippetBuilder",
            "phoneNumbers": "fn() -> +PhoneNumberSelector",
            "sitelinks": "fn() -> +SitelinkSelector",
            "snippets": "fn() -> +SnippetSelector"
          }
        },
        "FileUpload": {
          "prototype": {
            "apply": "fn()",
            "forCampaignManagement": "fn() -> +FileUpload",
            "forOfflineConversions": "fn() -> +FileUpload",
            "preview": "fn()",
            "setFileName": "fn(fileName: string) -> +FileUpload"
          }
        },
        "FrequencyCap": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getEventType": "fn() -> string",
            "getLevel": "fn() -> string",
            "getLimit": "fn() -> number",
            "getTimeUnit": "fn() -> string"
          }
        },
        "FrequencyCapBuilder": {
          "prototype": {
            "build": "fn()",
            "withEventType": "fn(eventType: string) -> +FrequencyCapBuilder",
            "withLevel": "fn(level: string) -> +FrequencyCapBuilder",
            "withLimit": "fn(limit: string) -> +FrequencyCapBuilder",
            "withTimeUnit": "fn(timeUnit: string) -> +FrequencyCapBuilder"
          }
        },
        "FrequencyCaps": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getFrequencyCapFor": "fn(eventType: string) -> +FrequencyCap",
            "newFrequencyCapBuilder": "fn() -> +FrequencyCapBuilder",
            "removeFrequencyCapFor": "fn(eventType: string)"
          }
        },
        "GmailImageAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getAdvertiser": "fn() -> string",
            "getApprovalStatus": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getDescription": "fn() -> string",
            "getDisapprovalReasons": "fn() -> [string]",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getImage": "fn() -> +Media",
            "getLogo": "fn() -> +Media",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getSubject": "fn() -> string",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "GmailImageAdBuilder": {
          "prototype": {
            "build": "fn() -> +AdOperation",
            "withAdvertiser": "fn(advertiser: string) -> +GmailImageAdBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +GmailImageAdBuilder",
            "withDescription": "fn(description: string) -> +GmailImageAdBuilder",
            "withDisplayUrl": "fn(displayUrl: string) -> +GmailImageAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +GmailImageAdBuilder",
            "withImage": "fn(image: Media) -> +GmailImageAdBuilder",
            "withLogo": "fn(logo: string) -> +GmailImageAdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +GmailImageAdBuilder",
            "withName": "fn(name: string) -> +GmailImageAdBuilder",
            "withSubject": "fn(subject: string) -> +GmailImageAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +GmailImageAdBuilder"
          }
        },
        "GmailMultiProductAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getAdvertiser": "fn() -> string",
            "getApprovalStatus": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getContent": "fn() -> string",
            "getDescription": "fn() -> string",
            "getDisapprovalReasons": "fn() -> [string]",
            "getEntityType": "fn() -> string",
            "getHeader": "fn() -> +Media",
            "getHeadline": "fn() -> string",
            "getHeadlineColor": "fn() -> string",
            "getId": "fn() -> number",
            "getItemButtonCallsToAction": "fn() -> [string]",
            "getItemButtonColors": "fn() -> [string]",
            "getItemButtonFinalMobileUrls": "fn() -> [string]",
            "getItemButtonFinalUrls": "fn() -> [string]",
            "getItemButtonTextColors": "fn() -> [string]",
            "getItemButtonTrackingTemplates": "fn() -> [string]",
            "getItemImages": "fn() -> [+Media]",
            "getItemTitleColors": "fn() -> [string]",
            "getItemTitles": "fn() -> [string]",
            "getLogo": "fn() -> +Media",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getSubject": "fn() -> string",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "GmailMultiProductAdBuilder": {
          "prototype": {
            "build": "fn() -> +AdOperation",
            "withAdvertiser": "fn(advertiser: string) -> +GmailMultiProductAdBuilder",
            "withContent": "fn(content: string) -> +GmailMultiProductAdBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +GmailMultiProductAdBuilder",
            "withDescription": "fn(description: string) -> +GmailMultiProductAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +GmailMultiProductAdBuilder",
            "withHeader": "fn(header: Media) -> +GmailMultiProductAdBuilder",
            "withHeadline": "fn(headline: string) -> +GmailMultiProductAdBuilder",
            "withHeadlineColor": "fn(headlineColor: string) -> +GmailMultiProductAdBuilder",
            "withItemButtonCallsToAction": "fn(itemCallsToAction: [string]) -> +GmailMultiProductAdBuilder",
            "withItemButtonFinalMobileUrls": "fn(itemButtonFinalMobileUrls: [string]) -> +GmailMultiProductAdBuilder",
            "withItemButtonFinalUrls": "fn(itemButtonFinalUrls: [string]) -> +GmailMultiProductAdBuilder",
            "withItemButtonTrackingTemplates": "fn(itemButtonTrackingTemplates: [string]) -> +GmailMultiProductAdBuilder",
            "withItemImages": "fn(itemImages: [Media]) -> +GmailMultiProductAdBuilder",
            "withItemTitles": "fn(itemTitles: [string]) -> +GmailMultiProductAdBuilder",
            "withLogo": "fn(logo: Media) -> +GmailMultiProductAdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +GmailMultiProductAdBuilder",
            "withName": "fn(name: string) -> +GmailMultiProductAdBuilder",
            "withSubject": "fn(subject: string) -> +GmailMultiProductAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +GmailMultiProductAdBuilder"
          }
        },
        "GmailSinglePromotionAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getAdvertiser": "fn() -> string",
            "getApprovalStatus": "fn() -> string",
            "getCallToAction": "fn() -> string",
            "getCallToActionButtonColor": "fn() -> string",
            "getCallToActionTextColor": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getContent": "fn() -> string",
            "getDescription": "fn() -> string",
            "getDisapprovalReasons": "fn() -> [string]",
            "getEntityType": "fn() -> string",
            "getHeader": "fn() -> +Media",
            "getHeadline": "fn() -> string",
            "getHeadlineColor": "fn() -> string",
            "getId": "fn() -> number",
            "getImage": "fn() -> +Media",
            "getLogo": "fn() -> +Media",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getSubject": "fn() -> string",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "GmailSinglePromotionAdBuilder": {
          "prototype": {
            "build": "fn() -> +AdOperation",
            "withAdvertiser": "fn(advertiser: string) -> +GmailSinglePromotionAdBuilder",
            "withCallToAction": "fn(callToAction: string) -> +GmailSinglePromotionAdBuilder",
            "withCallToActionButtonColor": "fn(callToActionButtonColor: string) -> +GmailSinglePromotionAdBuilder",
            "withCallToActionTextColor": "fn(callToActionTextColor: string) -> +GmailSinglePromotionAdBuilder",
            "withContent": "fn(content: string) -> +GmailSinglePromotionAdBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +GmailSinglePromotionAdBuilder",
            "withDescription": "fn(description: string) -> +GmailSinglePromotionAdBuilder",
            "withDisplayUrl": "fn(displayUrl: string) -> +GmailSinglePromotionAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +GmailSinglePromotionAdBuilder",
            "withHeader": "fn(header: Media) -> +GmailSinglePromotionAdBuilder",
            "withHeadline": "fn(headline: string) -> +GmailSinglePromotionAdBuilder",
            "withHeadlineColor": "fn(headlineColor: string) -> +GmailSinglePromotionAdBuilder",
            "withImage": "fn(image: Media) -> +GmailSinglePromotionAdBuilder",
            "withLogo": "fn(logo: Media) -> +GmailSinglePromotionAdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +GmailSinglePromotionAdBuilder",
            "withName": "fn(name: string) -> +GmailSinglePromotionAdBuilder",
            "withSubject": "fn(subject: string) -> +GmailSinglePromotionAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +GmailSinglePromotionAdBuilder"
          }
        },
        "GoogleAdsDate": {
          "prototype": {
            "day": "number",
            "month": "number",
            "year": "number"
          }
        },
        "Html5Ad": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getApprovalStatus": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getDisapprovalReasons": "fn() -> [string]",
            "getEntityType": "fn() -> string",
            "getEntryPoint": "fn() -> string",
            "getId": "fn() -> number",
            "getMediaBundle": "fn() -> +Media",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "Html5AdBuilder": {
          "prototype": {
            "build": "fn() -> +AdOperation",
            "withCustomParameters": "fn(customParameters: object) -> +Html5AdBuilder",
            "withDisplayUrl": "fn(displayUrl: string) -> +Html5AdBuilder",
            "withEntryPoint": "fn(entryPoint: string) -> +Html5AdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +Html5AdBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +Html5AdBuilder",
            "withMediaBundle": "fn(mediaBundle: Media) -> +Html5AdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +Html5AdBuilder",
            "withName": "fn(name: string) -> +Html5AdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +Html5AdBuilder"
          }
        },
        "ImageAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getApprovalStatus": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getDisapprovalReasons": "fn() -> [string]",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getImage": "fn() -> +Media",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "ImageAdBuilder": {
          "prototype": {
            "build": "fn() -> +AdOperation",
            "withCustomParameters": "fn(customParameters: object) -> +ImageAdBuilder",
            "withDisplayUrl": "fn(displayUrl: string) -> +ImageAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +ImageAdBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +ImageAdBuilder",
            "withImage": "fn(image: Media) -> +ImageAdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +ImageAdBuilder",
            "withName": "fn(name: string) -> +ImageAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +ImageAdBuilder"
          }
        },
        "ImageBuilder": {
          "prototype": {
            "build": "fn() -> +MediaOperation",
            "withData": "fn(data: Blob) -> +ImageBuilder",
            "withName": "fn(name: string) -> +ImageBuilder"
          }
        },
        "InStreamAdBuilder": {
          "prototype": {
            "build": "fn() -> +VideoAdOperation",
            "withActionHeadline": "fn(headline: string) -> +InStreamAdBuilder",
            "withAdName": "fn(adName: string) -> +InStreamAdBuilder",
            "withCallToAction": "fn(callToAction: string) -> +InStreamAdBuilder",
            "withCompanionBanner": "fn(imageMedia: Media) -> +InStreamAdBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +InStreamAdBuilder",
            "withDisplayUrl": "fn(displayUrl: string) -> +InStreamAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +InStreamAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +InStreamAdBuilder",
            "withVideo": "fn(videoMedia: Media) -> +InStreamAdBuilder"
          }
        },
        "Keyword": {
          "prototype": {
            "adParams": "fn() -> +AdParamSelector",
            "applyLabel": "fn(name: string)",
            "bidding": "fn() -> +KeywordBidding",
            "clearDestinationUrl": "fn()",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getApprovalStatus": "fn() -> string",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEntityType": "fn() -> string",
            "getFirstPageCpc": "fn() -> number",
            "getId": "fn() -> number",
            "getMatchType": "fn() -> string",
            "getQualityScore": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getText": "fn() -> string",
            "getTopOfPageCpc": "fn() -> number",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "setAdParam": "fn(index: number, insertionText: string)",
            "urls": "fn() -> +KeywordUrls"
          }
        },
        "KeywordBidding": {
          "prototype": {
            "clearCpc": "fn()",
            "clearCpm": "fn()",
            "getCpc": "fn() -> number",
            "getCpm": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpc": "fn(cpc: number)",
            "setCpm": "fn(cpm: number)"
          }
        },
        "KeywordBuilder": {
          "prototype": {
            "build": "fn() -> +KeywordOperation",
            "withBiddingStrategy": "fn(biddingStrategy: string) -> +KeywordBuilder",
            "withCpc": "fn(cpc: number) -> +KeywordBuilder",
            "withCpm": "fn(cpm: number) -> +KeywordBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +KeywordBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +KeywordBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +KeywordBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +KeywordBuilder",
            "withText": "fn(text: string) -> +KeywordBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +KeywordBuilder"
          }
        },
        "KeywordIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Keyword",
            "totalNumEntities": "fn() -> number"
          }
        },
        "KeywordOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Keyword",
            "isSuccessful": "fn() -> bool"
          }
        },
        "KeywordSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +KeywordSelector",
            "get": "fn() -> +KeywordIterator",
            "orderBy": "fn(orderBy: string) -> +KeywordSelector",
            "withCondition": "fn(condition: string) -> +KeywordSelector",
            "withIds": "fn(ids: [[number]]) -> +KeywordSelector",
            "withLimit": "fn(limit: number) -> +KeywordSelector"
          }
        },
        "KeywordUrls": {
          "prototype": {
            "clearFinalUrl": "fn()",
            "clearFinalUrlSuffix": "fn()",
            "clearMobileFinalUrl": "fn()",
            "clearTrackingTemplate": "fn()",
            "getCustomParameters": "fn() -> object",
            "getFinalUrl": "fn() -> string",
            "getFinalUrlSuffix": "fn() -> string",
            "getMobileFinalUrl": "fn() -> string",
            "getTrackingTemplate": "fn() -> string",
            "setCustomParameters": "fn(customParameters: object)",
            "setFinalUrl": "fn(finalUrl: string)",
            "setFinalUrlSuffix": "fn(suffix: string)",
            "setMobileFinalUrl": "fn(mobileFinalUrl: string)",
            "setTrackingTemplate": "fn(trackingTemplate: string)"
          }
        },
        "Label": {
          "prototype": {
            "adGroups": "fn() -> +AdGroupSelector",
            "ads": "fn() -> +AdSelector",
            "campaigns": "fn() -> +CampaignSelector",
            "getColor": "fn() -> string",
            "getDescription": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> string",
            "getName": "fn() -> string",
            "keywords": "fn() -> +KeywordSelector",
            "remove": "fn()",
            "setColor": "fn(color: string)",
            "setDescription": "fn(description: string)",
            "setName": "fn(name: string)"
          }
        },
        "LabelIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Label",
            "totalNumEntities": "fn() -> number"
          }
        },
        "LabelSelector": {
          "prototype": {
            "get": "fn() -> +LabelIterator",
            "orderBy": "fn(orderBy: string) -> +LabelSelector",
            "withCondition": "fn(condition: string) -> +LabelSelector",
            "withIds": "fn(ids: [number]) -> +LabelSelector",
            "withLimit": "fn(limit: number) -> +LabelSelector"
          }
        },
        "Language": {
          "prototype": {
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getCampaignType": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()"
          }
        },
        "LanguageIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Language",
            "totalNumEntities": "fn() -> number"
          }
        },
        "LanguageOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Language",
            "isSuccessful": "fn() -> bool"
          }
        },
        "LanguageSelector": {
          "prototype": {
            "get": "fn() -> +LanguageIterator",
            "withIds": "fn(ids: [[number]]) -> +LanguageSelector",
            "withLimit": "fn(limit: number) -> +LanguageSelector"
          }
        },
        "Media": {
          "prototype": {
            "getDimensions": "fn() -> +MediaDimensions",
            "getFileSize": "fn() -> number",
            "getId": "fn() -> number",
            "getMimeType": "fn() -> string",
            "getName": "fn() -> string",
            "getReferenceId": "fn() -> string",
            "getSourceUrl": "fn() -> string",
            "getType": "fn() -> string",
            "getUrls": "fn() -> +MediaUrls",
            "getYouTubeVideoId": "fn() -> string"
          }
        },
        "MediaBundleBuilder": {
          "prototype": {
            "build": "fn() -> +MediaOperation",
            "withData": "fn(data: Blob) -> +MediaBundleBuilder",
            "withName": "fn(name: string) -> +MediaBundleBuilder"
          }
        },
        "MediaDimensions": {
          "prototype": {
            "getFullDimensions": "fn() -> +Dimensions",
            "getPreviewDimensions": "fn() -> +Dimensions",
            "getShrunkenDimensions": "fn() -> +Dimensions",
            "getVideoThumbnailDimensions": "fn() -> +Dimensions"
          }
        },
        "MediaIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Media",
            "totalNumEntities": "fn() -> number"
          }
        },
        "MediaOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Media",
            "isSuccessful": "fn() -> bool"
          }
        },
        "MediaSelector": {
          "prototype": {
            "get": "fn() -> +MediaIterator",
            "orderBy": "fn(orderBy: string) -> +MediaSelector",
            "withCondition": "fn(condition: string) -> +MediaSelector",
            "withIds": "fn(ids: [number]) -> +MediaSelector",
            "withLimit": "fn(limit: number) -> +MediaSelector"
          }
        },
        "MediaUrls": {
          "prototype": {
            "getFullUrl": "fn() -> string",
            "getPreviewUrl": "fn() -> string",
            "getShrunkenUrl": "fn() -> string",
            "getVideoThumbnailUrl": "fn() -> string"
          }
        },
        "Message": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getBusinessName": "fn() -> string",
            "getCountryCode": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getExtensionText": "fn() -> string",
            "getId": "fn() -> number",
            "getMessageText": "fn() -> string",
            "getPhoneNumber": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setBusinessName": "fn(businessName: string)",
            "setCountryCode": "fn(countryCode: string)",
            "setEndDate": "fn(date: object)",
            "setExtensionText": "fn(extensionText: string)",
            "setMessageText": "fn(messageText: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setPhoneNumber": "fn(phoneNumber: string)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)"
          }
        },
        "MessageBuilder": {
          "prototype": {
            "build": "fn() -> +MessageOperation",
            "withBusinessName": "fn(businessName: string) -> +MessageBuilder",
            "withCountryCode": "fn(countryCode: string) -> +MessageBuilder",
            "withEndDate": "fn(date: object) -> +MessageBuilder",
            "withExtensionText": "fn(extensionText: string) -> +MessageBuilder",
            "withMessageText": "fn(messageText: string) -> +MessageBuilder",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +MessageBuilder",
            "withPhoneNumber": "fn(phoneNumber: string) -> +MessageBuilder",
            "withSchedules": "fn(schedules: [ExtensionSchedule]) -> +MessageBuilder",
            "withStartDate": "fn(date: object) -> +MessageBuilder"
          }
        },
        "MessageIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Message",
            "totalNumEntities": "fn() -> number"
          }
        },
        "MessageOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Message",
            "isSuccessful": "fn() -> bool"
          }
        },
        "MessageSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +MessageSelector",
            "get": "fn() -> +MessageIterator",
            "orderBy": "fn(orderBy: string) -> +MessageSelector",
            "withCondition": "fn(condition: string) -> +MessageSelector",
            "withIds": "fn(ids: [number]) -> +MessageSelector",
            "withLimit": "fn(limit: number) -> +MessageSelector"
          }
        },
        "MobileApp": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearLinkUrl": "fn()",
            "clearStartDate": "fn()",
            "getAppId": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLinkText": "fn() -> string",
            "getLinkUrl": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getStore": "fn() -> string",
            "isMobilePreferred": "fn() -> bool",
            "setAppId": "fn(appId: string)",
            "setEndDate": "fn(date: object)",
            "setLinkText": "fn(linkText: string)",
            "setLinkUrl": "fn(linkUrl: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setStore": "fn(store: string)",
            "urls": "fn() -> +MobileAppUrls"
          }
        },
        "MobileAppBuilder": {
          "prototype": {
            "build": "fn() -> +MobileAppOperation",
            "withAppId": "fn(appId: string) -> +MobileAppBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +MobileAppBuilder",
            "withEndDate": "fn(date: object) -> +MobileAppBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +MobileAppBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +MobileAppBuilder",
            "withLinkText": "fn(linkText: string) -> +MobileAppBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +MobileAppBuilder",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +MobileAppBuilder",
            "withSchedules": "fn(schedules: [ExtensionSchedule]) -> +MobileAppBuilder",
            "withStartDate": "fn(date: object) -> +MobileAppBuilder",
            "withStore": "fn(store: string) -> +MobileAppBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +MobileAppBuilder"
          }
        },
        "MobileAppIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +MobileApp",
            "totalNumEntities": "fn() -> number"
          }
        },
        "MobileAppOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +MobileApp",
            "isSuccessful": "fn() -> bool"
          }
        },
        "MobileAppSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +MobileAppSelector",
            "get": "fn() -> +MobileAppIterator",
            "orderBy": "fn(orderBy: string) -> +MobileAppSelector",
            "withCondition": "fn(condition: string) -> +MobileAppSelector",
            "withIds": "fn(ids: [number]) -> +MobileAppSelector",
            "withLimit": "fn(limit: number) -> +MobileAppSelector"
          }
        },
        "MobileAppUrls": {
          "prototype": {
            "clearFinalUrlSuffix": "fn()",
            "clearMobileFinalUrl": "fn()",
            "getCustomParameters": "fn() -> object",
            "getFinalUrl": "fn() -> string",
            "getFinalUrlSuffix": "fn() -> string",
            "getMobileFinalUrl": "fn() -> string",
            "getTrackingTemplate": "fn() -> string",
            "setCustomParameters": "fn(customParameters: object)",
            "setFinalUrl": "fn(finalUrl: string)",
            "setFinalUrlSuffix": "fn(suffix: string)",
            "setMobileFinalUrl": "fn(mobileFinalUrl: string)",
            "setTrackingTemplate": "fn(trackingTemplate: string)"
          }
        },
        "NegativeKeyword": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getEntityType": "fn() -> string",
            "getMatchType": "fn() -> string",
            "getText": "fn() -> string",
            "remove": "fn()"
          }
        },
        "NegativeKeywordIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +NegativeKeyword",
            "totalNumEntities": "fn() -> number"
          }
        },
        "NegativeKeywordList": {
          "prototype": {
            "addNegativeKeyword": "fn(keywordText: string)",
            "addNegativeKeywords": "fn(keywordTexts: [string])",
            "campaigns": "fn() -> +CampaignSelector",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "negativeKeywords": "fn() -> +SharedNegativeKeywordSelector",
            "setName": "fn(name: string)"
          }
        },
        "NegativeKeywordListBuilder": {
          "prototype": {
            "build": "fn() -> +NegativeKeywordListOperation",
            "withName": "fn(name: string) -> +NegativeKeywordListBuilder"
          }
        },
        "NegativeKeywordListIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +NegativeKeywordList",
            "totalNumEntities": "fn() -> number"
          }
        },
        "NegativeKeywordListOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +NegativeKeywordList",
            "isSuccessful": "fn() -> bool"
          }
        },
        "NegativeKeywordListSelector": {
          "prototype": {
            "get": "fn() -> +NegativeKeywordListIterator",
            "orderBy": "fn(orderBy: string) -> +NegativeKeywordListSelector",
            "withCondition": "fn(condition: string) -> +NegativeKeywordListSelector",
            "withIds": "fn(ids: [number]) -> +NegativeKeywordListSelector",
            "withLimit": "fn(limit: number) -> +NegativeKeywordListSelector"
          }
        },
        "NegativeKeywordSelector": {
          "prototype": {
            "get": "fn() -> +NegativeKeywordIterator",
            "orderBy": "fn(orderBy: string) -> +NegativeKeywordSelector",
            "withCondition": "fn(condition: string) -> +NegativeKeywordSelector",
            "withLimit": "fn(limit: number) -> +NegativeKeywordSelector"
          }
        },
        "NonSkippableAdBuilder": {
          "prototype": {
            "build": "fn() -> +VideoAdOperation",
            "withAdName": "fn(adName: string) -> +NonSkippableAdBuilder",
            "withCompanionBanner": "fn(imageMedia: Media) -> +NonSkippableAdBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +NonSkippableAdBuilder",
            "withDisplayUrl": "fn(displayUrl: string) -> +NonSkippableAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +NonSkippableAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +NonSkippableAdBuilder",
            "withVideo": "fn(videoMedia: Media) -> +NonSkippableAdBuilder"
          }
        },
        "PhoneNumber": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getCountry": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getPhoneNumber": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isCallOnly": "fn() -> bool",
            "isMobilePreferred": "fn() -> bool",
            "setCallOnly": "fn(callOnly: bool)",
            "setCountry": "fn(country: string)",
            "setEndDate": "fn(date: object)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setPhoneNumber": "fn(phoneNumber: string)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)"
          }
        },
        "PhoneNumberBuilder": {
          "prototype": {
            "build": "fn() -> +PhoneNumberOperation",
            "withCallOnly": "fn(callOnly: bool) -> +PhoneNumberBuilder",
            "withCountry": "fn(country: string) -> +PhoneNumberBuilder",
            "withEndDate": "fn(date: object) -> +PhoneNumberBuilder",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +PhoneNumberBuilder",
            "withPhoneNumber": "fn(phoneNumber: string) -> +PhoneNumberBuilder",
            "withSchedules": "fn(schedules: [ExtensionSchedule]) -> +PhoneNumberBuilder",
            "withStartDate": "fn(date: object) -> +PhoneNumberBuilder"
          }
        },
        "PhoneNumberIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +PhoneNumber",
            "totalNumEntities": "fn() -> number"
          }
        },
        "PhoneNumberOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +PhoneNumber",
            "isSuccessful": "fn() -> bool"
          }
        },
        "PhoneNumberSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +PhoneNumberSelector",
            "get": "fn() -> +PhoneNumberIterator",
            "orderBy": "fn(orderBy: string) -> +PhoneNumberSelector",
            "withCondition": "fn(condition: string) -> +PhoneNumberSelector",
            "withIds": "fn(ids: [number]) -> +PhoneNumberSelector",
            "withLimit": "fn(limit: number) -> +PhoneNumberSelector"
          }
        },
        "Placement": {
          "prototype": {
            "bidding": "fn() -> +PlacementBidding",
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getUrl": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isManaged": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "PlacementBidding": {
          "prototype": {
            "clearCpc": "fn()",
            "clearCpm": "fn()",
            "clearStrategy": "fn()",
            "getCpc": "fn() -> number",
            "getCpm": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpc": "fn(cpc: number)",
            "setCpm": "fn(cpm: number)",
            "setStrategy": "fn(biddingStrategy: string)"
          }
        },
        "PlacementBuilder": {
          "prototype": {
            "build": "fn() -> +PlacementOperation",
            "exclude": "fn() -> +ExcludedPlacementOperation",
            "withCpc": "fn(cpc: number) -> +PlacementBuilder",
            "withCpm": "fn(cpm: number) -> +PlacementBuilder",
            "withUrl": "fn(url: string) -> +PlacementBuilder"
          }
        },
        "PlacementIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Placement",
            "totalNumEntities": "fn() -> number"
          }
        },
        "PlacementOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Placement",
            "isSuccessful": "fn() -> bool"
          }
        },
        "PlacementSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +PlacementSelector",
            "get": "fn() -> +PlacementIterator",
            "orderBy": "fn(orderBy: string) -> +PlacementSelector",
            "withCondition": "fn(condition: string) -> +PlacementSelector",
            "withIds": "fn(ids: [[number]]) -> +PlacementSelector",
            "withLimit": "fn(limit: number) -> +PlacementSelector"
          }
        },
        "Platform": {
          "prototype": {
            "getBaseCampaign": "fn() -> +Campaign",
            "getBidModifier": "fn() -> number",
            "getCampaign": "fn() -> +Campaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "PlatformIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Platform",
            "totalNumEntities": "fn() -> number"
          }
        },
        "PlatformSelector": {
          "prototype": {
            "desktop": "fn() -> +PlatformSelector",
            "forDateRange": "fn(dateRange: string) -> +PlatformSelector",
            "get": "fn() -> +PlatformIterator",
            "mobile": "fn() -> +PlatformSelector",
            "orderBy": "fn(orderBy: string) -> +PlatformSelector",
            "tablet": "fn() -> +PlatformSelector",
            "withCondition": "fn(condition: string) -> +PlatformSelector",
            "withIds": "fn(ids: [[number]]) -> +PlatformSelector",
            "withLimit": "fn(limit: number) -> +PlatformSelector"
          }
        },
        "PolicyTopic": {
          "prototype": {
            "getId": "fn() -> string",
            "getName": "fn() -> string",
            "getType": "fn() -> string"
          }
        },
        "ProductAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "enable": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isMobilePreferred": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)"
          }
        },
        "ProductAdBuilder": {
          "prototype": {
            "build": "fn() -> +ProductAdOperation",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +ProductAdBuilder"
          }
        },
        "ProductAdIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ProductAd",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ProductAdOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductAd",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductAdSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ProductAdSelector",
            "get": "fn() -> +ProductAdIterator",
            "orderBy": "fn(orderBy: string) -> +ProductAdSelector",
            "withCondition": "fn(condition: string) -> +ProductAdSelector",
            "withIds": "fn(ids: [[number]]) -> +ProductAdSelector",
            "withLimit": "fn(limit: number) -> +ProductAdSelector"
          }
        },
        "ProductBrand": {
          "prototype": {
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductBrandBuilder": {
          "prototype": {
            "build": "fn() -> +ProductBrandOperation",
            "withBid": "fn(bid: number) -> +ProductBrandBuilder",
            "withName": "fn(productBrandName: string) -> +ProductBrandBuilder",
            "withValue": "fn(value: string) -> +ProductBrandBuilder"
          }
        },
        "ProductBrandOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductBrand",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductCategory": {
          "prototype": {
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getCountry": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductCategoryBuilder": {
          "prototype": {
            "build": "fn() -> +ProductCategoryOperation",
            "withBid": "fn(bid: number) -> +ProductCategoryBuilder",
            "withName": "fn(productCategoryName: string) -> +ProductCategoryBuilder",
            "withValue": "fn(value: string) -> +ProductCategoryBuilder"
          }
        },
        "ProductCategoryOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductCategory",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductChannel": {
          "prototype": {
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getChannel": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductChannelBuilder": {
          "prototype": {
            "build": "fn() -> +ProductChannelOperation",
            "withBid": "fn(bid: number) -> +ProductChannelBuilder",
            "withChannel": "fn(channel: string) -> +ProductChannelBuilder",
            "withValue": "fn(value: string) -> +ProductChannelBuilder"
          }
        },
        "ProductChannelExclusivity": {
          "prototype": {
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getChannelExclusivity": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductChannelExclusivityBuilder": {
          "prototype": {
            "build": "fn() -> +ProductChannelExclusivityOperation",
            "withBid": "fn(bid: number) -> +ProductChannelExclusivityBuilder",
            "withChannelExclusivity": "fn(channelExclusivity: string) -> +ProductChannelExclusivityBuilder",
            "withValue": "fn(value: string) -> +ProductChannelExclusivityBuilder"
          }
        },
        "ProductChannelExclusivityOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductChannelExclusivity",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductChannelOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductChannel",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductCondition": {
          "prototype": {
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getCondition": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductConditionBuilder": {
          "prototype": {
            "build": "fn() -> +ProductConditionOperation",
            "withBid": "fn(bid: number) -> +ProductConditionBuilder",
            "withCondition": "fn(condition: string) -> +ProductConditionBuilder",
            "withValue": "fn(value: string) -> +ProductConditionBuilder"
          }
        },
        "ProductConditionOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductCondition",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductCustomLabel": {
          "prototype": {
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductCustomLabelBuilder": {
          "prototype": {
            "build": "fn() -> +ProductCustomLabelOperation",
            "withBid": "fn(bid: number) -> +ProductCustomLabelBuilder",
            "withType": "fn(type: string) -> +ProductCustomLabelBuilder",
            "withValue": "fn(value: string) -> +ProductCustomLabelBuilder"
          }
        },
        "ProductCustomLabelOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductCustomLabel",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductGroup": {
          "prototype": {
            "asBrand": "fn() -> +ProductBrand",
            "asCategory": "fn() -> +ProductCategory",
            "asChannel": "fn() -> +ProductChannel",
            "asChannelExclusivity": "fn() -> +ProductChannelExclusivity",
            "asCondition": "fn() -> +ProductCondition",
            "asCustomLabel": "fn() -> +ProductCustomLabel",
            "asItemId": "fn() -> +ProductItemId",
            "asProductType": "fn() -> +ProductType",
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getDimension": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductGroupBuilderSpace": {
          "prototype": {
            "brandBuilder": "fn() -> +ProductBrandBuilder",
            "categoryBuilder": "fn() -> +ProductCategoryBuilder",
            "channelBuilder": "fn() -> +ProductChannelBuilder",
            "channelExclusivityBuilder": "fn() -> +ProductChannelExclusivityBuilder",
            "conditionBuilder": "fn() -> +ProductConditionBuilder",
            "customLabelBuilder": "fn() -> +ProductCustomLabelBuilder",
            "itemIdBuilder": "fn() -> +ProductItemIdBuilder",
            "productTypeBuilder": "fn() -> +ProductTypeBuilder"
          }
        },
        "ProductGroupIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ProductGroup",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ProductGroupOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductGroup",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductGroupSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ProductGroupSelector",
            "get": "fn() -> +ProductGroupIterator",
            "orderBy": "fn(orderBy: string) -> +ProductGroupSelector",
            "withCondition": "fn(condition: string) -> +ProductGroupSelector",
            "withIds": "fn(ids: [number]) -> +ProductGroupSelector",
            "withLimit": "fn(limit: number) -> +ProductGroupSelector"
          }
        },
        "ProductItemId": {
          "prototype": {
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductItemIdBuilder": {
          "prototype": {
            "build": "fn() -> +ProductItemIdOperation",
            "withBid": "fn(bid: number) -> +ProductItemIdBuilder",
            "withValue": "fn(value: string) -> +ProductItemIdBuilder"
          }
        },
        "ProductItemIdOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductItemId",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ProductType": {
          "prototype": {
            "children": "fn() -> +ProductGroupSelector",
            "exclude": "fn()",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMaxCpc": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "getValue": "fn() -> string",
            "include": "fn()",
            "isExcluded": "fn() -> bool",
            "isOtherCase": "fn() -> bool",
            "newChild": "fn() -> +ProductGroupBuilderSpace",
            "parent": "fn() -> +ProductGroup",
            "remove": "fn()",
            "removeAllChildren": "fn()",
            "setMaxCpc": "fn(maxCpc: number)"
          }
        },
        "ProductTypeBuilder": {
          "prototype": {
            "build": "fn() -> +ProductTypeOperation",
            "withBid": "fn(bid: number) -> +ProductTypeBuilder",
            "withValue": "fn(value: string) -> +ProductTypeBuilder"
          }
        },
        "ProductTypeOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ProductType",
            "isSuccessful": "fn() -> bool"
          }
        },
        "Report": {
          "prototype": {
            "exportToSheet": "fn(sheet: Sheet)",
            "getColumnHeader": "fn(awqlColumnName: string) -> +ReportColumnHeader",
            "rows": "fn() -> +ReportRowIterator"
          }
        },
        "ReportColumnHeader": {
          "prototype": {
            "getBulkUploadColumnName": "fn() -> string",
            "getReportColumnName": "fn() -> string"
          }
        },
        "ReportRow": {
          "prototype": {
            "formatForUpload": "fn() -> object"
          }
        },
        "ReportRowIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ReportRow"
          }
        },
        "ResponsiveDisplayAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getApprovalStatus": "fn() -> string",
            "getBusinessName": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getDescription": "fn() -> string",
            "getDisapprovalReasons": "fn() -> [string]",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLogoImage": "fn() -> +Media",
            "getLongHeadline": "fn() -> string",
            "getMarketingImage": "fn() -> +Media",
            "getShortHeadline": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "ResponsiveDisplayAdBuilder": {
          "prototype": {
            "build": "fn() -> +AdOperation",
            "withBusinessName": "fn(businessName: string) -> +ResponsiveDisplayAdBuilder",
            "withCustomParameters": "fn(customParameters: object) -> +ResponsiveDisplayAdBuilder",
            "withDescription": "fn(description: string) -> +ResponsiveDisplayAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +ResponsiveDisplayAdBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +ResponsiveDisplayAdBuilder",
            "withLogoImage": "fn(logoImage: Media) -> +ResponsiveDisplayAdBuilder",
            "withLongHeadline": "fn(longHeadline: string) -> +ResponsiveDisplayAdBuilder",
            "withMarketingImage": "fn(marketingImage: Media) -> +ResponsiveDisplayAdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +ResponsiveDisplayAdBuilder",
            "withShortHeadline": "fn(shortHeadline: string) -> +ResponsiveDisplayAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +ResponsiveDisplayAdBuilder"
          }
        },
        "ResponsiveSearchAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "asType": "fn() -> +AdViewSpace",
            "enable": "fn()",
            "getAdGroup": "fn() -> +AdGroup",
            "getApprovalStatus": "fn() -> string",
            "getCampaign": "fn() -> +Campaign",
            "getDescriptions": "fn() -> [+Asset]",
            "getDisapprovalReasons": "fn() -> [string]",
            "getEntityType": "fn() -> string",
            "getHeadlines": "fn() -> [+Asset]",
            "getId": "fn() -> number",
            "getPath1": "fn() -> string",
            "getPath2": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +AdUrls"
          }
        },
        "ResponsiveSearchAdBuilder": {
          "prototype": {
            "addDescription": "fn(description: string, pinning: string) -> +ResponsiveSearchAdBuilder",
            "addHeadline": "fn(headline: string, pinning: string) -> +ResponsiveSearchAdBuilder",
            "build": "fn() -> +AdOperation",
            "withCustomParameters": "fn(customParameters: object) -> +ResponsiveSearchAdBuilder",
            "withDescriptions": "fn(descriptions: [object]) -> +ResponsiveSearchAdBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +ResponsiveSearchAdBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +ResponsiveSearchAdBuilder",
            "withHeadlines": "fn(headlines: [object]) -> +ResponsiveSearchAdBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +ResponsiveSearchAdBuilder",
            "withPath1": "fn(urlPath1: string) -> +ResponsiveSearchAdBuilder",
            "withPath2": "fn(urlPath2: string) -> +ResponsiveSearchAdBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +ResponsiveSearchAdBuilder"
          }
        },
        "SearchAdGroupAudience": {
          "prototype": {
            "bidding": "fn() -> +SearchAudienceBidding",
            "getAdGroup": "fn() -> +AdGroup",
            "getAudienceId": "fn() -> number",
            "getAudienceType": "fn() -> string",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "SearchAdGroupAudienceBuilder": {
          "prototype": {
            "build": "fn() -> +SearchAdGroupAudienceOperation",
            "exclude": "fn() -> +SearchAdGroupExcludedAudienceOperation",
            "withAudience": "fn(userList: UserList) -> +SearchAdGroupAudienceBuilder",
            "withAudienceId": "fn(audienceId: number) -> +SearchAdGroupAudienceBuilder",
            "withBidModifier": "fn(modifier: number) -> +SearchAdGroupAudienceBuilder"
          }
        },
        "SearchAdGroupAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +SearchAdGroupAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "SearchAdGroupAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +SearchAdGroupAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "SearchAdGroupAudienceSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +SearchAdGroupAudienceSelector",
            "get": "fn() -> +SearchAdGroupAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +SearchAdGroupAudienceSelector",
            "withCondition": "fn(condition: string) -> +SearchAdGroupAudienceSelector",
            "withIds": "fn(ids: [[number]]) -> +SearchAdGroupAudienceSelector",
            "withLimit": "fn(limit: number) -> +SearchAdGroupAudienceSelector"
          }
        },
        "SearchAdGroupExcludedAudience": {
          "prototype": {
            "getAdGroup": "fn() -> +AdGroup",
            "getAudienceId": "fn() -> number",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "remove": "fn()"
          }
        },
        "SearchAdGroupExcludedAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +SearchAdGroupExcludedAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "SearchAdGroupExcludedAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +SearchAdGroupExcludedAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "SearchAdGroupExcludedAudienceSelector": {
          "prototype": {
            "get": "fn() -> +SearchAdGroupExcludedAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +SearchAdGroupExcludedAudienceSelector",
            "withCondition": "fn(condition: string) -> +SearchAdGroupExcludedAudienceSelector",
            "withLimit": "fn(limit: number) -> +SearchAdGroupExcludedAudienceSelector"
          }
        },
        "SearchAudienceBidding": {
          "prototype": {
            "clearBidModifier": "fn()",
            "getBidModifier": "fn() -> number",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "SearchCampaignAudience": {
          "prototype": {
            "bidding": "fn() -> +SearchAudienceBidding",
            "getAudienceId": "fn() -> number",
            "getAudienceType": "fn() -> string",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "SearchCampaignAudienceBuilder": {
          "prototype": {
            "build": "fn() -> +SearchCampaignAudienceOperation",
            "exclude": "fn() -> +SearchCampaignExcludedAudienceOperation",
            "withAudience": "fn(userList: UserList) -> +SearchCampaignAudienceBuilder",
            "withAudienceId": "fn(audienceId: number) -> +SearchCampaignAudienceBuilder",
            "withBidModifier": "fn(modifier: number) -> +SearchCampaignAudienceBuilder"
          }
        },
        "SearchCampaignAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +SearchCampaignAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "SearchCampaignAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +SearchCampaignAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "SearchCampaignAudienceSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +SearchCampaignAudienceSelector",
            "get": "fn() -> +SearchCampaignAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +SearchCampaignAudienceSelector",
            "withCondition": "fn(condition: string) -> +SearchCampaignAudienceSelector",
            "withIds": "fn(ids: [number]) -> +SearchCampaignAudienceSelector",
            "withLimit": "fn(limit: number) -> +SearchCampaignAudienceSelector"
          }
        },
        "SearchCampaignExcludedAudience": {
          "prototype": {
            "getAudienceId": "fn() -> number",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "remove": "fn()"
          }
        },
        "SearchCampaignExcludedAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +SearchCampaignExcludedAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "SearchCampaignExcludedAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +SearchCampaignExcludedAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "SearchCampaignExcludedAudienceSelector": {
          "prototype": {
            "get": "fn() -> +SearchCampaignExcludedAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +SearchCampaignExcludedAudienceSelector",
            "withCondition": "fn(condition: string) -> +SearchCampaignExcludedAudienceSelector",
            "withLimit": "fn(limit: number) -> +SearchCampaignExcludedAudienceSelector"
          }
        },
        "SharedExcludedPlacement": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getExcludedPlacementList": "fn() -> +ExcludedPlacementList",
            "getUrl": "fn() -> string",
            "remove": "fn()"
          }
        },
        "SharedExcludedPlacementIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +SharedExcludedPlacement",
            "totalNumEntities": "fn() -> number"
          }
        },
        "SharedExcludedPlacementSelector": {
          "prototype": {
            "get": "fn() -> +SharedExcludedPlacementIterator",
            "orderBy": "fn(orderBy: string) -> +SharedExcludedPlacementSelector",
            "withCondition": "fn(condition: string) -> +SharedExcludedPlacementSelector",
            "withLimit": "fn(limit: number) -> +SharedExcludedPlacementSelector"
          }
        },
        "SharedNegativeKeyword": {
          "prototype": {
            "getEntityType": "fn() -> string",
            "getMatchType": "fn() -> string",
            "getNegativeKeywordList": "fn() -> +NegativeKeywordList",
            "getText": "fn() -> string",
            "remove": "fn()"
          }
        },
        "SharedNegativeKeywordIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +SharedNegativeKeyword",
            "totalNumEntities": "fn() -> number"
          }
        },
        "SharedNegativeKeywordSelector": {
          "prototype": {
            "get": "fn() -> +SharedNegativeKeywordIterator",
            "orderBy": "fn(orderBy: string) -> +SharedNegativeKeywordSelector",
            "withCondition": "fn(condition: string) -> +SharedNegativeKeywordSelector",
            "withLimit": "fn(limit: number) -> +SharedNegativeKeywordSelector"
          }
        },
        "ShoppingAdGroup": {
          "prototype": {
            "ads": "fn() -> +ProductAdSelector",
            "applyLabel": "fn(name: string)",
            "bidding": "fn() -> +ShoppingAdGroupBidding",
            "createNegativeKeyword": "fn(keywordText: string)",
            "createRootProductGroup": "fn() -> +ProductGroupOperation",
            "devices": "fn() -> +AdGroupDevices",
            "enable": "fn()",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMobileBidModifier": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "isRemoved": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "newAdBuilder": "fn() -> +ProductAdBuilder",
            "pause": "fn()",
            "productGroups": "fn() -> +ProductGroupSelector",
            "removeLabel": "fn(name: string)",
            "rootProductGroup": "fn() -> +ProductGroup",
            "setMobileBidModifier": "fn(modifier: number)",
            "setName": "fn(name: string)",
            "targeting": "fn() -> +ShoppingAdGroupTargeting"
          }
        },
        "ShoppingAdGroupAudience": {
          "prototype": {
            "bidding": "fn() -> +ShoppingAudienceBidding",
            "getAdGroup": "fn() -> +ShoppingAdGroup",
            "getAudienceId": "fn() -> number",
            "getAudienceType": "fn() -> string",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "ShoppingAdGroupAudienceBuilder": {
          "prototype": {
            "build": "fn() -> +ShoppingAdGroupAudienceOperation",
            "withAudienceId": "fn(audienceId: number) -> +ShoppingAdGroupAudienceBuilder",
            "withBidModifier": "fn(modifier: number) -> +ShoppingAdGroupAudienceBuilder"
          }
        },
        "ShoppingAdGroupAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingAdGroupAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingAdGroupAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ShoppingAdGroupAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ShoppingAdGroupAudienceSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ShoppingAdGroupAudienceSelector",
            "get": "fn() -> +ShoppingAdGroupAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +ShoppingAdGroupAudienceSelector",
            "withCondition": "fn(condition: string) -> +ShoppingAdGroupAudienceSelector",
            "withIds": "fn(ids: [[number]]) -> +ShoppingAdGroupAudienceSelector",
            "withLimit": "fn(limit: number) -> +ShoppingAdGroupAudienceSelector"
          }
        },
        "ShoppingAdGroupBidding": {
          "prototype": {
            "clearStrategy": "fn()",
            "getCpc": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpc": "fn(cpc: number)",
            "setStrategy": "fn(biddingStrategy: string)"
          }
        },
        "ShoppingAdGroupBuilder": {
          "prototype": {
            "build": "fn() -> +ShoppingAdGroupOperation",
            "withBiddingStrategy": "fn(biddingStrategy: string) -> +ShoppingAdGroupBuilder",
            "withCpc": "fn(cpc: number) -> +ShoppingAdGroupBuilder",
            "withName": "fn(name: string) -> +ShoppingAdGroupBuilder",
            "withStatus": "fn(status: string) -> +ShoppingAdGroupBuilder"
          }
        },
        "ShoppingAdGroupIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingAdGroup",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingAdGroupOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ShoppingAdGroup",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ShoppingAdGroupSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ShoppingAdGroupSelector",
            "get": "fn() -> +ShoppingAdGroupIterator",
            "orderBy": "fn(orderBy: string) -> +ShoppingAdGroupSelector",
            "withCondition": "fn(condition: string) -> +ShoppingAdGroupSelector",
            "withIds": "fn(ids: [number]) -> +ShoppingAdGroupSelector",
            "withLimit": "fn(limit: number) -> +ShoppingAdGroupSelector"
          }
        },
        "ShoppingAdGroupTargeting": {
          "prototype": {
            "audiences": "fn() -> +ShoppingAdGroupAudienceSelector",
            "getTargetingSetting": "fn(criterionTypeGroup: string) -> string",
            "newUserListBuilder": "fn() -> +ShoppingAdGroupAudienceBuilder",
            "setTargetingSetting": "fn(criterionTypeGroup: string, targetingSetting: string)"
          }
        },
        "ShoppingAdSchedule": {
          "prototype": {
            "getBidModifier": "fn() -> number",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getDayOfWeek": "fn() -> string",
            "getEndHour": "fn() -> number",
            "getEndMinute": "fn() -> number",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStartHour": "fn() -> number",
            "getStartMinute": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "remove": "fn()",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "ShoppingAdScheduleIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingAdSchedule",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingAdScheduleSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ShoppingAdScheduleSelector",
            "get": "fn() -> +ShoppingAdScheduleIterator",
            "orderBy": "fn(orderBy: string) -> +ShoppingAdScheduleSelector",
            "withCondition": "fn(condition: string) -> +ShoppingAdScheduleSelector",
            "withIds": "fn(ids: [[number]]) -> +ShoppingAdScheduleSelector",
            "withLimit": "fn(limit: number) -> +ShoppingAdScheduleSelector"
          }
        },
        "ShoppingAudienceBidding": {
          "prototype": {
            "clearBidModifier": "fn()",
            "getBidModifier": "fn() -> number",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "ShoppingCampaign": {
          "prototype": {
            "adGroups": "fn() -> +ShoppingAdGroupSelector",
            "addAdSchedule": "fn(dayOfWeek: string, startHour: number, startMinute: number, endHour: number, endMinute: number, bidModifier: number) -> +AdScheduleOperation",
            "addLocation": "fn(locationId: number, bidModifier: number) -> +TargetedLocationOperation",
            "addNegativeKeywordList": "fn(negativeKeywordList: NegativeKeywordList)",
            "addProximity": "fn(latitude: number, longitude: number, radius: number, radiusUnits: string, optArgs: object) -> +TargetedProximityOperation",
            "ads": "fn() -> +ProductAdSelector",
            "applyLabel": "fn(name: string)",
            "bidding": "fn() -> +ShoppingCampaignBidding",
            "createNegativeKeyword": "fn(keywordText: string)",
            "enable": "fn()",
            "excludeLocation": "fn(locationId: number) -> +ExcludedLocationOperation",
            "getAdRotationType": "fn() -> string",
            "getBiddingStrategyType": "fn() -> string",
            "getBudget": "fn() -> +Budget",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isDeleted": "fn() -> bool",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "negativeKeywordLists": "fn() -> +NegativeKeywordListSelector",
            "negativeKeywords": "fn() -> +NegativeKeywordSelector",
            "newAdGroupBuilder": "fn() -> +ShoppingAdGroupBuilder",
            "pause": "fn()",
            "productGroups": "fn() -> +ProductGroupSelector",
            "removeLabel": "fn(name: string)",
            "removeNegativeKeywordList": "fn(negativeKeywordList: NegativeKeywordList)",
            "setAdRotationType": "fn(adRotationType: string)",
            "setEndDate": "fn(date: object)",
            "setName": "fn(name: string)",
            "setStartDate": "fn(date: object)",
            "targeting": "fn() -> +ShoppingCampaignTargeting",
            "urls": "fn() -> +ShoppingCampaignUrls"
          }
        },
        "ShoppingCampaignAudience": {
          "prototype": {
            "bidding": "fn() -> +ShoppingAudienceBidding",
            "getAudienceId": "fn() -> number",
            "getAudienceType": "fn() -> string",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "ShoppingCampaignAudienceBuilder": {
          "prototype": {
            "build": "fn() -> +ShoppingCampaignAudienceOperation",
            "withAudienceId": "fn(audienceId: number) -> +ShoppingCampaignAudienceBuilder",
            "withBidModifier": "fn(modifier: number) -> +ShoppingCampaignAudienceBuilder"
          }
        },
        "ShoppingCampaignAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingCampaignAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingCampaignAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +ShoppingCampaignAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "ShoppingCampaignAudienceSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ShoppingCampaignAudienceSelector",
            "get": "fn() -> +ShoppingCampaignAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +ShoppingCampaignAudienceSelector",
            "withCondition": "fn(condition: string) -> +ShoppingCampaignAudienceSelector",
            "withIds": "fn(ids: [[number]]) -> +ShoppingCampaignAudienceSelector",
            "withLimit": "fn(limit: number) -> +ShoppingCampaignAudienceSelector"
          }
        },
        "ShoppingCampaignBidding": {
          "prototype": {
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setStrategy": "fn(biddingStrategy: string)"
          }
        },
        "ShoppingCampaignIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingCampaign",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingCampaignSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ShoppingCampaignSelector",
            "get": "fn() -> +ShoppingCampaignIterator",
            "orderBy": "fn(orderBy: string) -> +ShoppingCampaignSelector",
            "withCondition": "fn(condition: string) -> +ShoppingCampaignSelector",
            "withIds": "fn(ids: [number]) -> +ShoppingCampaignSelector",
            "withLimit": "fn(limit: number) -> +ShoppingCampaignSelector"
          }
        },
        "ShoppingCampaignTargeting": {
          "prototype": {
            "adSchedules": "fn() -> +ShoppingAdScheduleSelector",
            "audiences": "fn() -> +ShoppingCampaignAudienceSelector",
            "excludedLocations": "fn() -> +ShoppingExcludedLocationSelector",
            "getTargetingSetting": "fn(criterionTypeGroup: string) -> string",
            "newUserListBuilder": "fn() -> +ShoppingCampaignAudienceBuilder",
            "platforms": "fn() -> +ShoppingPlatformSelector",
            "setTargetingSetting": "fn(criterionTypeGroup: string, targetingSetting: string)",
            "targetedLocations": "fn() -> +ShoppingTargetedLocationSelector",
            "targetedProximities": "fn() -> +ShoppingTargetedProximitySelector"
          }
        },
        "ShoppingCampaignUrls": {
          "prototype": {
            "clearFinalUrlSuffix": "fn()",
            "clearTrackingTemplate": "fn()",
            "getCustomParameters": "fn() -> object",
            "getFinalUrlSuffix": "fn() -> string",
            "getTrackingTemplate": "fn() -> string",
            "setCustomParameters": "fn(customParameters: object)",
            "setFinalUrlSuffix": "fn(suffix: string)",
            "setTrackingTemplate": "fn(trackingTemplate: string)"
          }
        },
        "ShoppingExcludedLocation": {
          "prototype": {
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getCountryCode": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getTargetType": "fn() -> string",
            "getTargetingStatus": "fn() -> string",
            "remove": "fn()"
          }
        },
        "ShoppingExcludedLocationIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingExcludedLocation",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingExcludedLocationSelector": {
          "prototype": {
            "get": "fn() -> +ShoppingExcludedLocationIterator",
            "withLimit": "fn(limit: number) -> +ShoppingExcludedLocationSelector"
          }
        },
        "ShoppingPlatform": {
          "prototype": {
            "getBidModifier": "fn() -> number",
            "getCampaign": "fn() -> +ShoppingCampaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "ShoppingPlatformIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingPlatform",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingPlatformSelector": {
          "prototype": {
            "desktop": "fn() -> +ShoppingPlatformSelector",
            "forDateRange": "fn(dateRange: string) -> +ShoppingPlatformSelector",
            "get": "fn() -> +ShoppingPlatformIterator",
            "mobile": "fn() -> +ShoppingPlatformSelector",
            "orderBy": "fn(orderBy: string) -> +ShoppingPlatformSelector",
            "tablet": "fn() -> +ShoppingPlatformSelector",
            "withCondition": "fn(condition: string) -> +ShoppingPlatformSelector",
            "withIds": "fn(ids: [[number]]) -> +ShoppingPlatformSelector",
            "withLimit": "fn(limit: number) -> +ShoppingPlatformSelector"
          }
        },
        "ShoppingTargetedLocation": {
          "prototype": {
            "getBidModifier": "fn() -> number",
            "getCampaign": "fn() -> +Campaign",
            "getCountryCode": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getTargetType": "fn() -> string",
            "getTargetingStatus": "fn() -> string",
            "remove": "fn()",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "ShoppingTargetedLocationIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingTargetedLocation",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingTargetedLocationSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ShoppingTargetedLocationSelector",
            "get": "fn() -> +ShoppingTargetedLocationIterator",
            "orderBy": "fn(orderBy: string) -> +ShoppingTargetedLocationSelector",
            "withCondition": "fn(condition: string) -> +ShoppingTargetedLocationSelector",
            "withIds": "fn(ids: [[number]]) -> +ShoppingTargetedLocationSelector",
            "withLimit": "fn(limit: number) -> +ShoppingTargetedLocationSelector"
          }
        },
        "ShoppingTargetedProximity": {
          "prototype": {
            "getAddress": "fn() -> +Address",
            "getBidModifier": "fn() -> number",
            "getCampaign": "fn() -> +Campaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLatitude": "fn() -> number",
            "getLongitude": "fn() -> number",
            "getRadius": "fn() -> number",
            "getRadiusUnits": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "remove": "fn()",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "ShoppingTargetedProximityIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ShoppingTargetedProximity",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ShoppingTargetedProximitySelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +ShoppingTargetedProximitySelector",
            "get": "fn() -> +ShoppingTargetedProximityIterator",
            "orderBy": "fn(orderBy: string) -> +ShoppingTargetedProximitySelector",
            "withCondition": "fn(condition: string) -> +ShoppingTargetedProximitySelector",
            "withIds": "fn(ids: [[number]]) -> +ShoppingTargetedProximitySelector",
            "withLimit": "fn(limit: number) -> +ShoppingTargetedProximitySelector"
          }
        },
        "Sitelink": {
          "prototype": {
            "clearDescription1": "fn()",
            "clearDescription2": "fn()",
            "clearEndDate": "fn()",
            "clearLinkUrl": "fn()",
            "clearStartDate": "fn()",
            "getDescription1": "fn() -> string",
            "getDescription2": "fn() -> string",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLinkText": "fn() -> string",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isMobilePreferred": "fn() -> bool",
            "setDescription1": "fn(description1: string)",
            "setDescription2": "fn(description2: string)",
            "setEndDate": "fn(date: object)",
            "setLinkText": "fn(linkText: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "urls": "fn() -> +SitelinkUrls"
          }
        },
        "SitelinkBuilder": {
          "prototype": {
            "build": "fn() -> +SitelinkOperation",
            "withCustomParameters": "fn(customParameters: object) -> +SitelinkBuilder",
            "withDescription1": "fn(description1: string) -> +SitelinkBuilder",
            "withDescription2": "fn(description2: string) -> +SitelinkBuilder",
            "withEndDate": "fn(date: object) -> +SitelinkBuilder",
            "withFinalUrl": "fn(finalUrl: string) -> +SitelinkBuilder",
            "withFinalUrlSuffix": "fn(suffix: string) -> +SitelinkBuilder",
            "withLinkText": "fn(linkText: string) -> +SitelinkBuilder",
            "withMobileFinalUrl": "fn(mobileFinalUrl: string) -> +SitelinkBuilder",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +SitelinkBuilder",
            "withSchedules": "fn(schedules: [ExtensionSchedule]) -> +SitelinkBuilder",
            "withStartDate": "fn(date: object) -> +SitelinkBuilder",
            "withTrackingTemplate": "fn(trackingTemplate: string) -> +SitelinkBuilder"
          }
        },
        "SitelinkIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Sitelink",
            "totalNumEntities": "fn() -> number"
          }
        },
        "SitelinkOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Sitelink",
            "isSuccessful": "fn() -> bool"
          }
        },
        "SitelinkSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +SitelinkSelector",
            "get": "fn() -> +SitelinkIterator",
            "orderBy": "fn(orderBy: string) -> +SitelinkSelector",
            "withCondition": "fn(condition: string) -> +SitelinkSelector",
            "withIds": "fn(ids: [number]) -> +SitelinkSelector",
            "withLimit": "fn(limit: number) -> +SitelinkSelector"
          }
        },
        "SitelinkUrls": {
          "prototype": {
            "clearFinalUrlSuffix": "fn()",
            "clearMobileFinalUrl": "fn()",
            "clearTrackingTemplate": "fn()",
            "getCustomParameters": "fn() -> object",
            "getFinalUrl": "fn() -> string",
            "getFinalUrlSuffix": "fn() -> string",
            "getMobileFinalUrl": "fn() -> string",
            "getTrackingTemplate": "fn() -> string",
            "setCustomParameters": "fn(customParameters: object)",
            "setFinalUrl": "fn(finalUrl: string)",
            "setFinalUrlSuffix": "fn(suffix: string)",
            "setMobileFinalUrl": "fn(mobileFinalUrl: string)",
            "setTrackingTemplate": "fn(trackingTemplate: string)"
          }
        },
        "Snippet": {
          "prototype": {
            "clearEndDate": "fn()",
            "clearStartDate": "fn()",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getHeader": "fn() -> string",
            "getId": "fn() -> number",
            "getSchedules": "fn() -> [+ExtensionSchedule]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getValues": "fn() -> [string]",
            "isMobilePreferred": "fn() -> bool",
            "setEndDate": "fn(date: object)",
            "setHeader": "fn(header: string)",
            "setMobilePreferred": "fn(isMobilePreferred: bool)",
            "setSchedules": "fn(schedules: [ExtensionSchedule])",
            "setStartDate": "fn(date: object)",
            "setValues": "fn(values: [string])"
          }
        },
        "SnippetBuilder": {
          "prototype": {
            "build": "fn() -> +SnippetOperation",
            "withEndDate": "fn(date: object) -> +SnippetBuilder",
            "withHeader": "fn(header: string) -> +SnippetBuilder",
            "withMobilePreferred": "fn(isMobilePreferred: bool) -> +SnippetBuilder",
            "withSchedules": "fn(schedules: [ExtensionSchedule]) -> +SnippetBuilder",
            "withStartDate": "fn(date: object) -> +SnippetBuilder",
            "withValues": "fn(values: [string]) -> +SnippetBuilder"
          }
        },
        "SnippetIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Snippet",
            "totalNumEntities": "fn() -> number"
          }
        },
        "SnippetOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Snippet",
            "isSuccessful": "fn() -> bool"
          }
        },
        "SnippetSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +SnippetSelector",
            "get": "fn() -> +SnippetIterator",
            "orderBy": "fn(orderBy: string) -> +SnippetSelector",
            "withCondition": "fn(condition: string) -> +SnippetSelector",
            "withIds": "fn(ids: [number]) -> +SnippetSelector",
            "withLimit": "fn(limit: number) -> +SnippetSelector"
          }
        },
        "Stats": {
          "prototype": {
            "getAverageCpc": "fn() -> number",
            "getAverageCpm": "fn() -> number",
            "getAverageCpv": "fn() -> number",
            "getAveragePageviews": "fn() -> number",
            "getAveragePosition": "fn() -> number",
            "getAverageTimeOnSite": "fn() -> number",
            "getBounceRate": "fn() -> number",
            "getClicks": "fn() -> number",
            "getConversionRate": "fn() -> number",
            "getConversions": "fn() -> number",
            "getCost": "fn() -> number",
            "getCtr": "fn() -> number",
            "getImpressions": "fn() -> number",
            "getViewRate": "fn() -> number",
            "getViews": "fn() -> number"
          }
        },
        "TargetedLocation": {
          "prototype": {
            "getBidModifier": "fn() -> number",
            "getCampaign": "fn() -> +Campaign",
            "getCountryCode": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getTargetType": "fn() -> string",
            "getTargetingStatus": "fn() -> string",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "TargetedLocationIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +TargetedLocation",
            "totalNumEntities": "fn() -> number"
          }
        },
        "TargetedLocationOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +TargetedLocation",
            "isSuccessful": "fn() -> bool"
          }
        },
        "TargetedLocationSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +TargetedLocationSelector",
            "get": "fn() -> +TargetedLocationIterator",
            "orderBy": "fn(orderBy: string) -> +TargetedLocationSelector",
            "withCondition": "fn(condition: string) -> +TargetedLocationSelector",
            "withIds": "fn(ids: [[number]]) -> +TargetedLocationSelector",
            "withLimit": "fn(limit: number) -> +TargetedLocationSelector"
          }
        },
        "TargetedProximity": {
          "prototype": {
            "getAddress": "fn() -> +Address",
            "getBaseCampaign": "fn() -> +Campaign",
            "getBidModifier": "fn() -> number",
            "getCampaign": "fn() -> +Campaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getLatitude": "fn() -> number",
            "getLongitude": "fn() -> number",
            "getRadius": "fn() -> number",
            "getRadiusUnits": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "remove": "fn()",
            "setBidModifier": "fn(modifier: number)"
          }
        },
        "TargetedProximityIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +TargetedProximity",
            "totalNumEntities": "fn() -> number"
          }
        },
        "TargetedProximityOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +TargetedProximity",
            "isSuccessful": "fn() -> bool"
          }
        },
        "TargetedProximitySelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +TargetedProximitySelector",
            "get": "fn() -> +TargetedProximityIterator",
            "orderBy": "fn(orderBy: string) -> +TargetedProximitySelector",
            "withCondition": "fn(condition: string) -> +TargetedProximitySelector",
            "withIds": "fn(ids: [[number]]) -> +TargetedProximitySelector",
            "withLimit": "fn(limit: number) -> +TargetedProximitySelector"
          }
        },
        "Targeting": {
          "prototype": {
            "adSchedules": "fn() -> +AdScheduleSelector",
            "audiences": "fn() -> +SearchCampaignAudienceSelector",
            "excludedAudiences": "fn() -> +SearchCampaignExcludedAudienceSelector",
            "excludedContentLabels": "fn() -> +ExcludedContentLabelSelector",
            "excludedLocations": "fn() -> +ExcludedLocationSelector",
            "languages": "fn() -> +LanguageSelector",
            "platforms": "fn() -> +PlatformSelector",
            "targetedLocations": "fn() -> +TargetedLocationSelector",
            "targetedProximities": "fn() -> +TargetedProximitySelector"
          }
        },
        "Topic": {
          "prototype": {
            "bidding": "fn() -> +TopicBidding",
            "getAdGroup": "fn() -> +AdGroup",
            "getBaseAdGroup": "fn() -> +AdGroup",
            "getBaseCampaign": "fn() -> +Campaign",
            "getCampaign": "fn() -> +Campaign",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getTopicId": "fn() -> number",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "TopicBidding": {
          "prototype": {
            "clearCpc": "fn()",
            "clearCpm": "fn()",
            "getCpc": "fn() -> number",
            "getCpm": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpc": "fn(cpc: number)",
            "setCpm": "fn(cpm: number)"
          }
        },
        "TopicBuilder": {
          "prototype": {
            "build": "fn() -> +TopicOperation",
            "exclude": "fn() -> +ExcludedTopicOperation",
            "withCpc": "fn(cpc: number) -> +TopicBuilder",
            "withCpm": "fn(cpm: number) -> +TopicBuilder",
            "withTopicId": "fn(topicId: number) -> +TopicBuilder"
          }
        },
        "TopicIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +Topic",
            "totalNumEntities": "fn() -> number"
          }
        },
        "TopicOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +Topic",
            "isSuccessful": "fn() -> bool"
          }
        },
        "TopicSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +TopicSelector",
            "get": "fn() -> +TopicIterator",
            "orderBy": "fn(orderBy: string) -> +TopicSelector",
            "withCondition": "fn(condition: string) -> +TopicSelector",
            "withIds": "fn(ids: [[number]]) -> +TopicSelector",
            "withLimit": "fn(limit: number) -> +TopicSelector"
          }
        },
        "UserList": {
          "prototype": {
            "close": "fn()",
            "excludedAdGroups": "fn() -> +AdGroupSelector",
            "excludedCampaigns": "fn() -> +CampaignSelector",
            "getDescription": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMembershipLifeSpan": "fn() -> number",
            "getName": "fn() -> string",
            "getSizeForDisplay": "fn() -> number",
            "getSizeForSearch": "fn() -> number",
            "getSizeRangeForDisplay": "fn() -> string",
            "getSizeRangeForSearch": "fn() -> string",
            "getType": "fn() -> string",
            "isClosed": "fn() -> bool",
            "isEligibleForDisplay": "fn() -> bool",
            "isEligibleForSearch": "fn() -> bool",
            "isOpen": "fn() -> bool",
            "isReadOnly": "fn() -> bool",
            "open": "fn()",
            "setDescription": "fn(description: string)",
            "setMembershipLifeSpan": "fn(membershipLifeSpan: number)",
            "setName": "fn(name: string)",
            "targetedAdGroups": "fn() -> +AdGroupSelector",
            "targetedCampaigns": "fn() -> +CampaignSelector"
          }
        },
        "UserListIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +UserList",
            "totalNumEntities": "fn() -> number"
          }
        },
        "UserListSelector": {
          "prototype": {
            "get": "fn() -> +UserListIterator",
            "orderBy": "fn(orderBy: string) -> +UserListSelector",
            "withCondition": "fn(condition: string) -> +UserListSelector",
            "withIds": "fn(ids: [number]) -> +UserListSelector",
            "withLimit": "fn(limit: number) -> +UserListSelector"
          }
        },
        "VideoAd": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "enable": "fn()",
            "getApprovalStatus": "fn() -> string",
            "getChannelName": "fn() -> string",
            "getDescription1": "fn() -> string",
            "getDescription2": "fn() -> string",
            "getDestinationPage": "fn() -> string",
            "getDisapprovalReasons": "fn() -> [string]",
            "getDisplayUrl": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getHeadline": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getPolicyApprovalStatus": "fn() -> string",
            "getPolicyTopics": "fn() -> [+PolicyTopic]",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getType": "fn() -> string",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "getVideoId": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "pause": "fn()",
            "remove": "fn()",
            "removeLabel": "fn(name: string)",
            "urls": "fn() -> +VideoAdUrls"
          }
        },
        "VideoAdBuilderSpace": {
          "prototype": {
            "bumperAdBuilder": "fn() -> +BumperAdBuilder",
            "inStreamAdBuilder": "fn() -> +InStreamAdBuilder",
            "nonSkippableAdBuilder": "fn() -> +NonSkippableAdBuilder",
            "videoDiscoveryAdBuilder": "fn() -> +VideoDiscoveryAdBuilder"
          }
        },
        "VideoAdGroup": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "bidding": "fn() -> +VideoAdGroupBidding",
            "clearTopContentBidModifier": "fn()",
            "devices": "fn() -> +VideoAdGroupDevices",
            "enable": "fn()",
            "getAdGroupType": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getTopContentBidModifier": "fn() -> number",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "isRemoved": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "newVideoAd": "fn() -> +VideoAdBuilderSpace",
            "pause": "fn()",
            "removeLabel": "fn(name: string)",
            "setName": "fn(name: string)",
            "setTopContentBidModifier": "fn(modifier: number)",
            "videoAds": "fn() -> +VideoAdSelector",
            "videoTargeting": "fn() -> +AdGroupVideoTargeting"
          }
        },
        "VideoAdGroupBidding": {
          "prototype": {
            "getCpa": "fn() -> number",
            "getCpm": "fn() -> number",
            "getCpv": "fn() -> number",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "getTargetCpm": "fn() -> number",
            "setCpa": "fn(cpa: number)",
            "setCpm": "fn(cpm: number)",
            "setCpv": "fn(cpv: number)",
            "setTargetCpm": "fn(targetCpm: number)"
          }
        },
        "VideoAdGroupBuilder": {
          "prototype": {
            "build": "fn() -> +VideoAdGroupOperation",
            "withAdGroupType": "fn(adGroupType: string) -> +VideoAdGroupBuilder",
            "withCpa": "fn(cpa: number) -> +VideoAdGroupBuilder",
            "withCpm": "fn(cpm: number) -> +VideoAdGroupBuilder",
            "withCpv": "fn(cpv: number) -> +VideoAdGroupBuilder",
            "withName": "fn(name: string) -> +VideoAdGroupBuilder",
            "withStatus": "fn(status: string) -> +VideoAdGroupBuilder",
            "withTargetCpm": "fn(targetCpm: number) -> +VideoAdGroupBuilder"
          }
        },
        "VideoAdGroupDevices": {
          "prototype": {
            "clearDesktopBidModifier": "fn()",
            "clearMobileBidModifier": "fn()",
            "clearTabletBidModifier": "fn()",
            "getDesktopBidModifier": "fn() -> number",
            "getMobileBidModifier": "fn() -> number",
            "getTabletBidModifier": "fn() -> number",
            "setDesktopBidModifier": "fn(modifier: number)",
            "setMobileBidModifier": "fn(modifier: number)",
            "setTabletBidModifier": "fn(modifier: number)"
          }
        },
        "VideoAdGroupIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoAdGroup",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoAdGroupOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoAdGroup",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoAdGroupSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoAdGroupSelector",
            "get": "fn() -> +VideoAdGroupIterator",
            "orderBy": "fn(orderBy: string) -> +VideoAdGroupSelector",
            "withCondition": "fn(condition: string) -> +VideoAdGroupSelector",
            "withIds": "fn(ids: [number]) -> +VideoAdGroupSelector",
            "withLimit": "fn(limit: number) -> +VideoAdGroupSelector"
          }
        },
        "VideoAdIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoAd",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoAdOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoAd",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoAdSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoAdSelector",
            "get": "fn() -> +VideoAdIterator",
            "orderBy": "fn(orderBy: string) -> +VideoAdSelector",
            "withCondition": "fn(condition: string) -> +VideoAdSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoAdSelector",
            "withLimit": "fn(limit: number) -> +VideoAdSelector"
          }
        },
        "VideoAdUrls": {
          "prototype": {
            "getCustomParameters": "fn() -> object",
            "getFinalUrl": "fn() -> string",
            "getTrackingTemplate": "fn() -> string"
          }
        },
        "VideoAge": {
          "prototype": {
            "bidding": "fn() -> +VideoAgeBidding",
            "exclude": "fn()",
            "getAgeRange": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign"
          }
        },
        "VideoAgeBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoAgeBuilder": {
          "prototype": {
            "build": "fn() -> +VideoAgeOperation",
            "exclude": "fn() -> +ExcludedVideoAgeOperation",
            "withAgeRange": "fn(ageRange: string) -> +VideoAgeBuilder"
          }
        },
        "VideoAgeIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoAge",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoAgeOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoAge",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoAgeSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoAgeSelector",
            "get": "fn() -> +VideoAgeIterator",
            "orderBy": "fn(orderBy: string) -> +VideoAgeSelector",
            "withCondition": "fn(condition: string) -> +VideoAgeSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoAgeSelector",
            "withLimit": "fn(limit: number) -> +VideoAgeSelector"
          }
        },
        "VideoAudience": {
          "prototype": {
            "bidding": "fn() -> +VideoAudienceBidding",
            "getAudienceId": "fn() -> number",
            "getAudienceType": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "VideoAudienceBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoAudienceBuilder": {
          "prototype": {
            "build": "fn() -> +VideoAudienceOperation",
            "exclude": "fn() -> +ExcludedVideoAudienceOperation",
            "withAudienceId": "fn(audienceId: number) -> +VideoAudienceBuilder",
            "withAudienceType": "fn(audienceType: string) -> +VideoAudienceBuilder"
          }
        },
        "VideoAudienceIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoAudience",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoAudienceOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoAudience",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoAudienceSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoAudienceSelector",
            "get": "fn() -> +VideoAudienceIterator",
            "orderBy": "fn(orderBy: string) -> +VideoAudienceSelector",
            "withCondition": "fn(condition: string) -> +VideoAudienceSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoAudienceSelector",
            "withLimit": "fn(limit: number) -> +VideoAudienceSelector"
          }
        },
        "VideoBuilder": {
          "prototype": {
            "build": "fn() -> +MediaOperation",
            "withYouTubeVideoId": "fn(youTubeVideoId: string) -> +VideoBuilder"
          }
        },
        "VideoCampaign": {
          "prototype": {
            "addAdSchedule": "fn(dayOfWeek: string, startHour: number, startMinute: number, endHour: number, endMinute: number, bidModifier: number) -> +AdScheduleOperation",
            "addExcludedPlacementList": "fn(excludedPlacementList: ExcludedPlacementList)",
            "addLanguage": "fn(languageId: number) -> +LanguageOperation",
            "addLocation": "fn(locationId: number, bidModifier: number) -> +TargetedLocationOperation",
            "addNegativeKeywordList": "fn(negativeKeywordList: NegativeKeywordList)",
            "addProximity": "fn(latitude: number, longitude: number, radius: number, radiusUnits: string, optArgs: object) -> +TargetedProximityOperation",
            "applyLabel": "fn(name: string)",
            "bidding": "fn() -> +VideoCampaignBidding",
            "enable": "fn()",
            "excludeContentLabel": "fn(contentLabelType: string) -> +ExcludedContentLabelOperation",
            "excludeLocation": "fn(locationId: number) -> +ExcludedLocationOperation",
            "excludedPlacementLists": "fn() -> +ExcludedPlacementListSelector",
            "getAdRotationType": "fn() -> string",
            "getBiddingStrategyType": "fn() -> string",
            "getBudget": "fn() -> +Budget",
            "getEndDate": "fn() -> +GoogleAdsDate",
            "getEntityType": "fn() -> string",
            "getFrequencyCaps": "fn() -> +FrequencyCaps",
            "getId": "fn() -> number",
            "getInventoryType": "fn() -> string",
            "getName": "fn() -> string",
            "getNetworks": "fn() -> [string]",
            "getStartDate": "fn() -> +GoogleAdsDate",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "isRemoved": "fn() -> bool",
            "labels": "fn() -> +LabelSelector",
            "negativeKeywordLists": "fn() -> +NegativeKeywordListSelector",
            "newVideoAdGroupBuilder": "fn() -> +VideoAdGroupBuilder",
            "pause": "fn()",
            "removeExcludedPlacementList": "fn(excludedPlacementList: ExcludedPlacementList)",
            "removeLabel": "fn(name: string)",
            "removeNegativeKeywordList": "fn(negativeKeywordList: NegativeKeywordList)",
            "setAdRotationType": "fn(adRotationType: string)",
            "setEndDate": "fn(date: object)",
            "setInventoryType": "fn(inventoryType: string)",
            "setName": "fn(name: string)",
            "setNetworks": "fn(networks: [string])",
            "setStartDate": "fn(date: object)",
            "targeting": "fn() -> +VideoCampaignTargeting",
            "videoAdGroups": "fn() -> +VideoAdGroupSelector",
            "videoAds": "fn() -> +VideoAdSelector",
            "videoTargeting": "fn() -> +CampaignVideoTargeting"
          }
        },
        "VideoCampaignBidding": {
          "prototype": {
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoCampaignIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoCampaign",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoCampaignSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoCampaignSelector",
            "get": "fn() -> +VideoCampaignIterator",
            "orderBy": "fn(orderBy: string) -> +VideoCampaignSelector",
            "withCondition": "fn(condition: string) -> +VideoCampaignSelector",
            "withIds": "fn(ids: [number]) -> +VideoCampaignSelector",
            "withLimit": "fn(limit: number) -> +VideoCampaignSelector"
          }
        },
        "VideoCampaignTargeting": {
          "prototype": {
            "adSchedules": "fn() -> +AdScheduleSelector",
            "excludedContentLabels": "fn() -> +ExcludedContentLabelSelector",
            "excludedLocations": "fn() -> +ExcludedLocationSelector",
            "languages": "fn() -> +LanguageSelector",
            "platforms": "fn() -> +PlatformSelector",
            "targetedLocations": "fn() -> +TargetedLocationSelector",
            "targetedProximities": "fn() -> +TargetedProximitySelector"
          }
        },
        "VideoDiscoveryAdBuilder": {
          "prototype": {
            "build": "fn() -> +VideoAdOperation",
            "withAdName": "fn(adName: string) -> +VideoDiscoveryAdBuilder",
            "withDescription1": "fn(description1: string) -> +VideoDiscoveryAdBuilder",
            "withDescription2": "fn(description2: string) -> +VideoDiscoveryAdBuilder",
            "withDestinationPage": "fn(destinationPage: string) -> +VideoDiscoveryAdBuilder",
            "withHeadline": "fn(headline: string) -> +VideoDiscoveryAdBuilder",
            "withThumbnail": "fn(thumbnail: string) -> +VideoDiscoveryAdBuilder",
            "withVideo": "fn(videoMedia: Media) -> +VideoDiscoveryAdBuilder"
          }
        },
        "VideoGender": {
          "prototype": {
            "bidding": "fn() -> +VideoGenderBidding",
            "exclude": "fn()",
            "getEntityType": "fn() -> string",
            "getGenderType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign"
          }
        },
        "VideoGenderBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoGenderBuilder": {
          "prototype": {
            "build": "fn() -> +VideoGenderOperation",
            "exclude": "fn() -> +ExcludedVideoGenderOperation",
            "withGenderType": "fn(genderType: string) -> +VideoGenderBuilder"
          }
        },
        "VideoGenderIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoGender",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoGenderOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoGender",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoGenderSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoGenderSelector",
            "get": "fn() -> +VideoGenderIterator",
            "orderBy": "fn(orderBy: string) -> +VideoGenderSelector",
            "withCondition": "fn(condition: string) -> +VideoGenderSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoGenderSelector",
            "withLimit": "fn(limit: number) -> +VideoGenderSelector"
          }
        },
        "VideoKeyword": {
          "prototype": {
            "bidding": "fn() -> +VideoKeywordBidding",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getText": "fn() -> string",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "VideoKeywordBidding": {
          "prototype": {
            "clearCpv": "fn()",
            "getCpv": "fn() -> number",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpv": "fn(cpv: number)"
          }
        },
        "VideoKeywordBuilder": {
          "prototype": {
            "build": "fn() -> +VideoKeywordOperation",
            "exclude": "fn() -> +ExcludedVideoKeywordOperation",
            "withCpv": "fn(cpv: number) -> +VideoKeywordBuilder",
            "withText": "fn(text: string) -> +VideoKeywordBuilder"
          }
        },
        "VideoKeywordIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoKeyword",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoKeywordOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoKeyword",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoKeywordSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoKeywordSelector",
            "get": "fn() -> +VideoKeywordIterator",
            "orderBy": "fn(orderBy: string) -> +VideoKeywordSelector",
            "withCondition": "fn(condition: string) -> +VideoKeywordSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoKeywordSelector",
            "withLimit": "fn(limit: number) -> +VideoKeywordSelector"
          }
        },
        "VideoMobileAppCategory": {
          "prototype": {
            "bidding": "fn() -> +VideoMobileAppCategoryBidding",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getMobileAppCategoryId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "isEnabled": "fn() -> bool",
            "isManaged": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "VideoMobileAppCategoryBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoMobileAppCategoryBuilder": {
          "prototype": {
            "build": "fn() -> +VideoMobileAppCategoryOperation",
            "exclude": "fn() -> +ExcludedVideoMobileAppCategoryOperation",
            "withMobileAppCategoryId": "fn(categoryId: number) -> +VideoMobileAppCategoryBuilder"
          }
        },
        "VideoMobileAppCategoryIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoMobileAppCategory",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoMobileAppCategoryOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoMobileAppCategory",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoMobileAppCategorySelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoMobileAppCategorySelector",
            "get": "fn() -> +VideoMobileAppCategoryIterator",
            "orderBy": "fn(orderBy: string) -> +VideoMobileAppCategorySelector",
            "withCondition": "fn(condition: string) -> +VideoMobileAppCategorySelector",
            "withIds": "fn(ids: [[number]]) -> +VideoMobileAppCategorySelector",
            "withLimit": "fn(limit: number) -> +VideoMobileAppCategorySelector"
          }
        },
        "VideoMobileApplication": {
          "prototype": {
            "bidding": "fn() -> +VideoMobileApplicationBidding",
            "getAppId": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "isEnabled": "fn() -> bool",
            "isManaged": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "VideoMobileApplicationBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoMobileApplicationBuilder": {
          "prototype": {
            "build": "fn() -> +VideoMobileApplicationOperation",
            "exclude": "fn() -> +ExcludedVideoMobileApplicationOperation",
            "withAppId": "fn(appId: string) -> +VideoMobileApplicationBuilder"
          }
        },
        "VideoMobileApplicationIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoMobileApplication",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoMobileApplicationOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoMobileApplication",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoMobileApplicationSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoMobileApplicationSelector",
            "get": "fn() -> +VideoMobileApplicationIterator",
            "orderBy": "fn(orderBy: string) -> +VideoMobileApplicationSelector",
            "withCondition": "fn(condition: string) -> +VideoMobileApplicationSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoMobileApplicationSelector",
            "withLimit": "fn(limit: number) -> +VideoMobileApplicationSelector"
          }
        },
        "VideoParentalStatus": {
          "prototype": {
            "bidding": "fn() -> +VideoParentalStatusBidding",
            "exclude": "fn()",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getParentType": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign"
          }
        },
        "VideoParentalStatusBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoParentalStatusBuilder": {
          "prototype": {
            "build": "fn() -> +VideoParentalStatusOperation",
            "exclude": "fn() -> +ExcludedVideoParentalStatusOperation",
            "withParentType": "fn(parentalStatus: string) -> +VideoParentalStatusBuilder"
          }
        },
        "VideoParentalStatusIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoParentalStatus",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoParentalStatusOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoParentalStatus",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoParentalStatusSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoParentalStatusSelector",
            "get": "fn() -> +VideoParentalStatusIterator",
            "orderBy": "fn(orderBy: string) -> +VideoParentalStatusSelector",
            "withCondition": "fn(condition: string) -> +VideoParentalStatusSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoParentalStatusSelector",
            "withLimit": "fn(limit: number) -> +VideoParentalStatusSelector"
          }
        },
        "VideoPlacement": {
          "prototype": {
            "bidding": "fn() -> +VideoPlacementBidding",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getUrl": "fn() -> string",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "isEnabled": "fn() -> bool",
            "isManaged": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "VideoPlacementBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoPlacementBuilder": {
          "prototype": {
            "build": "fn() -> +VideoPlacementOperation",
            "exclude": "fn() -> +ExcludedVideoPlacementOperation",
            "withUrl": "fn(url: string) -> +VideoPlacementBuilder"
          }
        },
        "VideoPlacementIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoPlacement",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoPlacementOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoPlacement",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoPlacementSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoPlacementSelector",
            "get": "fn() -> +VideoPlacementIterator",
            "orderBy": "fn(orderBy: string) -> +VideoPlacementSelector",
            "withCondition": "fn(condition: string) -> +VideoPlacementSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoPlacementSelector",
            "withLimit": "fn(limit: number) -> +VideoPlacementSelector"
          }
        },
        "VideoTargeting": {
          "prototype": {
            "ages": "fn() -> +VideoAgeSelector",
            "audiences": "fn() -> +VideoAudienceSelector",
            "genders": "fn() -> +VideoGenderSelector",
            "keywords": "fn() -> +VideoKeywordSelector",
            "mobileAppCategories": "fn() -> +VideoMobileAppCategorySelector",
            "mobileApplications": "fn() -> +VideoMobileApplicationSelector",
            "parentalStatuses": "fn() -> +VideoParentalStatusSelector",
            "placements": "fn() -> +VideoPlacementSelector",
            "topics": "fn() -> +VideoTopicSelector",
            "youTubeChannels": "fn() -> +VideoYouTubeChannelSelector",
            "youTubeVideos": "fn() -> +VideoYouTubeVideoSelector"
          }
        },
        "VideoTopic": {
          "prototype": {
            "bidding": "fn() -> +VideoTopicBidding",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getTopicId": "fn() -> number",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "isEnabled": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "VideoTopicBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoTopicBuilder": {
          "prototype": {
            "build": "fn() -> +VideoTopicOperation",
            "exclude": "fn() -> +ExcludedVideoTopicOperation",
            "withTopicId": "fn(topicId: number) -> +VideoTopicBuilder"
          }
        },
        "VideoTopicIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoTopic",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoTopicOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoTopic",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoTopicSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoTopicSelector",
            "get": "fn() -> +VideoTopicIterator",
            "orderBy": "fn(orderBy: string) -> +VideoTopicSelector",
            "withCondition": "fn(condition: string) -> +VideoTopicSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoTopicSelector",
            "withLimit": "fn(limit: number) -> +VideoTopicSelector"
          }
        },
        "VideoYouTubeChannel": {
          "prototype": {
            "bidding": "fn() -> +VideoYouTubeChannelBidding",
            "getChannelId": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "isEnabled": "fn() -> bool",
            "isManaged": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "VideoYouTubeChannelBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoYouTubeChannelBuilder": {
          "prototype": {
            "build": "fn() -> +VideoYouTubeChannelOperation",
            "exclude": "fn() -> +ExcludedVideoYouTubeChannelOperation",
            "withChannelId": "fn(channelId: string) -> +VideoYouTubeChannelBuilder"
          }
        },
        "VideoYouTubeChannelIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoYouTubeChannel",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoYouTubeChannelOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoYouTubeChannel",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoYouTubeChannelSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoYouTubeChannelSelector",
            "get": "fn() -> +VideoYouTubeChannelIterator",
            "orderBy": "fn(orderBy: string) -> +VideoYouTubeChannelSelector",
            "withCondition": "fn(condition: string) -> +VideoYouTubeChannelSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoYouTubeChannelSelector",
            "withLimit": "fn(limit: number) -> +VideoYouTubeChannelSelector"
          }
        },
        "VideoYouTubeVideo": {
          "prototype": {
            "bidding": "fn() -> +VideoYouTubeVideoBidding",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoAdGroup": "fn() -> +VideoAdGroup",
            "getVideoCampaign": "fn() -> +VideoCampaign",
            "getVideoId": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isManaged": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "VideoYouTubeVideoBidding": {
          "prototype": {
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string"
          }
        },
        "VideoYouTubeVideoBuilder": {
          "prototype": {
            "build": "fn() -> +VideoYouTubeVideoOperation",
            "exclude": "fn() -> +ExcludedVideoYouTubeVideoOperation",
            "withVideoId": "fn(videoId: string) -> +VideoYouTubeVideoBuilder"
          }
        },
        "VideoYouTubeVideoIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +VideoYouTubeVideo",
            "totalNumEntities": "fn() -> number"
          }
        },
        "VideoYouTubeVideoOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +VideoYouTubeVideo",
            "isSuccessful": "fn() -> bool"
          }
        },
        "VideoYouTubeVideoSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +VideoYouTubeVideoSelector",
            "get": "fn() -> +VideoYouTubeVideoIterator",
            "orderBy": "fn(orderBy: string) -> +VideoYouTubeVideoSelector",
            "withCondition": "fn(condition: string) -> +VideoYouTubeVideoSelector",
            "withIds": "fn(ids: [[number]]) -> +VideoYouTubeVideoSelector",
            "withLimit": "fn(limit: number) -> +VideoYouTubeVideoSelector"
          }
        },
        "YouTubeChannel": {
          "prototype": {
            "bidding": "fn() -> +YouTubeChannelBidding",
            "getAdGroup": "fn() -> +AdGroup",
            "getCampaign": "fn() -> +Campaign",
            "getChannelId": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "isEnabled": "fn() -> bool",
            "isManaged": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "YouTubeChannelBidding": {
          "prototype": {
            "clearCpc": "fn()",
            "clearCpm": "fn()",
            "getCpc": "fn() -> number",
            "getCpm": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpc": "fn(cpc: number)",
            "setCpm": "fn(cpm: number)"
          }
        },
        "YouTubeChannelBuilder": {
          "prototype": {
            "build": "fn() -> +YouTubeChannelOperation",
            "exclude": "fn() -> +ExcludedYouTubeChannelOperation",
            "withChannelId": "fn(channelId: string) -> +YouTubeChannelBuilder",
            "withCpc": "fn(cpc: number) -> +YouTubeChannelBuilder",
            "withCpm": "fn(cpm: number) -> +YouTubeChannelBuilder"
          }
        },
        "YouTubeChannelIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +YouTubeChannel",
            "totalNumEntities": "fn() -> number"
          }
        },
        "YouTubeChannelOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +YouTubeChannel",
            "isSuccessful": "fn() -> bool"
          }
        },
        "YouTubeChannelSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +YouTubeChannelSelector",
            "get": "fn() -> +YouTubeChannelIterator",
            "orderBy": "fn(orderBy: string) -> +YouTubeChannelSelector",
            "withCondition": "fn(condition: string) -> +YouTubeChannelSelector",
            "withIds": "fn(ids: [[number]]) -> +YouTubeChannelSelector",
            "withLimit": "fn(limit: number) -> +YouTubeChannelSelector"
          }
        },
        "YouTubeVideo": {
          "prototype": {
            "bidding": "fn() -> +YouTubeVideoBidding",
            "getAdGroup": "fn() -> +AdGroup",
            "getCampaign": "fn() -> +Campaign",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> number",
            "getStatsFor": "fn(dateRange: string) -> +Stats",
            "getVideoId": "fn() -> string",
            "isEnabled": "fn() -> bool",
            "isManaged": "fn() -> bool",
            "isPaused": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "YouTubeVideoBidding": {
          "prototype": {
            "clearCpc": "fn()",
            "clearCpm": "fn()",
            "getCpc": "fn() -> number",
            "getCpm": "fn() -> number",
            "getStrategy": "fn() -> +BiddingStrategy",
            "getStrategySource": "fn() -> string",
            "getStrategyType": "fn() -> string",
            "setCpc": "fn(cpc: number)",
            "setCpm": "fn(cpm: number)"
          }
        },
        "YouTubeVideoBuilder": {
          "prototype": {
            "build": "fn() -> +YouTubeVideoOperation",
            "exclude": "fn() -> +ExcludedYouTubeVideoOperation",
            "withCpc": "fn(cpc: number) -> +YouTubeVideoBuilder",
            "withCpm": "fn(cpm: number) -> +YouTubeVideoBuilder",
            "withVideoId": "fn(videoId: string) -> +YouTubeVideoBuilder"
          }
        },
        "YouTubeVideoIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +YouTubeVideo",
            "totalNumEntities": "fn() -> number"
          }
        },
        "YouTubeVideoOperation": {
          "prototype": {
            "getErrors": "fn() -> [string]",
            "getResult": "fn() -> +YouTubeVideo",
            "isSuccessful": "fn() -> bool"
          }
        },
        "YouTubeVideoSelector": {
          "prototype": {
            "forDateRange": "fn(dateRange: string) -> +YouTubeVideoSelector",
            "get": "fn() -> +YouTubeVideoIterator",
            "orderBy": "fn(orderBy: string) -> +YouTubeVideoSelector",
            "withCondition": "fn(condition: string) -> +YouTubeVideoSelector",
            "withIds": "fn(ids: [[number]]) -> +YouTubeVideoSelector",
            "withLimit": "fn(limit: number) -> +YouTubeVideoSelector"
          }
        }
      }
    },
    {
      "!name": "Charts",
      "Charts": {
        "newAreaChart": "fn() -> +Charts.AreaChartBuilder",
        "newBarChart": "fn() -> +Charts.BarChartBuilder",
        "newCategoryFilter": "fn() -> +Charts.CategoryFilterBuilder",
        "newColumnChart": "fn() -> +Charts.ColumnChartBuilder",
        "newDashboardPanel": "fn() -> +Charts.DashboardPanelBuilder",
        "newDataTable": "fn() -> DataTableBuilder",
        "newDataViewDefinition": "fn() -> +Charts.DataViewDefinitionBuilder",
        "newLineChart": "fn() -> +Charts.LineChartBuilder",
        "newNumberRangeFilter": "fn() -> +Charts.NumberRangeFilterBuilder",
        "newPieChart": "fn() -> +Charts.PieChartBuilder",
        "newScatterChart": "fn() -> +Charts.ScatterChartBuilder",
        "newStringFilter": "fn() -> +Charts.StringFilterBuilder",
        "newTableChart": "fn() -> +Charts.TableChartBuilder",
        "newTextStyle": "fn() -> +Charts.TextStyleBuilder",
        "ChartHiddenDimensionStrategy": "+Charts.ChartHiddenDimensionStrategy",
        "ChartMergeStrategy": "+Charts.ChartMergeStrategy",
        "ChartType": "+Charts.ChartType",
        "ColumnType": "ColumnType",
        "CurveStyle": "+Charts.CurveStyle",
        "MatchType": "+Charts.MatchType",
        "Orientation": "+Charts.Orientation",
        "PickerValuesLayout": "+Charts.PickerValuesLayout",
        "PointStyle": "+Charts.PointStyle",
        "Position": "+Charts.Position"
      },
      "!define": {
        "Charts.AreaChartBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Chart",
            "reverseCategories": "fn() -> +Charts.AreaChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +Charts.AreaChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +Charts.AreaChartBuilder",
            "setDataSourceUrl": "fn(url: string) -> +Charts.AreaChartBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.AreaChartBuilder",
            "setDataViewDefinition": "fn(dataViewDefinition: Charts.DataViewDefinition) -> +Charts.AreaChartBuilder",
            "setDimensions": "fn(width: number, height: number) -> +Charts.AreaChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +Charts.AreaChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.AreaChartBuilder",
            "setOption": "fn(option: string, value: object) -> +Charts.AreaChartBuilder",
            "setPointStyle": "fn(style: Charts.PointStyle) -> +Charts.AreaChartBuilder",
            "setRange": "fn(start: number, end: number) -> +Charts.AreaChartBuilder",
            "setStacked": "fn() -> +Charts.AreaChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +Charts.AreaChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.AreaChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.AreaChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +Charts.AreaChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.AreaChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.AreaChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +Charts.AreaChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.AreaChartBuilder",
            "useLogScale": "fn() -> +Charts.AreaChartBuilder"
          }
        },
        "Charts.BarChartBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Chart",
            "reverseCategories": "fn() -> +Charts.BarChartBuilder",
            "reverseDirection": "fn() -> +Charts.BarChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +Charts.BarChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +Charts.BarChartBuilder",
            "setDataSourceUrl": "fn(url: string) -> +Charts.BarChartBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.BarChartBuilder",
            "setDataViewDefinition": "fn(dataViewDefinition: Charts.DataViewDefinition) -> +Charts.BarChartBuilder",
            "setDimensions": "fn(width: number, height: number) -> +Charts.BarChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +Charts.BarChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.BarChartBuilder",
            "setOption": "fn(option: string, value: object) -> +Charts.BarChartBuilder",
            "setRange": "fn(start: number, end: number) -> +Charts.BarChartBuilder",
            "setStacked": "fn() -> +Charts.BarChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +Charts.BarChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.BarChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.BarChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +Charts.BarChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.BarChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.BarChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +Charts.BarChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.BarChartBuilder",
            "useLogScale": "fn() -> +Charts.BarChartBuilder"
          }
        },
        "Charts.CategoryFilterBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Control",
            "setAllowMultiple": "fn(allowMultiple: bool) -> +Charts.CategoryFilterBuilder",
            "setAllowNone": "fn(allowNone: bool) -> +Charts.CategoryFilterBuilder",
            "setAllowTyping": "fn(allowTyping: bool) -> +Charts.CategoryFilterBuilder",
            "setCaption": "fn(caption: string) -> +Charts.CategoryFilterBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.CategoryFilterBuilder",
            "setFilterColumnIndex": "fn(columnIndex: number) -> +Charts.CategoryFilterBuilder",
            "setFilterColumnLabel": "fn(columnLabel: string) -> +Charts.CategoryFilterBuilder",
            "setLabel": "fn(label: string) -> +Charts.CategoryFilterBuilder",
            "setLabelSeparator": "fn(labelSeparator: string) -> +Charts.CategoryFilterBuilder",
            "setLabelStacking": "fn(orientation: Charts.Orientation) -> +Charts.CategoryFilterBuilder",
            "setSelectedValuesLayout": "fn(layout: Charts.PickerValuesLayout) -> +Charts.CategoryFilterBuilder",
            "setSortValues": "fn(sortValues: bool) -> +Charts.CategoryFilterBuilder",
            "setValues": "fn(values: [string]) -> +Charts.CategoryFilterBuilder"
          }
        },
        "Charts.Chart": {
          "prototype": {
            "getAs": "fn(contentType: string) -> Blob",
            "getBlob": "fn() -> Blob",
            "getId": "fn() -> string",
            "getOptions": "fn() -> +Charts.ChartOptions",
            "getType": "fn() -> string",
            "setId": "fn(id: string) -> +Charts.Chart"
          }
        },
        "Charts.ChartHiddenDimensionStrategy": {
          "prototype": {
            "IGNORE_BOTH": "+Charts.ChartHiddenDimensionStrategy",
            "IGNORE_COLUMNS": "+Charts.ChartHiddenDimensionStrategy",
            "IGNORE_ROWS": "+Charts.ChartHiddenDimensionStrategy",
            "SHOW_BOTH": "+Charts.ChartHiddenDimensionStrategy"
          }
        },
        "Charts.ChartMergeStrategy": {
          "prototype": {
            "MERGE_COLUMNS": "+Charts.ChartMergeStrategy",
            "MERGE_ROWS": "+Charts.ChartMergeStrategy"
          }
        },
        "Charts.ChartOptions": {
          "prototype": {
            "get": "fn(option: string) -> object"
          }
        },
        "Charts.ChartType": {
          "prototype": {
            "AREA": "+Charts.ChartType",
            "BAR": "+Charts.ChartType",
            "BUBBLE": "+Charts.ChartType",
            "CANDLESTICK": "+Charts.ChartType",
            "COLUMN": "+Charts.ChartType",
            "COMBO": "+Charts.ChartType",
            "GAUGE": "+Charts.ChartType",
            "GEO": "+Charts.ChartType",
            "HISTOGRAM": "+Charts.ChartType",
            "LINE": "+Charts.ChartType",
            "ORG": "+Charts.ChartType",
            "PIE": "+Charts.ChartType",
            "RADAR": "+Charts.ChartType",
            "SCATTER": "+Charts.ChartType",
            "SPARKLINE": "+Charts.ChartType",
            "STEPPED_AREA": "+Charts.ChartType",
            "TABLE": "+Charts.ChartType",
            "TIMELINE": "+Charts.ChartType",
            "TREEMAP": "+Charts.ChartType",
            "WATERFALL": "+Charts.ChartType"
          }
        },
        "Charts.ColumnChartBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Chart",
            "reverseCategories": "fn() -> +Charts.ColumnChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +Charts.ColumnChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +Charts.ColumnChartBuilder",
            "setDataSourceUrl": "fn(url: string) -> +Charts.ColumnChartBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.ColumnChartBuilder",
            "setDataViewDefinition": "fn(dataViewDefinition: Charts.DataViewDefinition) -> +Charts.ColumnChartBuilder",
            "setDimensions": "fn(width: number, height: number) -> +Charts.ColumnChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +Charts.ColumnChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ColumnChartBuilder",
            "setOption": "fn(option: string, value: object) -> +Charts.ColumnChartBuilder",
            "setRange": "fn(start: number, end: number) -> +Charts.ColumnChartBuilder",
            "setStacked": "fn() -> +Charts.ColumnChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +Charts.ColumnChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ColumnChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ColumnChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +Charts.ColumnChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ColumnChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ColumnChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +Charts.ColumnChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ColumnChartBuilder",
            "useLogScale": "fn() -> +Charts.ColumnChartBuilder"
          }
        },
        "Charts.Control": {
          "prototype": {
            "getId": "fn() -> string",
            "getType": "fn() -> string",
            "setId": "fn(id: string) -> +Charts.Control"
          }
        },
        "Charts.CurveStyle": {
          "prototype": {
            "NORMAL": "+Charts.CurveStyle",
            "SMOOTH": "+Charts.CurveStyle"
          }
        },
        "Charts.DashboardPanel": {
          "prototype": {
            "add": "fn(widget: UiApp.Widget) -> +Charts.DashboardPanel",
            "getId": "fn() -> string",
            "getType": "fn() -> string",
            "setId": "fn(id: string) -> +Charts.DashboardPanel"
          }
        },
        "Charts.DashboardPanelBuilder": {
          "prototype": {
            "bind": "fn(controls: [Charts.Control], charts: [Charts.Chart]) -> +Charts.DashboardPanelBuilder",
            "build": "fn() -> +Charts.DashboardPanel",
            "setDataTable": "fn(source: DataTableSource) -> +Charts.DashboardPanelBuilder"
          }
        },
        "Charts.DataViewDefinition": {
          "prototype": {}
        },
        "Charts.DataViewDefinitionBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.DataViewDefinition",
            "setColumns": "fn(columns: [object]) -> +Charts.DataViewDefinitionBuilder"
          }
        },
        "Charts.LineChartBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Chart",
            "reverseCategories": "fn() -> +Charts.LineChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +Charts.LineChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +Charts.LineChartBuilder",
            "setCurveStyle": "fn(style: Charts.CurveStyle) -> +Charts.LineChartBuilder",
            "setDataSourceUrl": "fn(url: string) -> +Charts.LineChartBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.LineChartBuilder",
            "setDataViewDefinition": "fn(dataViewDefinition: Charts.DataViewDefinition) -> +Charts.LineChartBuilder",
            "setDimensions": "fn(width: number, height: number) -> +Charts.LineChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +Charts.LineChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.LineChartBuilder",
            "setOption": "fn(option: string, value: object) -> +Charts.LineChartBuilder",
            "setPointStyle": "fn(style: Charts.PointStyle) -> +Charts.LineChartBuilder",
            "setRange": "fn(start: number, end: number) -> +Charts.LineChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +Charts.LineChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.LineChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.LineChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +Charts.LineChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.LineChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.LineChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +Charts.LineChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.LineChartBuilder",
            "useLogScale": "fn() -> +Charts.LineChartBuilder"
          }
        },
        "Charts.MatchType": {
          "prototype": {
            "getName": "fn() -> string",
            "ANY": "+Charts.MatchType",
            "EXACT": "+Charts.MatchType",
            "PREFIX": "+Charts.MatchType"
          }
        },
        "Charts.NumberRangeFilterBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Control",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.NumberRangeFilterBuilder",
            "setFilterColumnIndex": "fn(columnIndex: number) -> +Charts.NumberRangeFilterBuilder",
            "setFilterColumnLabel": "fn(columnLabel: string) -> +Charts.NumberRangeFilterBuilder",
            "setLabel": "fn(label: string) -> +Charts.NumberRangeFilterBuilder",
            "setLabelSeparator": "fn(labelSeparator: string) -> +Charts.NumberRangeFilterBuilder",
            "setLabelStacking": "fn(orientation: Charts.Orientation) -> +Charts.NumberRangeFilterBuilder",
            "setMaxValue": "fn(maxValue: number) -> +Charts.NumberRangeFilterBuilder",
            "setMinValue": "fn(minValue: number) -> +Charts.NumberRangeFilterBuilder",
            "setOrientation": "fn(orientation: Charts.Orientation) -> +Charts.NumberRangeFilterBuilder",
            "setShowRangeValues": "fn(showRangeValues: bool) -> +Charts.NumberRangeFilterBuilder",
            "setTicks": "fn(ticks: number) -> +Charts.NumberRangeFilterBuilder"
          }
        },
        "Charts.Orientation": {
          "prototype": {
            "HORIZONTAL": "+Charts.Orientation",
            "VERTICAL": "+Charts.Orientation"
          }
        },
        "Charts.PickerValuesLayout": {
          "prototype": {
            "ASIDE": "+Charts.PickerValuesLayout",
            "BELOW": "+Charts.PickerValuesLayout",
            "BELOW_STACKED": "+Charts.PickerValuesLayout",
            "BELOW_WRAPPING": "+Charts.PickerValuesLayout"
          }
        },
        "Charts.PieChartBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Chart",
            "reverseCategories": "fn() -> +Charts.PieChartBuilder",
            "set3D": "fn() -> +Charts.PieChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +Charts.PieChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +Charts.PieChartBuilder",
            "setDataSourceUrl": "fn(url: string) -> +Charts.PieChartBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.PieChartBuilder",
            "setDataViewDefinition": "fn(dataViewDefinition: Charts.DataViewDefinition) -> +Charts.PieChartBuilder",
            "setDimensions": "fn(width: number, height: number) -> +Charts.PieChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +Charts.PieChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.PieChartBuilder",
            "setOption": "fn(option: string, value: object) -> +Charts.PieChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +Charts.PieChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.PieChartBuilder"
          }
        },
        "Charts.PointStyle": {
          "prototype": {
            "HUGE": "+Charts.PointStyle",
            "LARGE": "+Charts.PointStyle",
            "MEDIUM": "+Charts.PointStyle",
            "NONE": "+Charts.PointStyle",
            "TINY": "+Charts.PointStyle"
          }
        },
        "Charts.Position": {
          "prototype": {
            "BOTTOM": "+Charts.Position",
            "NONE": "+Charts.Position",
            "RIGHT": "+Charts.Position",
            "TOP": "+Charts.Position"
          }
        },
        "Charts.ScatterChartBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Chart",
            "setBackgroundColor": "fn(cssValue: string) -> +Charts.ScatterChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +Charts.ScatterChartBuilder",
            "setDataSourceUrl": "fn(url: string) -> +Charts.ScatterChartBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.ScatterChartBuilder",
            "setDataViewDefinition": "fn(dataViewDefinition: Charts.DataViewDefinition) -> +Charts.ScatterChartBuilder",
            "setDimensions": "fn(width: number, height: number) -> +Charts.ScatterChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +Charts.ScatterChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ScatterChartBuilder",
            "setOption": "fn(option: string, value: object) -> +Charts.ScatterChartBuilder",
            "setPointStyle": "fn(style: Charts.PointStyle) -> +Charts.ScatterChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +Charts.ScatterChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ScatterChartBuilder",
            "setXAxisLogScale": "fn() -> +Charts.ScatterChartBuilder",
            "setXAxisRange": "fn(start: number, end: number) -> +Charts.ScatterChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ScatterChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +Charts.ScatterChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ScatterChartBuilder",
            "setYAxisLogScale": "fn() -> +Charts.ScatterChartBuilder",
            "setYAxisRange": "fn(start: number, end: number) -> +Charts.ScatterChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ScatterChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +Charts.ScatterChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +Charts.ScatterChartBuilder"
          }
        },
        "Charts.StringFilterBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Control",
            "setCaseSensitive": "fn(caseSensitive: bool) -> +Charts.StringFilterBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.StringFilterBuilder",
            "setFilterColumnIndex": "fn(columnIndex: number) -> +Charts.StringFilterBuilder",
            "setFilterColumnLabel": "fn(columnLabel: string) -> +Charts.StringFilterBuilder",
            "setLabel": "fn(label: string) -> +Charts.StringFilterBuilder",
            "setLabelSeparator": "fn(labelSeparator: string) -> +Charts.StringFilterBuilder",
            "setLabelStacking": "fn(orientation: Charts.Orientation) -> +Charts.StringFilterBuilder",
            "setMatchType": "fn(matchType: Charts.MatchType) -> +Charts.StringFilterBuilder",
            "setRealtimeTrigger": "fn(realtimeTrigger: bool) -> +Charts.StringFilterBuilder"
          }
        },
        "Charts.TableChartBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.Chart",
            "enablePaging": "fn(pageSize: number, startPage: number) -> +Charts.TableChartBuilder",
            "enableRtlTable": "fn(rtlEnabled: bool) -> +Charts.TableChartBuilder",
            "enableSorting": "fn(enableSorting: bool) -> +Charts.TableChartBuilder",
            "setDataSourceUrl": "fn(url: string) -> +Charts.TableChartBuilder",
            "setDataTable": "fn(table: DataTableSource) -> +Charts.TableChartBuilder",
            "setDataViewDefinition": "fn(dataViewDefinition: Charts.DataViewDefinition) -> +Charts.TableChartBuilder",
            "setDimensions": "fn(width: number, height: number) -> +Charts.TableChartBuilder",
            "setFirstRowNumber": "fn(number: number) -> +Charts.TableChartBuilder",
            "setInitialSortingAscending": "fn(column: number) -> +Charts.TableChartBuilder",
            "setInitialSortingDescending": "fn(column: number) -> +Charts.TableChartBuilder",
            "setOption": "fn(option: string, value: object) -> +Charts.TableChartBuilder",
            "showRowNumberColumn": "fn(showRowNumber: bool) -> +Charts.TableChartBuilder",
            "useAlternatingRowStyle": "fn(alternate: bool) -> +Charts.TableChartBuilder"
          }
        },
        "Charts.TextStyle": {
          "prototype": {
            "getColor": "fn() -> string",
            "getFontName": "fn() -> string",
            "getFontSize": "fn() -> number"
          }
        },
        "Charts.TextStyleBuilder": {
          "prototype": {
            "build": "fn() -> +Charts.TextStyle",
            "setColor": "fn(cssValue: string) -> +Charts.TextStyleBuilder",
            "setFontName": "fn(fontName: string) -> +Charts.TextStyleBuilder",
            "setFontSize": "fn(fontSize: number) -> +Charts.TextStyleBuilder"
          }
        }
      }
    },
    {
      "!name": "DriveApp",
      "DriveApp": {
        "addFile": "fn(child: DriveApp.File) -> +DriveApp.Folder",
        "addFolder": "fn(child: DriveApp.Folder) -> +DriveApp.Folder",
        "continueFileIterator": "fn(continuationToken: string) -> +DriveApp.FileIterator",
        "continueFolderIterator": "fn(continuationToken: string) -> +DriveApp.FolderIterator",
        "createFile": "fn(name: string, content: string, mimeType: string) -> +DriveApp.File",
        "createFolder": "fn(name: string) -> +DriveApp.Folder",
        "getFileById": "fn(id: string) -> +DriveApp.File",
        "getFiles": "fn() -> +DriveApp.FileIterator",
        "getFilesByName": "fn(name: string) -> +DriveApp.FileIterator",
        "getFilesByType": "fn(mimeType: string) -> +DriveApp.FileIterator",
        "getFolderById": "fn(id: string) -> +DriveApp.Folder",
        "getFolders": "fn() -> +DriveApp.FolderIterator",
        "getFoldersByName": "fn(name: string) -> +DriveApp.FolderIterator",
        "getRootFolder": "fn() -> +DriveApp.Folder",
        "getStorageLimit": "fn() -> number",
        "getStorageUsed": "fn() -> number",
        "getTrashedFiles": "fn() -> +DriveApp.FileIterator",
        "getTrashedFolders": "fn() -> +DriveApp.FolderIterator",
        "removeFile": "fn(child: DriveApp.File) -> +DriveApp.Folder",
        "removeFolder": "fn(child: DriveApp.Folder) -> +DriveApp.Folder",
        "searchFiles": "fn(params: string) -> +DriveApp.FileIterator",
        "searchFolders": "fn(params: string) -> +DriveApp.FolderIterator",
        "Access": "+DriveApp.Access",
        "Permission": "+DriveApp.Permission"
      },
      "!define": {
        "DriveApp.Access": {
          "prototype": {
            "ANYONE": "+DriveApp.Access",
            "ANYONE_WITH_LINK": "+DriveApp.Access",
            "DOMAIN": "+DriveApp.Access",
            "DOMAIN_WITH_LINK": "+DriveApp.Access",
            "PRIVATE": "+DriveApp.Access"
          }
        },
        "DriveApp.File": {
          "prototype": {
            "addCommenter": "fn(user: User) -> +DriveApp.File",
            "addCommenters": "fn(emailAddresses: [string]) -> +DriveApp.File",
            "addEditor": "fn(user: User) -> +DriveApp.File",
            "addEditors": "fn(emailAddresses: [string]) -> +DriveApp.File",
            "addViewer": "fn(user: User) -> +DriveApp.File",
            "addViewers": "fn(emailAddresses: [string]) -> +DriveApp.File",
            "getAccess": "fn(user: User) -> +DriveApp.Permission",
            "getAs": "fn(contentType: string) -> Blob",
            "getBlob": "fn() -> Blob",
            "getDateCreated": "fn() -> +Date",
            "getDescription": "fn() -> string",
            "getDownloadUrl": "fn() -> string",
            "getEditors": "fn() -> [+DriveApp.User]",
            "getId": "fn() -> string",
            "getLastUpdated": "fn() -> +Date",
            "getMimeType": "fn() -> string",
            "getName": "fn() -> string",
            "getOwner": "fn() -> +DriveApp.User",
            "getParents": "fn() -> +DriveApp.FolderIterator",
            "getSharingAccess": "fn() -> +DriveApp.Access",
            "getSharingPermission": "fn() -> +DriveApp.Permission",
            "getSize": "fn() -> number",
            "getThumbnail": "fn() -> Blob",
            "getUrl": "fn() -> string",
            "getViewers": "fn() -> [+DriveApp.User]",
            "isShareableByEditors": "fn() -> bool",
            "isStarred": "fn() -> bool",
            "isTrashed": "fn() -> bool",
            "makeCopy": "fn(name: string, destination: DriveApp.Folder) -> +DriveApp.File",
            "removeCommenter": "fn(user: User) -> +DriveApp.File",
            "removeEditor": "fn(user: User) -> +DriveApp.File",
            "removeViewer": "fn(user: User) -> +DriveApp.File",
            "revokePermissions": "fn(user: User) -> +DriveApp.File",
            "setContent": "fn(content: string) -> +DriveApp.File",
            "setDescription": "fn(description: string) -> +DriveApp.File",
            "setName": "fn(name: string) -> +DriveApp.File",
            "setOwner": "fn(user: User) -> +DriveApp.File",
            "setShareableByEditors": "fn(shareable: bool) -> +DriveApp.File",
            "setSharing": "fn(accessType: DriveApp.Access, permissionType: DriveApp.Permission) -> +DriveApp.File",
            "setStarred": "fn(starred: bool) -> +DriveApp.File",
            "setTrashed": "fn(trashed: bool) -> +DriveApp.File"
          }
        },
        "DriveApp.FileIterator": {
          "prototype": {
            "getContinuationToken": "fn() -> string",
            "hasNext": "fn() -> bool",
            "next": "fn() -> +DriveApp.File"
          }
        },
        "DriveApp.Folder": {
          "prototype": {
            "addEditor": "fn(user: User) -> +DriveApp.Folder",
            "addEditors": "fn(emailAddresses: [string]) -> +DriveApp.Folder",
            "addFile": "fn(child: DriveApp.File) -> +DriveApp.Folder",
            "addFolder": "fn(child: DriveApp.Folder) -> +DriveApp.Folder",
            "addViewer": "fn(user: User) -> +DriveApp.Folder",
            "addViewers": "fn(emailAddresses: [string]) -> +DriveApp.Folder",
            "createFile": "fn(name: string, content: string, mimeType: string) -> +DriveApp.File",
            "createFolder": "fn(name: string) -> +DriveApp.Folder",
            "getAccess": "fn(user: User) -> +DriveApp.Permission",
            "getDateCreated": "fn() -> +Date",
            "getDescription": "fn() -> string",
            "getEditors": "fn() -> [+DriveApp.User]",
            "getFiles": "fn() -> +DriveApp.FileIterator",
            "getFilesByName": "fn(name: string) -> +DriveApp.FileIterator",
            "getFilesByType": "fn(mimeType: string) -> +DriveApp.FileIterator",
            "getFolders": "fn() -> +DriveApp.FolderIterator",
            "getFoldersByName": "fn(name: string) -> +DriveApp.FolderIterator",
            "getId": "fn() -> string",
            "getLastUpdated": "fn() -> +Date",
            "getName": "fn() -> string",
            "getOwner": "fn() -> +DriveApp.User",
            "getParents": "fn() -> +DriveApp.FolderIterator",
            "getSharingAccess": "fn() -> +DriveApp.Access",
            "getSharingPermission": "fn() -> +DriveApp.Permission",
            "getSize": "fn() -> number",
            "getUrl": "fn() -> string",
            "getViewers": "fn() -> [+DriveApp.User]",
            "isShareableByEditors": "fn() -> bool",
            "isStarred": "fn() -> bool",
            "isTrashed": "fn() -> bool",
            "removeEditor": "fn(user: User) -> +DriveApp.Folder",
            "removeFile": "fn(child: DriveApp.File) -> +DriveApp.Folder",
            "removeFolder": "fn(child: DriveApp.Folder) -> +DriveApp.Folder",
            "removeViewer": "fn(user: User) -> +DriveApp.Folder",
            "revokePermissions": "fn(user: User) -> +DriveApp.Folder",
            "searchFiles": "fn(params: string) -> +DriveApp.FileIterator",
            "searchFolders": "fn(params: string) -> +DriveApp.FolderIterator",
            "setDescription": "fn(description: string) -> +DriveApp.Folder",
            "setName": "fn(name: string) -> +DriveApp.Folder",
            "setOwner": "fn(user: User) -> +DriveApp.Folder",
            "setShareableByEditors": "fn(shareable: bool) -> +DriveApp.Folder",
            "setSharing": "fn(accessType: DriveApp.Access, permissionType: DriveApp.Permission) -> +DriveApp.Folder",
            "setStarred": "fn(starred: bool) -> +DriveApp.Folder",
            "setTrashed": "fn(trashed: bool) -> +DriveApp.Folder"
          }
        },
        "DriveApp.FolderIterator": {
          "prototype": {
            "getContinuationToken": "fn() -> string",
            "hasNext": "fn() -> bool",
            "next": "fn() -> +DriveApp.Folder"
          }
        },
        "DriveApp.Permission": {
          "prototype": {
            "COMMENT": "+DriveApp.Permission",
            "EDIT": "+DriveApp.Permission",
            "NONE": "+DriveApp.Permission",
            "ORGANIZER": "+DriveApp.Permission",
            "OWNER": "+DriveApp.Permission",
            "VIEW": "+DriveApp.Permission"
          }
        },
        "DriveApp.User": {
          "prototype": {
            "getDomain": "fn() -> string",
            "getEmail": "fn() -> string",
            "getName": "fn() -> string",
            "getPhotoUrl": "fn() -> string",
            "getUserLoginId": "fn() -> string"
          }
        }
      }
    },
    {
      "!name": "Jdbc",
      "Jdbc": {
        "getCloudSqlConnection": "fn(url: string, userName: string, password: string) -> +Jdbc.JdbcConnection",
        "getConnection": "fn(url: string, userName: string, password: string) -> +Jdbc.JdbcConnection",
        "newDate": "fn(milliseconds: number) -> +Jdbc.JdbcDate",
        "newTime": "fn(milliseconds: number) -> +Jdbc.JdbcTime",
        "newTimestamp": "fn(milliseconds: number) -> +Jdbc.JdbcTimestamp",
        "parseDate": "fn(date: string) -> +Jdbc.JdbcDate",
        "parseTime": "fn(time: string) -> +Jdbc.JdbcTime",
        "parseTimestamp": "fn(timestamp: string) -> +Jdbc.JdbcTimestamp"
      },
      "!define": {
        "Jdbc.JdbcArray": {
          "prototype": {
            "free": "fn()",
            "getArray": "fn(index: number, count: number) -> object",
            "getBaseType": "fn() -> number",
            "getBaseTypeName": "fn() -> string",
            "getResultSet": "fn(index: number, count: number) -> +Jdbc.JdbcResultSet"
          }
        },
        "Jdbc.JdbcBlob": {
          "prototype": {
            "free": "fn()",
            "getAppsScriptBlob": "fn() -> Blob",
            "getAs": "fn(contentType: string) -> Blob",
            "getBytes": "fn(position: number, length: number) -> [number]",
            "length": "fn() -> number",
            "position": "fn(pattern: Jdbc.JdbcBlob, start: number) -> number",
            "setBytes": "fn(position: number, bytes: [number], offset: number, length: number) -> number",
            "truncate": "fn(length: number)"
          }
        },
        "Jdbc.JdbcCallableStatement": {
          "prototype": {
            "addBatch": "fn(sql: string)",
            "cancel": "fn()",
            "clearBatch": "fn()",
            "clearParameters": "fn()",
            "clearWarnings": "fn()",
            "close": "fn()",
            "execute": "fn(sql: string, columnNames: [string]) -> bool",
            "executeBatch": "fn() -> [number]",
            "executeQuery": "fn(sql: string) -> +Jdbc.JdbcResultSet",
            "executeUpdate": "fn(sql: string, columnNames: [string]) -> number",
            "getArray": "fn(parameterName: string) -> +Jdbc.JdbcArray",
            "getBigDecimal": "fn(parameterName: string) -> BigNumber",
            "getBlob": "fn(parameterName: string) -> +Jdbc.JdbcBlob",
            "getBoolean": "fn(parameterName: string) -> bool",
            "getByte": "fn(parameterName: string) -> number",
            "getBytes": "fn(parameterName: string) -> [number]",
            "getClob": "fn(parameterName: string) -> +Jdbc.JdbcClob",
            "getConnection": "fn() -> +Jdbc.JdbcConnection",
            "getDate": "fn(parameterName: string, timeZone: string) -> +Jdbc.JdbcDate",
            "getDouble": "fn(parameterName: string) -> number",
            "getFetchDirection": "fn() -> number",
            "getFetchSize": "fn() -> number",
            "getFloat": "fn(parameterName: string) -> number",
            "getGeneratedKeys": "fn() -> +Jdbc.JdbcResultSet",
            "getInt": "fn(parameterName: string) -> number",
            "getLong": "fn(parameterName: string) -> number",
            "getMaxFieldSize": "fn() -> number",
            "getMaxRows": "fn() -> number",
            "getMetaData": "fn() -> +Jdbc.JdbcResultSetMetaData",
            "getMoreResults": "fn(current: number) -> bool",
            "getNClob": "fn(parameterName: string) -> +Jdbc.JdbcClob",
            "getNString": "fn(parameterName: string) -> string",
            "getObject": "fn(parameterName: string) -> object",
            "getParameterMetaData": "fn() -> +Jdbc.JdbcParameterMetaData",
            "getQueryTimeout": "fn() -> number",
            "getRef": "fn(parameterName: string) -> +Jdbc.JdbcRef",
            "getResultSet": "fn() -> +Jdbc.JdbcResultSet",
            "getResultSetConcurrency": "fn() -> number",
            "getResultSetHoldability": "fn() -> number",
            "getResultSetType": "fn() -> number",
            "getRowId": "fn(parameterName: string) -> +Jdbc.JdbcRowId",
            "getSQLXML": "fn(parameterName: string) -> +Jdbc.JdbcSQLXML",
            "getShort": "fn(parameterName: string) -> number",
            "getString": "fn(parameterName: string) -> string",
            "getTime": "fn(parameterName: string, timeZone: string) -> +Jdbc.JdbcTime",
            "getTimestamp": "fn(parameterName: string, timeZone: string) -> +Jdbc.JdbcTimestamp",
            "getURL": "fn(parameterName: string) -> string",
            "getUpdateCount": "fn() -> number",
            "getWarnings": "fn() -> [string]",
            "isClosed": "fn() -> bool",
            "isPoolable": "fn() -> bool",
            "registerOutParameter": "fn(parameterName: string, sqlType: number, typeName: string)",
            "setArray": "fn(parameterIndex: number, x: Jdbc.JdbcArray)",
            "setBigDecimal": "fn(parameterName: string, x: BigNumber)",
            "setBlob": "fn(parameterName: string, x: Jdbc.JdbcBlob)",
            "setBoolean": "fn(parameterName: string, x: bool)",
            "setByte": "fn(parameterName: string, x: number)",
            "setBytes": "fn(parameterName: string, x: [number])",
            "setClob": "fn(parameterName: string, x: Jdbc.JdbcClob)",
            "setCursorName": "fn(name: string)",
            "setDate": "fn(parameterName: string, x: Jdbc.JdbcDate, timeZone: string)",
            "setDouble": "fn(parameterName: string, x: number)",
            "setEscapeProcessing": "fn(enable: bool)",
            "setFetchDirection": "fn(direction: number)",
            "setFetchSize": "fn(rows: number)",
            "setFloat": "fn(parameterName: string, x: number)",
            "setInt": "fn(parameterName: string, x: number)",
            "setLong": "fn(parameterName: string, x: number)",
            "setMaxFieldSize": "fn(max: number)",
            "setMaxRows": "fn(max: number)",
            "setNClob": "fn(parameterName: string, value: Jdbc.JdbcClob)",
            "setNString": "fn(parameterName: string, value: string)",
            "setNull": "fn(parameterName: string, sqlType: number, typeName: string)",
            "setObject": "fn(parameterName: string, x: object, targetSqlType: number, scale: number)",
            "setPoolable": "fn(poolable: bool)",
            "setQueryTimeout": "fn(seconds: number)",
            "setRef": "fn(parameterIndex: number, x: Jdbc.JdbcRef)",
            "setRowId": "fn(parameterName: string, x: Jdbc.JdbcRowId)",
            "setSQLXML": "fn(parameterName: string, xmlObject: Jdbc.JdbcSQLXML)",
            "setShort": "fn(parameterName: string, x: number)",
            "setString": "fn(parameterName: string, x: string)",
            "setTime": "fn(parameterName: string, x: Jdbc.JdbcTime, timeZone: string)",
            "setTimestamp": "fn(parameterName: string, x: Jdbc.JdbcTimestamp, timeZone: string)",
            "setURL": "fn(parameterName: string, val: string)",
            "wasNull": "fn() -> bool"
          }
        },
        "Jdbc.JdbcClob": {
          "prototype": {
            "free": "fn()",
            "getAppsScriptBlob": "fn() -> Blob",
            "getAs": "fn(contentType: string) -> Blob",
            "getSubString": "fn(position: number, length: number) -> string",
            "length": "fn() -> number",
            "position": "fn(search: string, start: number) -> number",
            "setString": "fn(position: number, value: string, offset: number, len: number) -> number",
            "truncate": "fn(length: number)"
          }
        },
        "Jdbc.JdbcConnection": {
          "prototype": {
            "clearWarnings": "fn()",
            "close": "fn()",
            "commit": "fn()",
            "createArrayOf": "fn(typeName: string, elements: [object]) -> +Jdbc.JdbcArray",
            "createBlob": "fn() -> +Jdbc.JdbcBlob",
            "createClob": "fn() -> +Jdbc.JdbcClob",
            "createNClob": "fn() -> +Jdbc.JdbcClob",
            "createSQLXML": "fn() -> +Jdbc.JdbcSQLXML",
            "createStatement": "fn(resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number) -> +Jdbc.JdbcStatement",
            "createStruct": "fn(typeName: string, attributes: [object]) -> +Jdbc.JdbcStruct",
            "getAutoCommit": "fn() -> bool",
            "getCatalog": "fn() -> string",
            "getHoldability": "fn() -> number",
            "getMetaData": "fn() -> +Jdbc.JdbcDatabaseMetaData",
            "getTransactionIsolation": "fn() -> number",
            "getWarnings": "fn() -> [string]",
            "isClosed": "fn() -> bool",
            "isReadOnly": "fn() -> bool",
            "isValid": "fn(timeout: number) -> bool",
            "nativeSQL": "fn(sql: string) -> string",
            "prepareCall": "fn(sql: string, resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number) -> +Jdbc.JdbcCallableStatement",
            "prepareStatement": "fn(sql: string, resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number) -> +Jdbc.JdbcPreparedStatement",
            "prepareStatementByIndex": "fn(sql: string, indices: [number]) -> +Jdbc.JdbcPreparedStatement",
            "prepareStatementByName": "fn(sql: string, columnNames: [string]) -> +Jdbc.JdbcPreparedStatement",
            "releaseSavepoint": "fn(savepoint: Jdbc.JdbcSavepoint)",
            "rollback": "fn(savepoint: Jdbc.JdbcSavepoint)",
            "setAutoCommit": "fn(autoCommit: bool)",
            "setCatalog": "fn(catalog: string)",
            "setHoldability": "fn(holdability: number)",
            "setReadOnly": "fn(readOnly: bool)",
            "setSavepoint": "fn(name: string) -> +Jdbc.JdbcSavepoint",
            "setTransactionIsolation": "fn(level: number)"
          }
        },
        "Jdbc.JdbcDatabaseMetaData": {
          "prototype": {
            "allProceduresAreCallable": "fn() -> bool",
            "allTablesAreSelectable": "fn() -> bool",
            "autoCommitFailureClosesAllResultSets": "fn() -> bool",
            "dataDefinitionCausesTransactionCommit": "fn() -> bool",
            "dataDefinitionIgnoredInTransactions": "fn() -> bool",
            "deletesAreDetected": "fn(type: number) -> bool",
            "doesMaxRowSizeIncludeBlobs": "fn() -> bool",
            "getAttributes": "fn(catalog: string, schemaPattern: string, typeNamePattern: string, attributeNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getBestRowIdentifier": "fn(catalog: string, schema: string, table: string, scope: number, nullable: bool) -> +Jdbc.JdbcResultSet",
            "getCatalogSeparator": "fn() -> string",
            "getCatalogTerm": "fn() -> string",
            "getCatalogs": "fn() -> +Jdbc.JdbcResultSet",
            "getClientInfoProperties": "fn() -> +Jdbc.JdbcResultSet",
            "getColumnPrivileges": "fn(catalog: string, schema: string, table: string, columnNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getColumns": "fn(catalog: string, schemaPattern: string, tableNamePattern: string, columnNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getConnection": "fn() -> +Jdbc.JdbcConnection",
            "getCrossReference": "fn(parentCatalog: string, parentSchema: string, parentTable: string, foreignCatalog: string, foreignSchema: string, foreignTable: string) -> +Jdbc.JdbcResultSet",
            "getDatabaseMajorVersion": "fn() -> number",
            "getDatabaseMinorVersion": "fn() -> number",
            "getDatabaseProductName": "fn() -> string",
            "getDatabaseProductVersion": "fn() -> string",
            "getDefaultTransactionIsolation": "fn() -> number",
            "getDriverMajorVersion": "fn() -> number",
            "getDriverMinorVersion": "fn() -> number",
            "getDriverName": "fn() -> string",
            "getDriverVersion": "fn() -> string",
            "getExportedKeys": "fn(catalog: string, schema: string, table: string) -> +Jdbc.JdbcResultSet",
            "getExtraNameCharacters": "fn() -> string",
            "getFunctionColumns": "fn(catalog: string, schemaPattern: string, functionNamePattern: string, columnNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getFunctions": "fn(catalog: string, schemaPattern: string, functionNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getIdentifierQuoteString": "fn() -> string",
            "getImportedKeys": "fn(catalog: string, schema: string, table: string) -> +Jdbc.JdbcResultSet",
            "getIndexInfo": "fn(catalog: string, schema: string, table: string, unique: bool, approximate: bool) -> +Jdbc.JdbcResultSet",
            "getJDBCMajorVersion": "fn() -> number",
            "getJDBCMinorVersion": "fn() -> number",
            "getMaxBinaryLiteralLength": "fn() -> number",
            "getMaxCatalogNameLength": "fn() -> number",
            "getMaxCharLiteralLength": "fn() -> number",
            "getMaxColumnNameLength": "fn() -> number",
            "getMaxColumnsInGroupBy": "fn() -> number",
            "getMaxColumnsInIndex": "fn() -> number",
            "getMaxColumnsInOrderBy": "fn() -> number",
            "getMaxColumnsInSelect": "fn() -> number",
            "getMaxColumnsInTable": "fn() -> number",
            "getMaxConnections": "fn() -> number",
            "getMaxCursorNameLength": "fn() -> number",
            "getMaxIndexLength": "fn() -> number",
            "getMaxProcedureNameLength": "fn() -> number",
            "getMaxRowSize": "fn() -> number",
            "getMaxSchemaNameLength": "fn() -> number",
            "getMaxStatementLength": "fn() -> number",
            "getMaxStatements": "fn() -> number",
            "getMaxTableNameLength": "fn() -> number",
            "getMaxTablesInSelect": "fn() -> number",
            "getMaxUserNameLength": "fn() -> number",
            "getNumericFunctions": "fn() -> string",
            "getPrimaryKeys": "fn(catalog: string, schema: string, table: string) -> +Jdbc.JdbcResultSet",
            "getProcedureColumns": "fn(catalog: string, schemaPattern: string, procedureNamePattern: string, columnNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getProcedureTerm": "fn() -> string",
            "getProcedures": "fn(catalog: string, schemaPattern: string, procedureNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getResultSetHoldability": "fn() -> number",
            "getRowIdLifetime": "fn() -> number",
            "getSQLKeywords": "fn() -> string",
            "getSQLStateType": "fn() -> number",
            "getSchemaTerm": "fn() -> string",
            "getSchemas": "fn(catalog: string, schemaPattern: string) -> +Jdbc.JdbcResultSet",
            "getSearchStringEscape": "fn() -> string",
            "getStringFunctions": "fn() -> string",
            "getSuperTables": "fn(catalog: string, schemaPattern: string, tableNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getSuperTypes": "fn(catalog: string, schemaPattern: string, typeNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getSystemFunctions": "fn() -> string",
            "getTablePrivileges": "fn(catalog: string, schemaPattern: string, tableNamePattern: string) -> +Jdbc.JdbcResultSet",
            "getTableTypes": "fn() -> +Jdbc.JdbcResultSet",
            "getTables": "fn(catalog: string, schemaPattern: string, tableNamePattern: string, types: [string]) -> +Jdbc.JdbcResultSet",
            "getTimeDateFunctions": "fn() -> string",
            "getTypeInfo": "fn() -> +Jdbc.JdbcResultSet",
            "getUDTs": "fn(catalog: string, schemaPattern: string, typeNamePattern: string, types: [number]) -> +Jdbc.JdbcResultSet",
            "getURL": "fn() -> string",
            "getUserName": "fn() -> string",
            "getVersionColumns": "fn(catalog: string, schema: string, table: string) -> +Jdbc.JdbcResultSet",
            "insertsAreDetected": "fn(type: number) -> bool",
            "isCatalogAtStart": "fn() -> bool",
            "isReadOnly": "fn() -> bool",
            "locatorsUpdateCopy": "fn() -> bool",
            "nullPlusNonNullIsNull": "fn() -> bool",
            "nullsAreSortedAtEnd": "fn() -> bool",
            "nullsAreSortedAtStart": "fn() -> bool",
            "nullsAreSortedHigh": "fn() -> bool",
            "nullsAreSortedLow": "fn() -> bool",
            "othersDeletesAreVisible": "fn(type: number) -> bool",
            "othersInsertsAreVisible": "fn(type: number) -> bool",
            "othersUpdatesAreVisible": "fn(type: number) -> bool",
            "ownDeletesAreVisible": "fn(type: number) -> bool",
            "ownInsertsAreVisible": "fn(type: number) -> bool",
            "ownUpdatesAreVisible": "fn(type: number) -> bool",
            "storesLowerCaseIdentifiers": "fn() -> bool",
            "storesLowerCaseQuotedIdentifiers": "fn() -> bool",
            "storesMixedCaseIdentifiers": "fn() -> bool",
            "storesMixedCaseQuotedIdentifiers": "fn() -> bool",
            "storesUpperCaseIdentifiers": "fn() -> bool",
            "storesUpperCaseQuotedIdentifiers": "fn() -> bool",
            "supportsANSI92EntryLevelSQL": "fn() -> bool",
            "supportsANSI92FullSQL": "fn() -> bool",
            "supportsANSI92IntermediateSQL": "fn() -> bool",
            "supportsAlterTableWithAddColumn": "fn() -> bool",
            "supportsAlterTableWithDropColumn": "fn() -> bool",
            "supportsBatchUpdates": "fn() -> bool",
            "supportsCatalogsInDataManipulation": "fn() -> bool",
            "supportsCatalogsInIndexDefinitions": "fn() -> bool",
            "supportsCatalogsInPrivilegeDefinitions": "fn() -> bool",
            "supportsCatalogsInProcedureCalls": "fn() -> bool",
            "supportsCatalogsInTableDefinitions": "fn() -> bool",
            "supportsColumnAliasing": "fn() -> bool",
            "supportsConvert": "fn(fromType: number, toType: number) -> bool",
            "supportsCoreSQLGrammar": "fn() -> bool",
            "supportsCorrelatedSubqueries": "fn() -> bool",
            "supportsDataDefinitionAndDataManipulationTransactions": "fn() -> bool",
            "supportsDataManipulationTransactionsOnly": "fn() -> bool",
            "supportsDifferentTableCorrelationNames": "fn() -> bool",
            "supportsExpressionsInOrderBy": "fn() -> bool",
            "supportsExtendedSQLGrammar": "fn() -> bool",
            "supportsFullOuterJoins": "fn() -> bool",
            "supportsGetGeneratedKeys": "fn() -> bool",
            "supportsGroupBy": "fn() -> bool",
            "supportsGroupByBeyondSelect": "fn() -> bool",
            "supportsGroupByUnrelated": "fn() -> bool",
            "supportsIntegrityEnhancementFacility": "fn() -> bool",
            "supportsLikeEscapeClause": "fn() -> bool",
            "supportsLimitedOuterJoins": "fn() -> bool",
            "supportsMinimumSQLGrammar": "fn() -> bool",
            "supportsMixedCaseIdentifiers": "fn() -> bool",
            "supportsMixedCaseQuotedIdentifiers": "fn() -> bool",
            "supportsMultipleOpenResults": "fn() -> bool",
            "supportsMultipleResultSets": "fn() -> bool",
            "supportsMultipleTransactions": "fn() -> bool",
            "supportsNamedParameters": "fn() -> bool",
            "supportsNonNullableColumns": "fn() -> bool",
            "supportsOpenCursorsAcrossCommit": "fn() -> bool",
            "supportsOpenCursorsAcrossRollback": "fn() -> bool",
            "supportsOpenStatementsAcrossCommit": "fn() -> bool",
            "supportsOpenStatementsAcrossRollback": "fn() -> bool",
            "supportsOrderByUnrelated": "fn() -> bool",
            "supportsOuterJoins": "fn() -> bool",
            "supportsPositionedDelete": "fn() -> bool",
            "supportsPositionedUpdate": "fn() -> bool",
            "supportsResultSetConcurrency": "fn(type: number, concurrency: number) -> bool",
            "supportsResultSetHoldability": "fn(holdability: number) -> bool",
            "supportsResultSetType": "fn(type: number) -> bool",
            "supportsSavepoints": "fn() -> bool",
            "supportsSchemasInDataManipulation": "fn() -> bool",
            "supportsSchemasInIndexDefinitions": "fn() -> bool",
            "supportsSchemasInPrivilegeDefinitions": "fn() -> bool",
            "supportsSchemasInProcedureCalls": "fn() -> bool",
            "supportsSchemasInTableDefinitions": "fn() -> bool",
            "supportsSelectForUpdate": "fn() -> bool",
            "supportsStatementPooling": "fn() -> bool",
            "supportsStoredFunctionsUsingCallSyntax": "fn() -> bool",
            "supportsStoredProcedures": "fn() -> bool",
            "supportsSubqueriesInComparisons": "fn() -> bool",
            "supportsSubqueriesInExists": "fn() -> bool",
            "supportsSubqueriesInIns": "fn() -> bool",
            "supportsSubqueriesInQuantifieds": "fn() -> bool",
            "supportsTableCorrelationNames": "fn() -> bool",
            "supportsTransactionIsolationLevel": "fn(level: number) -> bool",
            "supportsTransactions": "fn() -> bool",
            "supportsUnion": "fn() -> bool",
            "supportsUnionAll": "fn() -> bool",
            "updatesAreDetected": "fn(type: number) -> bool",
            "usesLocalFilePerTable": "fn() -> bool",
            "usesLocalFiles": "fn() -> bool"
          }
        },
        "Jdbc.JdbcDate": {
          "prototype": {
            "after": "fn(when: Jdbc.JdbcDate) -> bool",
            "before": "fn(when: Jdbc.JdbcDate) -> bool",
            "getDate": "fn() -> number",
            "getMonth": "fn() -> number",
            "getTime": "fn() -> number",
            "getYear": "fn() -> number",
            "setDate": "fn(date: number)",
            "setMonth": "fn(month: number)",
            "setTime": "fn(milliseconds: number)",
            "setYear": "fn(year: number)"
          }
        },
        "Jdbc.JdbcParameterMetaData": {
          "prototype": {
            "getParameterClassName": "fn(param: number) -> string",
            "getParameterCount": "fn() -> number",
            "getParameterMode": "fn(param: number) -> number",
            "getParameterType": "fn(param: number) -> number",
            "getParameterTypeName": "fn(param: number) -> string",
            "getPrecision": "fn(param: number) -> number",
            "getScale": "fn(param: number) -> number",
            "isNullable": "fn(param: number) -> number",
            "isSigned": "fn(param: number) -> bool"
          }
        },
        "Jdbc.JdbcPreparedStatement": {
          "prototype": {
            "addBatch": "fn(sql: string)",
            "cancel": "fn()",
            "clearBatch": "fn()",
            "clearParameters": "fn()",
            "clearWarnings": "fn()",
            "close": "fn()",
            "execute": "fn(sql: string, columnNames: [string]) -> bool",
            "executeBatch": "fn() -> [number]",
            "executeQuery": "fn(sql: string) -> +Jdbc.JdbcResultSet",
            "executeUpdate": "fn(sql: string, columnNames: [string]) -> number",
            "getConnection": "fn() -> +Jdbc.JdbcConnection",
            "getFetchDirection": "fn() -> number",
            "getFetchSize": "fn() -> number",
            "getGeneratedKeys": "fn() -> +Jdbc.JdbcResultSet",
            "getMaxFieldSize": "fn() -> number",
            "getMaxRows": "fn() -> number",
            "getMetaData": "fn() -> +Jdbc.JdbcResultSetMetaData",
            "getMoreResults": "fn(current: number) -> bool",
            "getParameterMetaData": "fn() -> +Jdbc.JdbcParameterMetaData",
            "getQueryTimeout": "fn() -> number",
            "getResultSet": "fn() -> +Jdbc.JdbcResultSet",
            "getResultSetConcurrency": "fn() -> number",
            "getResultSetHoldability": "fn() -> number",
            "getResultSetType": "fn() -> number",
            "getUpdateCount": "fn() -> number",
            "getWarnings": "fn() -> [string]",
            "isClosed": "fn() -> bool",
            "isPoolable": "fn() -> bool",
            "setArray": "fn(parameterIndex: number, x: Jdbc.JdbcArray)",
            "setBigDecimal": "fn(parameterIndex: number, x: BigNumber)",
            "setBlob": "fn(parameterIndex: number, x: Jdbc.JdbcBlob)",
            "setBoolean": "fn(parameterIndex: number, x: bool)",
            "setByte": "fn(parameterIndex: number, x: number)",
            "setBytes": "fn(parameterIndex: number, x: [number])",
            "setClob": "fn(parameterIndex: number, x: Jdbc.JdbcClob)",
            "setCursorName": "fn(name: string)",
            "setDate": "fn(parameterIndex: number, x: Jdbc.JdbcDate, timeZone: string)",
            "setDouble": "fn(parameterIndex: number, x: number)",
            "setEscapeProcessing": "fn(enable: bool)",
            "setFetchDirection": "fn(direction: number)",
            "setFetchSize": "fn(rows: number)",
            "setFloat": "fn(parameterIndex: number, x: number)",
            "setInt": "fn(parameterIndex: number, x: number)",
            "setLong": "fn(parameterIndex: number, x: number)",
            "setMaxFieldSize": "fn(max: number)",
            "setMaxRows": "fn(max: number)",
            "setNClob": "fn(parameterIndex: number, x: Jdbc.JdbcClob)",
            "setNString": "fn(parameterIndex: number, x: string)",
            "setNull": "fn(parameterIndex: number, sqlType: number, typeName: string)",
            "setObject": "fn(parameterIndex: number, x: object, targetSqlType: number, scaleOrLength: number)",
            "setPoolable": "fn(poolable: bool)",
            "setQueryTimeout": "fn(seconds: number)",
            "setRef": "fn(parameterIndex: number, x: Jdbc.JdbcRef)",
            "setRowId": "fn(parameterIndex: number, x: Jdbc.JdbcRowId)",
            "setSQLXML": "fn(parameterIndex: number, x: Jdbc.JdbcSQLXML)",
            "setShort": "fn(parameterIndex: number, x: number)",
            "setString": "fn(parameterIndex: number, x: string)",
            "setTime": "fn(parameterIndex: number, x: Jdbc.JdbcTime, timeZone: string)",
            "setTimestamp": "fn(parameterIndex: number, x: Jdbc.JdbcTimestamp, timeZone: string)",
            "setURL": "fn(parameterIndex: number, x: string)"
          }
        },
        "Jdbc.JdbcRef": {
          "prototype": {
            "getBaseTypeName": "fn() -> string",
            "getObject": "fn() -> object",
            "setObject": "fn(object: object)"
          }
        },
        "Jdbc.JdbcResultSet": {
          "prototype": {
            "absolute": "fn(row: number) -> bool",
            "afterLast": "fn()",
            "beforeFirst": "fn()",
            "cancelRowUpdates": "fn()",
            "clearWarnings": "fn()",
            "close": "fn()",
            "deleteRow": "fn()",
            "findColumn": "fn(columnLabel: string) -> number",
            "first": "fn() -> bool",
            "getArray": "fn(columnLabel: string) -> +Jdbc.JdbcArray",
            "getBigDecimal": "fn(columnLabel: string) -> BigNumber",
            "getBlob": "fn(columnLabel: string) -> +Jdbc.JdbcBlob",
            "getBoolean": "fn(columnLabel: string) -> bool",
            "getByte": "fn(columnLabel: string) -> number",
            "getBytes": "fn(columnLabel: string) -> [number]",
            "getClob": "fn(columnLabel: string) -> +Jdbc.JdbcClob",
            "getConcurrency": "fn() -> number",
            "getCursorName": "fn() -> string",
            "getDate": "fn(columnLabel: string, timeZone: string) -> +Jdbc.JdbcDate",
            "getDouble": "fn(columnLabel: string) -> number",
            "getFetchDirection": "fn() -> number",
            "getFetchSize": "fn() -> number",
            "getFloat": "fn(columnLabel: string) -> number",
            "getHoldability": "fn() -> number",
            "getInt": "fn(columnLabel: string) -> number",
            "getLong": "fn(columnLabel: string) -> number",
            "getMetaData": "fn() -> +Jdbc.JdbcResultSetMetaData",
            "getNClob": "fn(columnLabel: string) -> +Jdbc.JdbcClob",
            "getNString": "fn(columnLabel: string) -> string",
            "getObject": "fn(columnLabel: string) -> object",
            "getRef": "fn(columnLabel: string) -> +Jdbc.JdbcRef",
            "getRow": "fn() -> number",
            "getRowId": "fn(columnLabel: string) -> +Jdbc.JdbcRowId",
            "getSQLXML": "fn(columnLabel: string) -> +Jdbc.JdbcSQLXML",
            "getShort": "fn(columnLabel: string) -> number",
            "getStatement": "fn() -> +Jdbc.JdbcStatement",
            "getString": "fn(columnLabel: string) -> string",
            "getTime": "fn(columnLabel: string, timeZone: string) -> +Jdbc.JdbcTime",
            "getTimestamp": "fn(columnLabel: string, timeZone: string) -> +Jdbc.JdbcTimestamp",
            "getType": "fn() -> number",
            "getURL": "fn(columnLabel: string) -> string",
            "getWarnings": "fn() -> [string]",
            "insertRow": "fn()",
            "isAfterLast": "fn() -> bool",
            "isBeforeFirst": "fn() -> bool",
            "isClosed": "fn() -> bool",
            "isFirst": "fn() -> bool",
            "isLast": "fn() -> bool",
            "last": "fn() -> bool",
            "moveToCurrentRow": "fn()",
            "moveToInsertRow": "fn()",
            "next": "fn() -> bool",
            "previous": "fn() -> bool",
            "refreshRow": "fn()",
            "relative": "fn(rows: number) -> bool",
            "rowDeleted": "fn() -> bool",
            "rowInserted": "fn() -> bool",
            "rowUpdated": "fn() -> bool",
            "setFetchDirection": "fn(direction: number)",
            "setFetchSize": "fn(rows: number)",
            "updateArray": "fn(columnLabel: string, x: Jdbc.JdbcArray)",
            "updateBigDecimal": "fn(columnLabel: string, x: BigNumber)",
            "updateBlob": "fn(columnLabel: string, x: Jdbc.JdbcBlob)",
            "updateBoolean": "fn(columnLabel: string, x: bool)",
            "updateByte": "fn(columnLabel: string, x: number)",
            "updateBytes": "fn(columnLabel: string, x: [number])",
            "updateClob": "fn(columnLabel: string, x: Jdbc.JdbcClob)",
            "updateDate": "fn(columnLabel: string, x: Jdbc.JdbcDate)",
            "updateDouble": "fn(columnLabel: string, x: number)",
            "updateFloat": "fn(columnLabel: string, x: number)",
            "updateInt": "fn(columnLabel: string, x: number)",
            "updateLong": "fn(columnLabel: string, x: number)",
            "updateNClob": "fn(columnLabel: string, x: Jdbc.JdbcClob)",
            "updateNString": "fn(columnLabel: string, x: string)",
            "updateNull": "fn(columnLabel: string)",
            "updateObject": "fn(columnLabel: string, x: object, scaleOrLength: number)",
            "updateRef": "fn(columnLabel: string, x: Jdbc.JdbcRef)",
            "updateRow": "fn()",
            "updateRowId": "fn(columnLabel: string, x: Jdbc.JdbcRowId)",
            "updateSQLXML": "fn(columnLabel: string, x: Jdbc.JdbcSQLXML)",
            "updateShort": "fn(columnLabel: string, x: number)",
            "updateString": "fn(columnLabel: string, x: string)",
            "updateTime": "fn(columnLabel: string, x: Jdbc.JdbcTime)",
            "updateTimestamp": "fn(columnLabel: string, x: Jdbc.JdbcTimestamp)",
            "wasNull": "fn() -> bool"
          }
        },
        "Jdbc.JdbcResultSetMetaData": {
          "prototype": {
            "getCatalogName": "fn(column: number) -> string",
            "getColumnClassName": "fn(column: number) -> string",
            "getColumnCount": "fn() -> number",
            "getColumnDisplaySize": "fn(column: number) -> number",
            "getColumnLabel": "fn(column: number) -> string",
            "getColumnName": "fn(column: number) -> string",
            "getColumnType": "fn(column: number) -> number",
            "getColumnTypeName": "fn(column: number) -> string",
            "getPrecision": "fn(column: number) -> number",
            "getScale": "fn(column: number) -> number",
            "getSchemaName": "fn(column: number) -> string",
            "getTableName": "fn(column: number) -> string",
            "isAutoIncrement": "fn(column: number) -> bool",
            "isCaseSensitive": "fn(column: number) -> bool",
            "isCurrency": "fn(column: number) -> bool",
            "isDefinitelyWritable": "fn(column: number) -> bool",
            "isNullable": "fn(column: number) -> number",
            "isReadOnly": "fn(column: number) -> bool",
            "isSearchable": "fn(column: number) -> bool",
            "isSigned": "fn(column: number) -> bool",
            "isWritable": "fn(column: number) -> bool"
          }
        },
        "Jdbc.JdbcRowId": {
          "prototype": {
            "getBytes": "fn() -> [number]"
          }
        },
        "Jdbc.JdbcSQLXML": {
          "prototype": {
            "free": "fn()",
            "getString": "fn() -> string",
            "setString": "fn(value: string)"
          }
        },
        "Jdbc.JdbcSavepoint": {
          "prototype": {
            "getSavepointId": "fn() -> number",
            "getSavepointName": "fn() -> string"
          }
        },
        "Jdbc.JdbcStatement": {
          "prototype": {
            "addBatch": "fn(sql: string)",
            "cancel": "fn()",
            "clearBatch": "fn()",
            "clearWarnings": "fn()",
            "close": "fn()",
            "execute": "fn(sql: string, columnNames: [string]) -> bool",
            "executeBatch": "fn() -> [number]",
            "executeQuery": "fn(sql: string) -> +Jdbc.JdbcResultSet",
            "executeUpdate": "fn(sql: string, columnNames: [string]) -> number",
            "getConnection": "fn() -> +Jdbc.JdbcConnection",
            "getFetchDirection": "fn() -> number",
            "getFetchSize": "fn() -> number",
            "getGeneratedKeys": "fn() -> +Jdbc.JdbcResultSet",
            "getMaxFieldSize": "fn() -> number",
            "getMaxRows": "fn() -> number",
            "getMoreResults": "fn(current: number) -> bool",
            "getQueryTimeout": "fn() -> number",
            "getResultSet": "fn() -> +Jdbc.JdbcResultSet",
            "getResultSetConcurrency": "fn() -> number",
            "getResultSetHoldability": "fn() -> number",
            "getResultSetType": "fn() -> number",
            "getUpdateCount": "fn() -> number",
            "getWarnings": "fn() -> [string]",
            "isClosed": "fn() -> bool",
            "isPoolable": "fn() -> bool",
            "setCursorName": "fn(name: string)",
            "setEscapeProcessing": "fn(enable: bool)",
            "setFetchDirection": "fn(direction: number)",
            "setFetchSize": "fn(rows: number)",
            "setMaxFieldSize": "fn(max: number)",
            "setMaxRows": "fn(max: number)",
            "setPoolable": "fn(poolable: bool)",
            "setQueryTimeout": "fn(seconds: number)"
          }
        },
        "Jdbc.JdbcStruct": {
          "prototype": {
            "getAttributes": "fn() -> [object]",
            "getSQLTypeName": "fn() -> string"
          }
        },
        "Jdbc.JdbcTime": {
          "prototype": {
            "after": "fn(when: Jdbc.JdbcTime) -> bool",
            "before": "fn(when: Jdbc.JdbcTime) -> bool",
            "getHours": "fn() -> number",
            "getMinutes": "fn() -> number",
            "getSeconds": "fn() -> number",
            "getTime": "fn() -> number",
            "setHours": "fn(hours: number)",
            "setMinutes": "fn(minutes: number)",
            "setSeconds": "fn(seconds: number)",
            "setTime": "fn(milliseconds: number)"
          }
        },
        "Jdbc.JdbcTimestamp": {
          "prototype": {
            "after": "fn(when: Jdbc.JdbcTimestamp) -> bool",
            "before": "fn(when: Jdbc.JdbcTimestamp) -> bool",
            "getDate": "fn() -> number",
            "getHours": "fn() -> number",
            "getMinutes": "fn() -> number",
            "getMonth": "fn() -> number",
            "getNanos": "fn() -> number",
            "getSeconds": "fn() -> number",
            "getTime": "fn() -> number",
            "getYear": "fn() -> number",
            "setDate": "fn(date: number)",
            "setHours": "fn(hours: number)",
            "setMinutes": "fn(minutes: number)",
            "setMonth": "fn(month: number)",
            "setNanos": "fn(nanoseconds: number)",
            "setSeconds": "fn(seconds: number)",
            "setTime": "fn(milliseconds: number)",
            "setYear": "fn(year: number)"
          }
        }
      }
    },
    {
      "!name": "Logger",
      "Logger": {
        "clear": "fn()",
        "getLog": "fn() -> string",
        "log": "fn(format: string, values: object...) -> Logger"
      }
    },
    {
      "!name": "MailApp",
      "MailApp": {
        "getRemainingDailyQuota": "fn() -> number",
        "sendEmail": "fn(to: string, replyTo: string, subject: string, body: string)"
      }
    },
    {
      "!name": "MimeType",
      "MimeType": {
        "BMP": "string",
        "CSS": "string",
        "CSV": "string",
        "FOLDER": "string",
        "GIF": "string",
        "GOOGLE_APPS_SCRIPT": "string",
        "GOOGLE_DOCS": "string",
        "GOOGLE_DRAWINGS": "string",
        "GOOGLE_FORMS": "string",
        "GOOGLE_SHEETS": "string",
        "GOOGLE_SITES": "string",
        "GOOGLE_SLIDES": "string",
        "HTML": "string",
        "JAVASCRIPT": "string",
        "JPEG": "string",
        "MICROSOFT_EXCEL": "string",
        "MICROSOFT_EXCEL_LEGACY": "string",
        "MICROSOFT_POWERPOINT": "string",
        "MICROSOFT_POWERPOINT_LEGACY": "string",
        "MICROSOFT_WORD": "string",
        "MICROSOFT_WORD_LEGACY": "string",
        "OPENDOCUMENT_GRAPHICS": "string",
        "OPENDOCUMENT_PRESENTATION": "string",
        "OPENDOCUMENT_SPREADSHEET": "string",
        "OPENDOCUMENT_TEXT": "string",
        "PDF": "string",
        "PLAIN_TEXT": "string",
        "PNG": "string",
        "RTF": "string",
        "SVG": "string",
        "ZIP": "string"
      }
    },
    {
      "!name": "SpreadsheetApp",
      "SpreadsheetApp": {
        "create": "fn(name: string, rows: number, columns: number) -> +SpreadsheetApp.Spreadsheet",
        "enableAllDataSourcesExecution": "fn()",
        "enableBigQueryExecution": "fn()",
        "flush": "fn()",
        "getActive": "fn() -> +SpreadsheetApp.Spreadsheet",
        "getActiveRange": "fn() -> +SpreadsheetApp.Range",
        "getActiveRangeList": "fn() -> +SpreadsheetApp.RangeList",
        "getActiveSheet": "fn() -> +SpreadsheetApp.Sheet",
        "getActiveSpreadsheet": "fn() -> +SpreadsheetApp.Spreadsheet",
        "getCurrentCell": "fn() -> +SpreadsheetApp.Range",
        "getSelection": "fn() -> +SpreadsheetApp.Selection",
        "getUi": "fn() -> Ui",
        "newConditionalFormatRule": "fn() -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
        "newDataSourceSpec": "fn() -> +SpreadsheetApp.DataSourceSpecBuilder",
        "newDataValidation": "fn() -> +SpreadsheetApp.DataValidationBuilder",
        "newFilterCriteria": "fn() -> +SpreadsheetApp.FilterCriteriaBuilder",
        "newRichTextValue": "fn() -> +SpreadsheetApp.RichTextValueBuilder",
        "newTextStyle": "fn() -> +SpreadsheetApp.TextStyleBuilder",
        "open": "fn(file: DriveApp.File) -> +SpreadsheetApp.Spreadsheet",
        "openById": "fn(id: string) -> +SpreadsheetApp.Spreadsheet",
        "openByUrl": "fn(url: string) -> +SpreadsheetApp.Spreadsheet",
        "setActiveRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.Range",
        "setActiveRangeList": "fn(rangeList: SpreadsheetApp.RangeList) -> +SpreadsheetApp.RangeList",
        "setActiveSheet": "fn(sheet: SpreadsheetApp.Sheet, restoreSelection: bool) -> +SpreadsheetApp.Sheet",
        "setActiveSpreadsheet": "fn(newActiveSpreadsheet: SpreadsheetApp.Spreadsheet)",
        "setCurrentCell": "fn(cell: SpreadsheetApp.Range) -> +SpreadsheetApp.Range",
        "AutoFillSeries": "+SpreadsheetApp.AutoFillSeries",
        "BandingTheme": "+SpreadsheetApp.BandingTheme",
        "BooleanCriteria": "+SpreadsheetApp.BooleanCriteria",
        "BorderStyle": "+SpreadsheetApp.BorderStyle",
        "CopyPasteType": "+SpreadsheetApp.CopyPasteType",
        "DataExecutionErrorCode": "+SpreadsheetApp.DataExecutionErrorCode",
        "DataExecutionState": "+SpreadsheetApp.DataExecutionState",
        "DataSourceParameterType": "+SpreadsheetApp.DataSourceParameterType",
        "DataSourceType": "+SpreadsheetApp.DataSourceType",
        "DataValidationCriteria": "+SpreadsheetApp.DataValidationCriteria",
        "DeveloperMetadataLocationType": "+SpreadsheetApp.DeveloperMetadataLocationType",
        "DeveloperMetadataVisibility": "+SpreadsheetApp.DeveloperMetadataVisibility",
        "Dimension": "+SpreadsheetApp.Dimension",
        "Direction": "+SpreadsheetApp.Direction",
        "GroupControlTogglePosition": "+SpreadsheetApp.GroupControlTogglePosition",
        "InterpolationType": "+SpreadsheetApp.InterpolationType",
        "PivotTableSummarizeFunction": "+SpreadsheetApp.PivotTableSummarizeFunction",
        "PivotValueDisplayType": "+SpreadsheetApp.PivotValueDisplayType",
        "ProtectionType": "+SpreadsheetApp.ProtectionType",
        "RecalculationInterval": "+SpreadsheetApp.RecalculationInterval",
        "RelativeDate": "+SpreadsheetApp.RelativeDate",
        "SheetType": "+SpreadsheetApp.SheetType",
        "TextDirection": "+SpreadsheetApp.TextDirection",
        "TextToColumnsDelimiter": "+SpreadsheetApp.TextToColumnsDelimiter",
        "WrapStrategy": "+SpreadsheetApp.WrapStrategy"
      },
      "!define": {
        "SpreadsheetApp.AutoFillSeries": {
          "prototype": {
            "ALTERNATE_SERIES": "+SpreadsheetApp.AutoFillSeries",
            "DEFAULT_SERIES": "+SpreadsheetApp.AutoFillSeries"
          }
        },
        "SpreadsheetApp.Banding": {
          "prototype": {
            "copyTo": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.Banding",
            "getFirstColumnColor": "fn() -> string",
            "getFirstRowColor": "fn() -> string",
            "getFooterColumnColor": "fn() -> string",
            "getFooterRowColor": "fn() -> string",
            "getHeaderColumnColor": "fn() -> string",
            "getHeaderRowColor": "fn() -> string",
            "getRange": "fn() -> +SpreadsheetApp.Range",
            "getSecondColumnColor": "fn() -> string",
            "getSecondRowColor": "fn() -> string",
            "remove": "fn()",
            "setFirstColumnColor": "fn(color: string) -> +SpreadsheetApp.Banding",
            "setFirstRowColor": "fn(color: string) -> +SpreadsheetApp.Banding",
            "setFooterColumnColor": "fn(color: string) -> +SpreadsheetApp.Banding",
            "setFooterRowColor": "fn(color: string) -> +SpreadsheetApp.Banding",
            "setHeaderColumnColor": "fn(color: string) -> +SpreadsheetApp.Banding",
            "setHeaderRowColor": "fn(color: string) -> +SpreadsheetApp.Banding",
            "setRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.Banding",
            "setSecondColumnColor": "fn(color: string) -> +SpreadsheetApp.Banding",
            "setSecondRowColor": "fn(color: string) -> +SpreadsheetApp.Banding"
          }
        },
        "SpreadsheetApp.BandingTheme": {
          "prototype": {
            "BLUE": "+SpreadsheetApp.BandingTheme",
            "BROWN": "+SpreadsheetApp.BandingTheme",
            "CYAN": "+SpreadsheetApp.BandingTheme",
            "GREEN": "+SpreadsheetApp.BandingTheme",
            "GREY": "+SpreadsheetApp.BandingTheme",
            "INDIGO": "+SpreadsheetApp.BandingTheme",
            "LIGHT_GREEN": "+SpreadsheetApp.BandingTheme",
            "LIGHT_GREY": "+SpreadsheetApp.BandingTheme",
            "ORANGE": "+SpreadsheetApp.BandingTheme",
            "PINK": "+SpreadsheetApp.BandingTheme",
            "TEAL": "+SpreadsheetApp.BandingTheme",
            "YELLOW": "+SpreadsheetApp.BandingTheme"
          }
        },
        "SpreadsheetApp.BigQueryDataSourceSpec": {
          "prototype": {
            "copy": "fn() -> +SpreadsheetApp.DataSourceSpecBuilder",
            "getParameters": "fn() -> [+SpreadsheetApp.DataSourceParameter]",
            "getProjectId": "fn() -> string",
            "getRawQuery": "fn() -> string",
            "getType": "fn() -> +SpreadsheetApp.DataSourceType"
          }
        },
        "SpreadsheetApp.BigQueryDataSourceSpecBuilder": {
          "prototype": {
            "build": "fn() -> +SpreadsheetApp.DataSourceSpec",
            "copy": "fn() -> +SpreadsheetApp.DataSourceSpecBuilder",
            "getParameters": "fn() -> [+SpreadsheetApp.DataSourceParameter]",
            "getProjectId": "fn() -> string",
            "getRawQuery": "fn() -> string",
            "getType": "fn() -> +SpreadsheetApp.DataSourceType",
            "removeAllParameters": "fn() -> +SpreadsheetApp.BigQueryDataSourceSpecBuilder",
            "removeParameter": "fn(parameterName: string) -> +SpreadsheetApp.BigQueryDataSourceSpecBuilder",
            "setParameterFromCell": "fn(parameterName: string, sourceCell: string) -> +SpreadsheetApp.BigQueryDataSourceSpecBuilder",
            "setProjectId": "fn(projectId: string) -> +SpreadsheetApp.BigQueryDataSourceSpecBuilder",
            "setRawQuery": "fn(rawQuery: string) -> +SpreadsheetApp.BigQueryDataSourceSpecBuilder"
          }
        },
        "SpreadsheetApp.BooleanCondition": {
          "prototype": {
            "getBackground": "fn() -> string",
            "getBold": "fn() -> bool",
            "getCriteriaType": "fn() -> +SpreadsheetApp.BooleanCriteria",
            "getCriteriaValues": "fn() -> [object]",
            "getFontColor": "fn() -> string",
            "getItalic": "fn() -> bool",
            "getStrikethrough": "fn() -> bool",
            "getUnderline": "fn() -> bool"
          }
        },
        "SpreadsheetApp.BooleanCriteria": {
          "prototype": {
            "CELL_EMPTY": "+SpreadsheetApp.BooleanCriteria",
            "CELL_NOT_EMPTY": "+SpreadsheetApp.BooleanCriteria",
            "CUSTOM_FORMULA": "+SpreadsheetApp.BooleanCriteria",
            "DATE_AFTER": "+SpreadsheetApp.BooleanCriteria",
            "DATE_AFTER_RELATIVE": "+SpreadsheetApp.BooleanCriteria",
            "DATE_BEFORE": "+SpreadsheetApp.BooleanCriteria",
            "DATE_BEFORE_RELATIVE": "+SpreadsheetApp.BooleanCriteria",
            "DATE_EQUAL_TO": "+SpreadsheetApp.BooleanCriteria",
            "DATE_EQUAL_TO_RELATIVE": "+SpreadsheetApp.BooleanCriteria",
            "NUMBER_BETWEEN": "+SpreadsheetApp.BooleanCriteria",
            "NUMBER_EQUAL_TO": "+SpreadsheetApp.BooleanCriteria",
            "NUMBER_GREATER_THAN": "+SpreadsheetApp.BooleanCriteria",
            "NUMBER_GREATER_THAN_OR_EQUAL_TO": "+SpreadsheetApp.BooleanCriteria",
            "NUMBER_LESS_THAN": "+SpreadsheetApp.BooleanCriteria",
            "NUMBER_LESS_THAN_OR_EQUAL_TO": "+SpreadsheetApp.BooleanCriteria",
            "NUMBER_NOT_BETWEEN": "+SpreadsheetApp.BooleanCriteria",
            "NUMBER_NOT_EQUAL_TO": "+SpreadsheetApp.BooleanCriteria",
            "TEXT_CONTAINS": "+SpreadsheetApp.BooleanCriteria",
            "TEXT_DOES_NOT_CONTAIN": "+SpreadsheetApp.BooleanCriteria",
            "TEXT_ENDS_WITH": "+SpreadsheetApp.BooleanCriteria",
            "TEXT_EQUAL_TO": "+SpreadsheetApp.BooleanCriteria",
            "TEXT_STARTS_WITH": "+SpreadsheetApp.BooleanCriteria"
          }
        },
        "SpreadsheetApp.BorderStyle": {
          "prototype": {
            "DASHED": "+SpreadsheetApp.BorderStyle",
            "DOTTED": "+SpreadsheetApp.BorderStyle",
            "DOUBLE": "+SpreadsheetApp.BorderStyle",
            "SOLID": "+SpreadsheetApp.BorderStyle",
            "SOLID_MEDIUM": "+SpreadsheetApp.BorderStyle",
            "SOLID_THICK": "+SpreadsheetApp.BorderStyle"
          }
        },
        "SpreadsheetApp.ConditionalFormatRule": {
          "prototype": {
            "copy": "fn() -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "getBooleanCondition": "fn() -> +SpreadsheetApp.BooleanCondition",
            "getGradientCondition": "fn() -> +SpreadsheetApp.GradientCondition",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]"
          }
        },
        "SpreadsheetApp.ConditionalFormatRuleBuilder": {
          "prototype": {
            "build": "fn() -> +SpreadsheetApp.ConditionalFormatRule",
            "copy": "fn() -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "getBooleanCondition": "fn() -> +SpreadsheetApp.BooleanCondition",
            "getGradientCondition": "fn() -> +SpreadsheetApp.GradientCondition",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "setBackground": "fn(color: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setBold": "fn(bold: bool) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setFontColor": "fn(color: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setGradientMaxpoint": "fn(color: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setGradientMaxpointWithValue": "fn(color: string, type: SpreadsheetApp.InterpolationType, value: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setGradientMidpointWithValue": "fn(color: string, type: SpreadsheetApp.InterpolationType, value: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setGradientMinpoint": "fn(color: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setGradientMinpointWithValue": "fn(color: string, type: SpreadsheetApp.InterpolationType, value: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setItalic": "fn(italic: bool) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setRanges": "fn(ranges: [SpreadsheetApp.Range]) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setStrikethrough": "fn(strikethrough: bool) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "setUnderline": "fn(underline: bool) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenCellEmpty": "fn() -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenCellNotEmpty": "fn() -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenDateAfter": "fn(date: SpreadsheetApp.RelativeDate) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenDateBefore": "fn(date: SpreadsheetApp.RelativeDate) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenDateEqualTo": "fn(date: SpreadsheetApp.RelativeDate) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenFormulaSatisfied": "fn(formula: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenNumberBetween": "fn(start: number, end: number) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenNumberEqualTo": "fn(number: number) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenNumberGreaterThan": "fn(number: number) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenNumberGreaterThanOrEqualTo": "fn(number: number) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenNumberLessThan": "fn(number: number) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenNumberLessThanOrEqualTo": "fn(number: number) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenNumberNotBetween": "fn(start: number, end: number) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenNumberNotEqualTo": "fn(number: number) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenTextContains": "fn(text: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenTextDoesNotContain": "fn(text: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenTextEndsWith": "fn(text: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenTextEqualTo": "fn(text: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "whenTextStartsWith": "fn(text: string) -> +SpreadsheetApp.ConditionalFormatRuleBuilder",
            "withCriteria": "fn(criteria: SpreadsheetApp.BooleanCriteria, args: [object]) -> +SpreadsheetApp.ConditionalFormatRuleBuilder"
          }
        },
        "SpreadsheetApp.ContainerInfo": {
          "prototype": {
            "getAnchorColumn": "fn() -> number",
            "getAnchorRow": "fn() -> number",
            "getOffsetX": "fn() -> number",
            "getOffsetY": "fn() -> number"
          }
        },
        "SpreadsheetApp.CopyPasteType": {
          "prototype": {
            "PASTE_COLUMN_WIDTHS": "+SpreadsheetApp.CopyPasteType",
            "PASTE_CONDITIONAL_FORMATTING": "+SpreadsheetApp.CopyPasteType",
            "PASTE_DATA_VALIDATION": "+SpreadsheetApp.CopyPasteType",
            "PASTE_FORMAT": "+SpreadsheetApp.CopyPasteType",
            "PASTE_FORMULA": "+SpreadsheetApp.CopyPasteType",
            "PASTE_NORMAL": "+SpreadsheetApp.CopyPasteType",
            "PASTE_NO_BORDERS": "+SpreadsheetApp.CopyPasteType",
            "PASTE_VALUES": "+SpreadsheetApp.CopyPasteType"
          }
        },
        "SpreadsheetApp.DataExecutionErrorCode": {
          "prototype": {
            "DATA_EXECUTION_ERROR_CODE_UNSUPPORTED": "+SpreadsheetApp.DataExecutionErrorCode",
            "DUPLICATE_COLUMN_NAMES": "+SpreadsheetApp.DataExecutionErrorCode",
            "ENGINE": "+SpreadsheetApp.DataExecutionErrorCode",
            "INTERRUPTED": "+SpreadsheetApp.DataExecutionErrorCode",
            "NONE": "+SpreadsheetApp.DataExecutionErrorCode",
            "OTHER": "+SpreadsheetApp.DataExecutionErrorCode",
            "PARAMETER_INVALID": "+SpreadsheetApp.DataExecutionErrorCode",
            "TIME_OUT": "+SpreadsheetApp.DataExecutionErrorCode",
            "TOO_MANY_CELLS": "+SpreadsheetApp.DataExecutionErrorCode",
            "TOO_MANY_CHARS_PER_CELL": "+SpreadsheetApp.DataExecutionErrorCode",
            "TOO_MANY_ROWS": "+SpreadsheetApp.DataExecutionErrorCode",
            "UNSUPPORTED_DATA_TYPE": "+SpreadsheetApp.DataExecutionErrorCode"
          }
        },
        "SpreadsheetApp.DataExecutionState": {
          "prototype": {
            "DATA_EXECUTION_STATE_UNSUPPORTED": "+SpreadsheetApp.DataExecutionState",
            "ERROR": "+SpreadsheetApp.DataExecutionState",
            "NOT_STARTED": "+SpreadsheetApp.DataExecutionState",
            "RUNNING": "+SpreadsheetApp.DataExecutionState",
            "SUCCESS": "+SpreadsheetApp.DataExecutionState"
          }
        },
        "SpreadsheetApp.DataExecutionStatus": {
          "prototype": {
            "getErrorCode": "fn() -> +SpreadsheetApp.DataExecutionErrorCode",
            "getErrorMessage": "fn() -> string",
            "getExecutionState": "fn() -> +SpreadsheetApp.DataExecutionState",
            "getLastRefreshedTime": "fn() -> +Date",
            "isTruncated": "fn() -> bool"
          }
        },
        "SpreadsheetApp.DataSource": {
          "prototype": {
            "getSpec": "fn() -> +SpreadsheetApp.DataSourceSpec",
            "updateSpec": "fn(spec: SpreadsheetApp.DataSourceSpec) -> +SpreadsheetApp.DataSource"
          }
        },
        "SpreadsheetApp.DataSourceParameter": {
          "prototype": {
            "getName": "fn() -> string",
            "getSourceCell": "fn() -> string",
            "getType": "fn() -> +SpreadsheetApp.DataSourceParameterType"
          }
        },
        "SpreadsheetApp.DataSourceParameterType": {
          "prototype": {
            "CELL": "+SpreadsheetApp.DataSourceParameterType",
            "DATA_SOURCE_PARAMETER_TYPE_UNSUPPORTED": "+SpreadsheetApp.DataSourceParameterType"
          }
        },
        "SpreadsheetApp.DataSourceSpec": {
          "prototype": {
            "asBigQuery": "fn() -> +SpreadsheetApp.BigQueryDataSourceSpec",
            "copy": "fn() -> +SpreadsheetApp.DataSourceSpecBuilder",
            "getParameters": "fn() -> [+SpreadsheetApp.DataSourceParameter]",
            "getType": "fn() -> +SpreadsheetApp.DataSourceType"
          }
        },
        "SpreadsheetApp.DataSourceSpecBuilder": {
          "prototype": {
            "asBigQuery": "fn() -> +SpreadsheetApp.BigQueryDataSourceSpecBuilder",
            "build": "fn() -> +SpreadsheetApp.DataSourceSpec",
            "copy": "fn() -> +SpreadsheetApp.DataSourceSpecBuilder",
            "getParameters": "fn() -> [+SpreadsheetApp.DataSourceParameter]",
            "getType": "fn() -> +SpreadsheetApp.DataSourceType",
            "removeAllParameters": "fn() -> +SpreadsheetApp.DataSourceSpecBuilder",
            "removeParameter": "fn(parameterName: string) -> +SpreadsheetApp.DataSourceSpecBuilder",
            "setParameterFromCell": "fn(parameterName: string, sourceCell: string) -> +SpreadsheetApp.DataSourceSpecBuilder"
          }
        },
        "SpreadsheetApp.DataSourceTable": {
          "prototype": {
            "forceRefreshData": "fn() -> +SpreadsheetApp.DataSourceTable",
            "getDataSource": "fn() -> +SpreadsheetApp.DataSource",
            "getRange": "fn() -> +SpreadsheetApp.Range",
            "getStatus": "fn() -> +SpreadsheetApp.DataExecutionStatus",
            "refreshData": "fn() -> +SpreadsheetApp.DataSourceTable",
            "waitForCompletion": "fn(timeoutInSeconds: number) -> +SpreadsheetApp.DataExecutionStatus"
          }
        },
        "SpreadsheetApp.DataSourceType": {
          "prototype": {
            "BIGQUERY": "+SpreadsheetApp.DataSourceType",
            "DATA_SOURCE_TYPE_UNSUPPORTED": "+SpreadsheetApp.DataSourceType"
          }
        },
        "SpreadsheetApp.DataValidation": {
          "prototype": {
            "copy": "fn() -> +SpreadsheetApp.DataValidationBuilder",
            "getAllowInvalid": "fn() -> bool",
            "getCriteriaType": "fn() -> +SpreadsheetApp.DataValidationCriteria",
            "getCriteriaValues": "fn() -> [object]",
            "getHelpText": "fn() -> string"
          }
        },
        "SpreadsheetApp.DataValidationBuilder": {
          "prototype": {
            "build": "fn() -> +SpreadsheetApp.DataValidation",
            "copy": "fn() -> +SpreadsheetApp.DataValidationBuilder",
            "getAllowInvalid": "fn() -> bool",
            "getCriteriaType": "fn() -> +SpreadsheetApp.DataValidationCriteria",
            "getCriteriaValues": "fn() -> [object]",
            "getHelpText": "fn() -> string",
            "requireCheckbox": "fn(checkedValue: object, uncheckedValue: object) -> +SpreadsheetApp.DataValidationBuilder",
            "requireDate": "fn() -> +SpreadsheetApp.DataValidationBuilder",
            "requireDateAfter": "fn(date: +Date) -> +SpreadsheetApp.DataValidationBuilder",
            "requireDateBefore": "fn(date: +Date) -> +SpreadsheetApp.DataValidationBuilder",
            "requireDateBetween": "fn(start: +Date, end: +Date) -> +SpreadsheetApp.DataValidationBuilder",
            "requireDateEqualTo": "fn(date: +Date) -> +SpreadsheetApp.DataValidationBuilder",
            "requireDateNotBetween": "fn(start: +Date, end: +Date) -> +SpreadsheetApp.DataValidationBuilder",
            "requireDateOnOrAfter": "fn(date: +Date) -> +SpreadsheetApp.DataValidationBuilder",
            "requireDateOnOrBefore": "fn(date: +Date) -> +SpreadsheetApp.DataValidationBuilder",
            "requireFormulaSatisfied": "fn(formula: string) -> +SpreadsheetApp.DataValidationBuilder",
            "requireNumberBetween": "fn(start: number, end: number) -> +SpreadsheetApp.DataValidationBuilder",
            "requireNumberEqualTo": "fn(number: number) -> +SpreadsheetApp.DataValidationBuilder",
            "requireNumberGreaterThan": "fn(number: number) -> +SpreadsheetApp.DataValidationBuilder",
            "requireNumberGreaterThanOrEqualTo": "fn(number: number) -> +SpreadsheetApp.DataValidationBuilder",
            "requireNumberLessThan": "fn(number: number) -> +SpreadsheetApp.DataValidationBuilder",
            "requireNumberLessThanOrEqualTo": "fn(number: number) -> +SpreadsheetApp.DataValidationBuilder",
            "requireNumberNotBetween": "fn(start: number, end: number) -> +SpreadsheetApp.DataValidationBuilder",
            "requireNumberNotEqualTo": "fn(number: number) -> +SpreadsheetApp.DataValidationBuilder",
            "requireTextContains": "fn(text: string) -> +SpreadsheetApp.DataValidationBuilder",
            "requireTextDoesNotContain": "fn(text: string) -> +SpreadsheetApp.DataValidationBuilder",
            "requireTextEqualTo": "fn(text: string) -> +SpreadsheetApp.DataValidationBuilder",
            "requireTextIsEmail": "fn() -> +SpreadsheetApp.DataValidationBuilder",
            "requireTextIsUrl": "fn() -> +SpreadsheetApp.DataValidationBuilder",
            "requireValueInList": "fn(values: [string], showDropdown: bool) -> +SpreadsheetApp.DataValidationBuilder",
            "requireValueInRange": "fn(range: SpreadsheetApp.Range, showDropdown: bool) -> +SpreadsheetApp.DataValidationBuilder",
            "setAllowInvalid": "fn(allowInvalidData: bool) -> +SpreadsheetApp.DataValidationBuilder",
            "setHelpText": "fn(helpText: string) -> +SpreadsheetApp.DataValidationBuilder",
            "withCriteria": "fn(criteria: SpreadsheetApp.DataValidationCriteria, args: [object]) -> +SpreadsheetApp.DataValidationBuilder"
          }
        },
        "SpreadsheetApp.DataValidationCriteria": {
          "prototype": {
            "CHECKBOX": "+SpreadsheetApp.DataValidationCriteria",
            "CUSTOM_FORMULA": "+SpreadsheetApp.DataValidationCriteria",
            "DATE_AFTER": "+SpreadsheetApp.DataValidationCriteria",
            "DATE_BEFORE": "+SpreadsheetApp.DataValidationCriteria",
            "DATE_BETWEEN": "+SpreadsheetApp.DataValidationCriteria",
            "DATE_EQUAL_TO": "+SpreadsheetApp.DataValidationCriteria",
            "DATE_IS_VALID_DATE": "+SpreadsheetApp.DataValidationCriteria",
            "DATE_NOT_BETWEEN": "+SpreadsheetApp.DataValidationCriteria",
            "DATE_ON_OR_AFTER": "+SpreadsheetApp.DataValidationCriteria",
            "DATE_ON_OR_BEFORE": "+SpreadsheetApp.DataValidationCriteria",
            "NUMBER_BETWEEN": "+SpreadsheetApp.DataValidationCriteria",
            "NUMBER_EQUAL_TO": "+SpreadsheetApp.DataValidationCriteria",
            "NUMBER_GREATER_THAN": "+SpreadsheetApp.DataValidationCriteria",
            "NUMBER_GREATER_THAN_OR_EQUAL_TO": "+SpreadsheetApp.DataValidationCriteria",
            "NUMBER_LESS_THAN": "+SpreadsheetApp.DataValidationCriteria",
            "NUMBER_LESS_THAN_OR_EQUAL_TO": "+SpreadsheetApp.DataValidationCriteria",
            "NUMBER_NOT_BETWEEN": "+SpreadsheetApp.DataValidationCriteria",
            "NUMBER_NOT_EQUAL_TO": "+SpreadsheetApp.DataValidationCriteria",
            "TEXT_CONTAINS": "+SpreadsheetApp.DataValidationCriteria",
            "TEXT_DOES_NOT_CONTAIN": "+SpreadsheetApp.DataValidationCriteria",
            "TEXT_EQUAL_TO": "+SpreadsheetApp.DataValidationCriteria",
            "TEXT_IS_VALID_EMAIL": "+SpreadsheetApp.DataValidationCriteria",
            "TEXT_IS_VALID_URL": "+SpreadsheetApp.DataValidationCriteria",
            "VALUE_IN_LIST": "+SpreadsheetApp.DataValidationCriteria",
            "VALUE_IN_RANGE": "+SpreadsheetApp.DataValidationCriteria"
          }
        },
        "SpreadsheetApp.DeveloperMetadata": {
          "prototype": {
            "getId": "fn() -> number",
            "getKey": "fn() -> string",
            "getLocation": "fn() -> +SpreadsheetApp.DeveloperMetadataLocation",
            "getValue": "fn() -> string",
            "getVisibility": "fn() -> +SpreadsheetApp.DeveloperMetadataVisibility",
            "moveToColumn": "fn(column: SpreadsheetApp.Range) -> +SpreadsheetApp.DeveloperMetadata",
            "moveToRow": "fn(row: SpreadsheetApp.Range) -> +SpreadsheetApp.DeveloperMetadata",
            "moveToSheet": "fn(sheet: SpreadsheetApp.Sheet) -> +SpreadsheetApp.DeveloperMetadata",
            "moveToSpreadsheet": "fn() -> +SpreadsheetApp.DeveloperMetadata",
            "remove": "fn()",
            "setKey": "fn(key: string) -> +SpreadsheetApp.DeveloperMetadata",
            "setValue": "fn(value: string) -> +SpreadsheetApp.DeveloperMetadata",
            "setVisibility": "fn(visibility: SpreadsheetApp.DeveloperMetadataVisibility) -> +SpreadsheetApp.DeveloperMetadata"
          }
        },
        "SpreadsheetApp.DeveloperMetadataFinder": {
          "prototype": {
            "find": "fn() -> [+SpreadsheetApp.DeveloperMetadata]",
            "onIntersectingLocations": "fn() -> +SpreadsheetApp.DeveloperMetadataFinder",
            "withId": "fn(id: number) -> +SpreadsheetApp.DeveloperMetadataFinder",
            "withKey": "fn(key: string) -> +SpreadsheetApp.DeveloperMetadataFinder",
            "withLocationType": "fn(locationType: SpreadsheetApp.DeveloperMetadataLocationType) -> +SpreadsheetApp.DeveloperMetadataFinder",
            "withValue": "fn(value: string) -> +SpreadsheetApp.DeveloperMetadataFinder",
            "withVisibility": "fn(visibility: SpreadsheetApp.DeveloperMetadataVisibility) -> +SpreadsheetApp.DeveloperMetadataFinder"
          }
        },
        "SpreadsheetApp.DeveloperMetadataLocation": {
          "prototype": {
            "getColumn": "fn() -> +SpreadsheetApp.Range",
            "getLocationType": "fn() -> +SpreadsheetApp.DeveloperMetadataLocationType",
            "getRow": "fn() -> +SpreadsheetApp.Range",
            "getSheet": "fn() -> +SpreadsheetApp.Sheet",
            "getSpreadsheet": "fn() -> +SpreadsheetApp.Spreadsheet"
          }
        },
        "SpreadsheetApp.DeveloperMetadataLocationType": {
          "prototype": {
            "COLUMN": "+SpreadsheetApp.DeveloperMetadataLocationType",
            "ROW": "+SpreadsheetApp.DeveloperMetadataLocationType",
            "SHEET": "+SpreadsheetApp.DeveloperMetadataLocationType",
            "SPREADSHEET": "+SpreadsheetApp.DeveloperMetadataLocationType"
          }
        },
        "SpreadsheetApp.DeveloperMetadataVisibility": {
          "prototype": {
            "DOCUMENT": "+SpreadsheetApp.DeveloperMetadataVisibility",
            "PROJECT": "+SpreadsheetApp.DeveloperMetadataVisibility"
          }
        },
        "SpreadsheetApp.Dimension": {
          "prototype": {
            "COLUMNS": "+SpreadsheetApp.Dimension",
            "ROWS": "+SpreadsheetApp.Dimension"
          }
        },
        "SpreadsheetApp.Direction": {
          "prototype": {
            "DOWN": "+SpreadsheetApp.Direction",
            "NEXT": "+SpreadsheetApp.Direction",
            "PREVIOUS": "+SpreadsheetApp.Direction",
            "UP": "+SpreadsheetApp.Direction"
          }
        },
        "SpreadsheetApp.EmbeddedAreaChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "reverseCategories": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPointStyle": "fn(style: Charts.PointStyle) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setRange": "fn(start: number, end: number) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setStacked": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "useLogScale": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedBarChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "reverseCategories": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "reverseDirection": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setRange": "fn(start: number, end: number) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setStacked": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "useLogScale": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedChart": {
          "prototype": {
            "getAs": "fn(contentType: string) -> Blob",
            "getBlob": "fn() -> Blob",
            "getChartId": "fn() -> number",
            "getContainerInfo": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getHiddenDimensionStrategy": "fn() -> Charts.ChartHiddenDimensionStrategy",
            "getId": "fn() -> string",
            "getMergeStrategy": "fn() -> Charts.ChartMergeStrategy",
            "getNumHeaders": "fn() -> number",
            "getOptions": "fn() -> Charts.ChartOptions",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "getTransposeRowsAndColumns": "fn() -> bool",
            "getType": "fn() -> string",
            "modify": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setId": "fn(id: string) -> Charts.Chart"
          }
        },
        "SpreadsheetApp.EmbeddedChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedColumnChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "reverseCategories": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setRange": "fn(start: number, end: number) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setStacked": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "useLogScale": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedComboChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "reverseCategories": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setRange": "fn(start: number, end: number) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setStacked": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "useLogScale": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedHistogramChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "reverseCategories": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setRange": "fn(start: number, end: number) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setStacked": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "useLogScale": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedLineChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "reverseCategories": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setCurveStyle": "fn(style: Charts.CurveStyle) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPointStyle": "fn(style: Charts.PointStyle) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setRange": "fn(start: number, end: number) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "useLogScale": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedPieChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "reverseCategories": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "set3D": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedScatterChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setBackgroundColor": "fn(cssValue: string) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setColors": "fn(cssValues: [string]) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setLegendPosition": "fn(position: Charts.Position) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPointStyle": "fn(style: Charts.PointStyle) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setTitle": "fn(chartTitle: string) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setXAxisLogScale": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setXAxisRange": "fn(start: number, end: number) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setXAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setYAxisLogScale": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setYAxisRange": "fn(start: number, end: number) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setYAxisTitle": "fn(title: string) -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> +SpreadsheetApp.EmbeddedScatterChartBuilder"
          }
        },
        "SpreadsheetApp.EmbeddedTableChartBuilder": {
          "prototype": {
            "addRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "asAreaChart": "fn() -> +SpreadsheetApp.EmbeddedAreaChartBuilder",
            "asBarChart": "fn() -> +SpreadsheetApp.EmbeddedBarChartBuilder",
            "asColumnChart": "fn() -> +SpreadsheetApp.EmbeddedColumnChartBuilder",
            "asComboChart": "fn() -> +SpreadsheetApp.EmbeddedComboChartBuilder",
            "asHistogramChart": "fn() -> +SpreadsheetApp.EmbeddedHistogramChartBuilder",
            "asLineChart": "fn() -> +SpreadsheetApp.EmbeddedLineChartBuilder",
            "asPieChart": "fn() -> +SpreadsheetApp.EmbeddedPieChartBuilder",
            "asScatterChart": "fn() -> +SpreadsheetApp.EmbeddedScatterChartBuilder",
            "asTableChart": "fn() -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "build": "fn() -> +SpreadsheetApp.EmbeddedChart",
            "clearRanges": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "enablePaging": "fn(pageSize: number, startPage: number) -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "enableRtlTable": "fn(rtlEnabled: bool) -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "enableSorting": "fn(enableSorting: bool) -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "getChartType": "fn() -> Charts.ChartType",
            "getContainer": "fn() -> +SpreadsheetApp.ContainerInfo",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "removeRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setChartType": "fn(type: Charts.ChartType) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setFirstRowNumber": "fn(number: number) -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "setHiddenDimensionStrategy": "fn(strategy: Charts.ChartHiddenDimensionStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setInitialSortingAscending": "fn(column: number) -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "setInitialSortingDescending": "fn(column: number) -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "setMergeStrategy": "fn(mergeStrategy: Charts.ChartMergeStrategy) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setNumHeaders": "fn(headers: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setOption": "fn(option: string, value: object) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setPosition": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "setTransposeRowsAndColumns": "fn(transpose: bool) -> +SpreadsheetApp.EmbeddedChartBuilder",
            "showRowNumberColumn": "fn(showRowNumber: bool) -> +SpreadsheetApp.EmbeddedTableChartBuilder",
            "useAlternatingRowStyle": "fn(alternate: bool) -> +SpreadsheetApp.EmbeddedTableChartBuilder"
          }
        },
        "SpreadsheetApp.Filter": {
          "prototype": {
            "getColumnFilterCriteria": "fn(columnPosition: number) -> +SpreadsheetApp.FilterCriteria",
            "getRange": "fn() -> +SpreadsheetApp.Range",
            "remove": "fn()",
            "removeColumnFilterCriteria": "fn(columnPosition: number) -> +SpreadsheetApp.Filter",
            "setColumnFilterCriteria": "fn(columnPosition: number, filterCriteria: SpreadsheetApp.FilterCriteria) -> +SpreadsheetApp.Filter",
            "sort": "fn(columnPosition: number, ascending: bool) -> +SpreadsheetApp.Filter"
          }
        },
        "SpreadsheetApp.FilterCriteria": {
          "prototype": {
            "copy": "fn() -> +SpreadsheetApp.FilterCriteriaBuilder",
            "getCriteriaType": "fn() -> +SpreadsheetApp.BooleanCriteria",
            "getCriteriaValues": "fn() -> [object]",
            "getHiddenValues": "fn() -> [string]",
            "getVisibleValues": "fn() -> [string]"
          }
        },
        "SpreadsheetApp.FilterCriteriaBuilder": {
          "prototype": {
            "build": "fn() -> +SpreadsheetApp.FilterCriteria",
            "copy": "fn() -> +SpreadsheetApp.FilterCriteriaBuilder",
            "getCriteriaType": "fn() -> +SpreadsheetApp.BooleanCriteria",
            "getCriteriaValues": "fn() -> [object]",
            "getHiddenValues": "fn() -> [string]",
            "getVisibleValues": "fn() -> [string]",
            "setHiddenValues": "fn(values: [string]) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "setVisibleValues": "fn(values: [string]) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenCellEmpty": "fn() -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenCellNotEmpty": "fn() -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenDateAfter": "fn(date: SpreadsheetApp.RelativeDate) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenDateBefore": "fn(date: SpreadsheetApp.RelativeDate) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenDateEqualTo": "fn(date: SpreadsheetApp.RelativeDate) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenFormulaSatisfied": "fn(formula: string) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenNumberBetween": "fn(start: number, end: number) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenNumberEqualTo": "fn(number: number) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenNumberGreaterThan": "fn(number: number) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenNumberGreaterThanOrEqualTo": "fn(number: number) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenNumberLessThan": "fn(number: number) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenNumberLessThanOrEqualTo": "fn(number: number) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenNumberNotBetween": "fn(start: number, end: number) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenNumberNotEqualTo": "fn(number: number) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenTextContains": "fn(text: string) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenTextDoesNotContain": "fn(text: string) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenTextEndsWith": "fn(text: string) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenTextEqualTo": "fn(text: string) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "whenTextStartsWith": "fn(text: string) -> +SpreadsheetApp.FilterCriteriaBuilder",
            "withCriteria": "fn(criteria: SpreadsheetApp.BooleanCriteria, args: [object]) -> +SpreadsheetApp.FilterCriteriaBuilder"
          }
        },
        "SpreadsheetApp.GradientCondition": {
          "prototype": {
            "getMaxColor": "fn() -> string",
            "getMaxType": "fn() -> +SpreadsheetApp.InterpolationType",
            "getMaxValue": "fn() -> string",
            "getMidColor": "fn() -> string",
            "getMidType": "fn() -> +SpreadsheetApp.InterpolationType",
            "getMidValue": "fn() -> string",
            "getMinColor": "fn() -> string",
            "getMinType": "fn() -> +SpreadsheetApp.InterpolationType",
            "getMinValue": "fn() -> string"
          }
        },
        "SpreadsheetApp.Group": {
          "prototype": {
            "collapse": "fn() -> +SpreadsheetApp.Group",
            "expand": "fn() -> +SpreadsheetApp.Group",
            "getControlIndex": "fn() -> number",
            "getDepth": "fn() -> number",
            "getRange": "fn() -> +SpreadsheetApp.Range",
            "isCollapsed": "fn() -> bool",
            "remove": "fn()"
          }
        },
        "SpreadsheetApp.GroupControlTogglePosition": {
          "prototype": {
            "AFTER": "+SpreadsheetApp.GroupControlTogglePosition",
            "BEFORE": "+SpreadsheetApp.GroupControlTogglePosition"
          }
        },
        "SpreadsheetApp.InterpolationType": {
          "prototype": {
            "MAX": "+SpreadsheetApp.InterpolationType",
            "MIN": "+SpreadsheetApp.InterpolationType",
            "NUMBER": "+SpreadsheetApp.InterpolationType",
            "PERCENT": "+SpreadsheetApp.InterpolationType",
            "PERCENTILE": "+SpreadsheetApp.InterpolationType"
          }
        },
        "SpreadsheetApp.NamedRange": {
          "prototype": {
            "getName": "fn() -> string",
            "getRange": "fn() -> +SpreadsheetApp.Range",
            "remove": "fn()",
            "setName": "fn(name: string) -> +SpreadsheetApp.NamedRange",
            "setRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.NamedRange"
          }
        },
        "SpreadsheetApp.OverGridImage": {
          "prototype": {
            "assignScript": "fn(functionName: string) -> +SpreadsheetApp.OverGridImage",
            "getAltTextDescription": "fn() -> string",
            "getAltTextTitle": "fn() -> string",
            "getAnchorCell": "fn() -> +SpreadsheetApp.Range",
            "getAnchorCellXOffset": "fn() -> number",
            "getAnchorCellYOffset": "fn() -> number",
            "getHeight": "fn() -> number",
            "getInherentHeight": "fn() -> number",
            "getInherentWidth": "fn() -> number",
            "getScript": "fn() -> string",
            "getSheet": "fn() -> +SpreadsheetApp.Sheet",
            "getUrl": "fn() -> string",
            "getWidth": "fn() -> number",
            "remove": "fn()",
            "replace": "fn(url: string) -> +SpreadsheetApp.OverGridImage",
            "resetSize": "fn() -> +SpreadsheetApp.OverGridImage",
            "setAltTextDescription": "fn(description: string) -> +SpreadsheetApp.OverGridImage",
            "setAltTextTitle": "fn(title: string) -> +SpreadsheetApp.OverGridImage",
            "setAnchorCell": "fn(cell: SpreadsheetApp.Range) -> +SpreadsheetApp.OverGridImage",
            "setAnchorCellXOffset": "fn(offset: number) -> +SpreadsheetApp.OverGridImage",
            "setAnchorCellYOffset": "fn(offset: number) -> +SpreadsheetApp.OverGridImage",
            "setHeight": "fn(height: number) -> +SpreadsheetApp.OverGridImage",
            "setWidth": "fn(width: number) -> +SpreadsheetApp.OverGridImage"
          }
        },
        "SpreadsheetApp.PageProtection": {
          "prototype": {
            "addUser": "fn(email: string)",
            "getUsers": "fn() -> [string]",
            "isProtected": "fn() -> bool",
            "removeUser": "fn(user: string)",
            "setProtected": "fn(protection: bool)"
          }
        },
        "SpreadsheetApp.PivotFilter": {
          "prototype": {
            "getFilterCriteria": "fn() -> +SpreadsheetApp.FilterCriteria",
            "getPivotTable": "fn() -> +SpreadsheetApp.PivotTable",
            "getSourceDataColumn": "fn() -> number",
            "remove": "fn()",
            "setFilterCriteria": "fn(filterCriteria: SpreadsheetApp.FilterCriteria) -> +SpreadsheetApp.PivotFilter"
          }
        },
        "SpreadsheetApp.PivotGroup": {
          "prototype": {
            "addManualGroupingRule": "fn(groupName: string, groupMembers: [object]) -> +SpreadsheetApp.PivotGroup",
            "areLabelsRepeated": "fn() -> bool",
            "clearGroupingRule": "fn() -> +SpreadsheetApp.PivotGroup",
            "clearSort": "fn() -> +SpreadsheetApp.PivotGroup",
            "getDimension": "fn() -> +SpreadsheetApp.Dimension",
            "getIndex": "fn() -> number",
            "getPivotTable": "fn() -> +SpreadsheetApp.PivotTable",
            "getSourceDataColumn": "fn() -> number",
            "hideRepeatedLabels": "fn() -> +SpreadsheetApp.PivotGroup",
            "isSortAscending": "fn() -> bool",
            "moveToIndex": "fn(index: number) -> +SpreadsheetApp.PivotGroup",
            "remove": "fn()",
            "removeManualGroupingRule": "fn(groupName: string) -> +SpreadsheetApp.PivotGroup",
            "resetDisplayName": "fn() -> +SpreadsheetApp.PivotGroup",
            "setDisplayName": "fn(name: string) -> +SpreadsheetApp.PivotGroup",
            "setHistogramGroupingRule": "fn(minValue: number, maxValue: number, intervalSize: number) -> +SpreadsheetApp.PivotGroup",
            "showRepeatedLabels": "fn() -> +SpreadsheetApp.PivotGroup",
            "showTotals": "fn(showTotals: bool) -> +SpreadsheetApp.PivotGroup",
            "sortAscending": "fn() -> +SpreadsheetApp.PivotGroup",
            "sortBy": "fn(value: SpreadsheetApp.PivotValue, oppositeGroupValues: [object]) -> +SpreadsheetApp.PivotGroup",
            "sortDescending": "fn() -> +SpreadsheetApp.PivotGroup",
            "totalsAreShown": "fn() -> bool"
          }
        },
        "SpreadsheetApp.PivotTable": {
          "prototype": {
            "addCalculatedPivotValue": "fn(name: string, formula: string) -> +SpreadsheetApp.PivotValue",
            "addColumnGroup": "fn(sourceDataColumn: number) -> +SpreadsheetApp.PivotGroup",
            "addFilter": "fn(sourceDataColumn: number, filterCriteria: SpreadsheetApp.FilterCriteria) -> +SpreadsheetApp.PivotFilter",
            "addPivotValue": "fn(sourceDataColumn: number, summarizeFunction: SpreadsheetApp.PivotTableSummarizeFunction) -> +SpreadsheetApp.PivotValue",
            "addRowGroup": "fn(sourceDataColumn: number) -> +SpreadsheetApp.PivotGroup",
            "getAnchorCell": "fn() -> +SpreadsheetApp.Range",
            "getColumnGroups": "fn() -> [+SpreadsheetApp.PivotGroup]",
            "getFilters": "fn() -> [+SpreadsheetApp.PivotFilter]",
            "getPivotValues": "fn() -> [+SpreadsheetApp.PivotValue]",
            "getRowGroups": "fn() -> [+SpreadsheetApp.PivotGroup]",
            "getValuesDisplayOrientation": "fn() -> +SpreadsheetApp.Dimension",
            "remove": "fn()",
            "setValuesDisplayOrientation": "fn(dimension: SpreadsheetApp.Dimension) -> +SpreadsheetApp.PivotTable"
          }
        },
        "SpreadsheetApp.PivotTableSummarizeFunction": {
          "prototype": {
            "AVERAGE": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "COUNT": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "COUNTA": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "COUNTUNIQUE": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "CUSTOM": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "MAX": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "MEDIAN": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "MIN": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "PRODUCT": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "STDEV": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "STDEVP": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "SUM": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "VAR": "+SpreadsheetApp.PivotTableSummarizeFunction",
            "VARP": "+SpreadsheetApp.PivotTableSummarizeFunction"
          }
        },
        "SpreadsheetApp.PivotValue": {
          "prototype": {
            "getDisplayType": "fn() -> +SpreadsheetApp.PivotValueDisplayType",
            "getFormula": "fn() -> string",
            "getPivotTable": "fn() -> +SpreadsheetApp.PivotTable",
            "getSummarizedBy": "fn() -> +SpreadsheetApp.PivotTableSummarizeFunction",
            "setDisplayName": "fn(name: string) -> +SpreadsheetApp.PivotValue",
            "setFormula": "fn(formula: string) -> +SpreadsheetApp.PivotValue",
            "showAs": "fn(displayType: SpreadsheetApp.PivotValueDisplayType) -> +SpreadsheetApp.PivotValue",
            "summarizeBy": "fn(summarizeFunction: SpreadsheetApp.PivotTableSummarizeFunction) -> +SpreadsheetApp.PivotValue"
          }
        },
        "SpreadsheetApp.PivotValueDisplayType": {
          "prototype": {
            "DEFAULT": "+SpreadsheetApp.PivotValueDisplayType",
            "PERCENT_OF_COLUMN_TOTAL": "+SpreadsheetApp.PivotValueDisplayType",
            "PERCENT_OF_GRAND_TOTAL": "+SpreadsheetApp.PivotValueDisplayType",
            "PERCENT_OF_ROW_TOTAL": "+SpreadsheetApp.PivotValueDisplayType"
          }
        },
        "SpreadsheetApp.Protection": {
          "prototype": {
            "addEditor": "fn(user: User) -> +SpreadsheetApp.Protection",
            "addEditors": "fn(emailAddresses: [string]) -> +SpreadsheetApp.Protection",
            "canDomainEdit": "fn() -> bool",
            "canEdit": "fn() -> bool",
            "getDescription": "fn() -> string",
            "getEditors": "fn() -> [User]",
            "getProtectionType": "fn() -> +SpreadsheetApp.ProtectionType",
            "getRange": "fn() -> +SpreadsheetApp.Range",
            "getRangeName": "fn() -> string",
            "getUnprotectedRanges": "fn() -> [+SpreadsheetApp.Range]",
            "isWarningOnly": "fn() -> bool",
            "remove": "fn()",
            "removeEditor": "fn(user: User) -> +SpreadsheetApp.Protection",
            "removeEditors": "fn(emailAddresses: [string]) -> +SpreadsheetApp.Protection",
            "setDescription": "fn(description: string) -> +SpreadsheetApp.Protection",
            "setDomainEdit": "fn(editable: bool) -> +SpreadsheetApp.Protection",
            "setNamedRange": "fn(namedRange: SpreadsheetApp.NamedRange) -> +SpreadsheetApp.Protection",
            "setRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.Protection",
            "setRangeName": "fn(rangeName: string) -> +SpreadsheetApp.Protection",
            "setUnprotectedRanges": "fn(ranges: [SpreadsheetApp.Range]) -> +SpreadsheetApp.Protection",
            "setWarningOnly": "fn(warningOnly: bool) -> +SpreadsheetApp.Protection"
          }
        },
        "SpreadsheetApp.ProtectionType": {
          "prototype": {
            "RANGE": "+SpreadsheetApp.ProtectionType",
            "SHEET": "+SpreadsheetApp.ProtectionType"
          }
        },
        "SpreadsheetApp.Range": {
          "prototype": {
            "activate": "fn() -> +SpreadsheetApp.Range",
            "activateAsCurrentCell": "fn() -> +SpreadsheetApp.Range",
            "addDeveloperMetadata": "fn(key: string, value: string, visibility: SpreadsheetApp.DeveloperMetadataVisibility) -> +SpreadsheetApp.Range",
            "applyColumnBanding": "fn(bandingTheme: SpreadsheetApp.BandingTheme, showHeader: bool, showFooter: bool) -> +SpreadsheetApp.Banding",
            "applyRowBanding": "fn(bandingTheme: SpreadsheetApp.BandingTheme, showHeader: bool, showFooter: bool) -> +SpreadsheetApp.Banding",
            "autoFill": "fn(destination: SpreadsheetApp.Range, series: SpreadsheetApp.AutoFillSeries)",
            "autoFillToNeighbor": "fn(series: SpreadsheetApp.AutoFillSeries)",
            "breakApart": "fn() -> +SpreadsheetApp.Range",
            "canEdit": "fn() -> bool",
            "check": "fn() -> +SpreadsheetApp.Range",
            "clear": "fn(options: object) -> +SpreadsheetApp.Range",
            "clearContent": "fn() -> +SpreadsheetApp.Range",
            "clearDataValidations": "fn() -> +SpreadsheetApp.Range",
            "clearFormat": "fn() -> +SpreadsheetApp.Range",
            "clearNote": "fn() -> +SpreadsheetApp.Range",
            "collapseGroups": "fn() -> +SpreadsheetApp.Range",
            "copyFormatToRange": "fn(sheet: SpreadsheetApp.Sheet, column: number, columnEnd: number, row: number, rowEnd: number)",
            "copyTo": "fn(destination: SpreadsheetApp.Range, copyPasteType: SpreadsheetApp.CopyPasteType, transposed: bool)",
            "copyValuesToRange": "fn(sheet: SpreadsheetApp.Sheet, column: number, columnEnd: number, row: number, rowEnd: number)",
            "createDeveloperMetadataFinder": "fn() -> +SpreadsheetApp.DeveloperMetadataFinder",
            "createFilter": "fn() -> +SpreadsheetApp.Filter",
            "createPivotTable": "fn(sourceData: SpreadsheetApp.Range) -> +SpreadsheetApp.PivotTable",
            "createTextFinder": "fn(findText: string) -> +SpreadsheetApp.TextFinder",
            "deleteCells": "fn(shiftDimension: SpreadsheetApp.Dimension)",
            "expandGroups": "fn() -> +SpreadsheetApp.Range",
            "getA1Notation": "fn() -> string",
            "getBackground": "fn() -> string",
            "getBackgrounds": "fn() -> [[string]]",
            "getBandings": "fn() -> [+SpreadsheetApp.Banding]",
            "getCell": "fn(row: number, column: number) -> +SpreadsheetApp.Range",
            "getColumn": "fn() -> number",
            "getDataRegion": "fn(dimension: SpreadsheetApp.Dimension) -> +SpreadsheetApp.Range",
            "getDataSourceTables": "fn() -> [+SpreadsheetApp.DataSourceTable]",
            "getDataSourceUrl": "fn() -> string",
            "getDataTable": "fn(firstRowIsHeader: bool) -> DataTable",
            "getDataValidation": "fn() -> +SpreadsheetApp.DataValidation",
            "getDataValidations": "fn() -> [[+SpreadsheetApp.DataValidation]]",
            "getDeveloperMetadata": "fn() -> [+SpreadsheetApp.DeveloperMetadata]",
            "getDisplayValue": "fn() -> string",
            "getDisplayValues": "fn() -> [[string]]",
            "getFilter": "fn() -> +SpreadsheetApp.Filter",
            "getFontColor": "fn() -> string",
            "getFontColors": "fn() -> [[string]]",
            "getFontFamilies": "fn() -> [[string]]",
            "getFontFamily": "fn() -> string",
            "getFontLine": "fn() -> string",
            "getFontLines": "fn() -> [[string]]",
            "getFontSize": "fn() -> number",
            "getFontSizes": "fn() -> [[number]]",
            "getFontStyle": "fn() -> string",
            "getFontStyles": "fn() -> [[string]]",
            "getFontWeight": "fn() -> string",
            "getFontWeights": "fn() -> [[string]]",
            "getFormula": "fn() -> string",
            "getFormulaR1C1": "fn() -> string",
            "getFormulas": "fn() -> [[string]]",
            "getFormulasR1C1": "fn() -> [[string]]",
            "getGridId": "fn() -> number",
            "getHeight": "fn() -> number",
            "getHorizontalAlignment": "fn() -> string",
            "getHorizontalAlignments": "fn() -> [[string]]",
            "getLastColumn": "fn() -> number",
            "getLastRow": "fn() -> number",
            "getMergedRanges": "fn() -> [+SpreadsheetApp.Range]",
            "getNextDataCell": "fn(direction: SpreadsheetApp.Direction) -> +SpreadsheetApp.Range",
            "getNote": "fn() -> string",
            "getNotes": "fn() -> [[string]]",
            "getNumColumns": "fn() -> number",
            "getNumRows": "fn() -> number",
            "getNumberFormat": "fn() -> string",
            "getNumberFormats": "fn() -> [[string]]",
            "getRichTextValue": "fn() -> +SpreadsheetApp.RichTextValue",
            "getRichTextValues": "fn() -> [[+SpreadsheetApp.RichTextValue]]",
            "getRow": "fn() -> number",
            "getRowIndex": "fn() -> number",
            "getSheet": "fn() -> +SpreadsheetApp.Sheet",
            "getTextDirection": "fn() -> +SpreadsheetApp.TextDirection",
            "getTextDirections": "fn() -> [[+SpreadsheetApp.TextDirection]]",
            "getTextRotation": "fn() -> +SpreadsheetApp.TextRotation",
            "getTextRotations": "fn() -> [[+SpreadsheetApp.TextRotation]]",
            "getTextStyle": "fn() -> +SpreadsheetApp.TextStyle",
            "getTextStyles": "fn() -> [[+SpreadsheetApp.TextStyle]]",
            "getValue": "fn() -> object",
            "getValues": "fn() -> [[object]]",
            "getVerticalAlignment": "fn() -> string",
            "getVerticalAlignments": "fn() -> [[string]]",
            "getWidth": "fn() -> number",
            "getWrap": "fn() -> bool",
            "getWrapStrategies": "fn() -> [[+SpreadsheetApp.WrapStrategy]]",
            "getWrapStrategy": "fn() -> +SpreadsheetApp.WrapStrategy",
            "getWraps": "fn() -> [[bool]]",
            "insertCells": "fn(shiftDimension: SpreadsheetApp.Dimension) -> +SpreadsheetApp.Range",
            "insertCheckboxes": "fn(checkedValue: object, uncheckedValue: object) -> +SpreadsheetApp.Range",
            "isBlank": "fn() -> bool",
            "isChecked": "fn() -> bool",
            "isEndColumnBounded": "fn() -> bool",
            "isEndRowBounded": "fn() -> bool",
            "isPartOfMerge": "fn() -> bool",
            "isStartColumnBounded": "fn() -> bool",
            "isStartRowBounded": "fn() -> bool",
            "merge": "fn() -> +SpreadsheetApp.Range",
            "mergeAcross": "fn() -> +SpreadsheetApp.Range",
            "mergeVertically": "fn() -> +SpreadsheetApp.Range",
            "moveTo": "fn(target: SpreadsheetApp.Range)",
            "offset": "fn(rowOffset: number, columnOffset: number, numRows: number, numColumns: number) -> +SpreadsheetApp.Range",
            "protect": "fn() -> +SpreadsheetApp.Protection",
            "randomize": "fn() -> +SpreadsheetApp.Range",
            "removeCheckboxes": "fn() -> +SpreadsheetApp.Range",
            "setBackground": "fn(color: string) -> +SpreadsheetApp.Range",
            "setBackgroundRGB": "fn(red: number, green: number, blue: number) -> +SpreadsheetApp.Range",
            "setBackgrounds": "fn(color: [[string]]) -> +SpreadsheetApp.Range",
            "setBorder": "fn(top: bool, left: bool, bottom: bool, right: bool, vertical: bool, horizontal: bool, color: string, style: SpreadsheetApp.BorderStyle) -> +SpreadsheetApp.Range",
            "setDataValidation": "fn(rule: SpreadsheetApp.DataValidation) -> +SpreadsheetApp.Range",
            "setDataValidations": "fn(rules: [[SpreadsheetApp.DataValidation]]) -> +SpreadsheetApp.Range",
            "setFontColor": "fn(color: string) -> +SpreadsheetApp.Range",
            "setFontColors": "fn(colors: [[object]]) -> +SpreadsheetApp.Range",
            "setFontFamilies": "fn(fontFamilies: [[object]]) -> +SpreadsheetApp.Range",
            "setFontFamily": "fn(fontFamily: string) -> +SpreadsheetApp.Range",
            "setFontLine": "fn(fontLine: string) -> +SpreadsheetApp.Range",
            "setFontLines": "fn(fontLines: [[object]]) -> +SpreadsheetApp.Range",
            "setFontSize": "fn(size: number) -> +SpreadsheetApp.Range",
            "setFontSizes": "fn(sizes: [[object]]) -> +SpreadsheetApp.Range",
            "setFontStyle": "fn(fontStyle: string) -> +SpreadsheetApp.Range",
            "setFontStyles": "fn(fontStyles: [[object]]) -> +SpreadsheetApp.Range",
            "setFontWeight": "fn(fontWeight: string) -> +SpreadsheetApp.Range",
            "setFontWeights": "fn(fontWeights: [[object]]) -> +SpreadsheetApp.Range",
            "setFormula": "fn(formula: string) -> +SpreadsheetApp.Range",
            "setFormulaR1C1": "fn(formula: string) -> +SpreadsheetApp.Range",
            "setFormulas": "fn(formulas: [[string]]) -> +SpreadsheetApp.Range",
            "setFormulasR1C1": "fn(formulas: [[string]]) -> +SpreadsheetApp.Range",
            "setHorizontalAlignment": "fn(alignment: string) -> +SpreadsheetApp.Range",
            "setHorizontalAlignments": "fn(alignments: [[object]]) -> +SpreadsheetApp.Range",
            "setNote": "fn(note: string) -> +SpreadsheetApp.Range",
            "setNotes": "fn(notes: [[object]]) -> +SpreadsheetApp.Range",
            "setNumberFormat": "fn(numberFormat: string) -> +SpreadsheetApp.Range",
            "setNumberFormats": "fn(numberFormats: [[object]]) -> +SpreadsheetApp.Range",
            "setRichTextValue": "fn(value: SpreadsheetApp.RichTextValue) -> +SpreadsheetApp.Range",
            "setRichTextValues": "fn(values: [[SpreadsheetApp.RichTextValue]]) -> +SpreadsheetApp.Range",
            "setShowHyperlink": "fn(showHyperlink: bool) -> +SpreadsheetApp.Range",
            "setTextDirection": "fn(direction: SpreadsheetApp.TextDirection) -> +SpreadsheetApp.Range",
            "setTextDirections": "fn(directions: [[SpreadsheetApp.TextDirection]]) -> +SpreadsheetApp.Range",
            "setTextRotation": "fn(rotation: SpreadsheetApp.TextRotation) -> +SpreadsheetApp.Range",
            "setTextRotations": "fn(rotations: [[SpreadsheetApp.TextRotation]]) -> +SpreadsheetApp.Range",
            "setTextStyle": "fn(style: SpreadsheetApp.TextStyle) -> +SpreadsheetApp.Range",
            "setTextStyles": "fn(styles: [[SpreadsheetApp.TextStyle]]) -> +SpreadsheetApp.Range",
            "setValue": "fn(value: object) -> +SpreadsheetApp.Range",
            "setValues": "fn(values: [[object]]) -> +SpreadsheetApp.Range",
            "setVerticalAlignment": "fn(alignment: string) -> +SpreadsheetApp.Range",
            "setVerticalAlignments": "fn(alignments: [[object]]) -> +SpreadsheetApp.Range",
            "setVerticalText": "fn(isVertical: bool) -> +SpreadsheetApp.Range",
            "setWrap": "fn(isWrapEnabled: bool) -> +SpreadsheetApp.Range",
            "setWrapStrategies": "fn(strategies: [[SpreadsheetApp.WrapStrategy]]) -> +SpreadsheetApp.Range",
            "setWrapStrategy": "fn(strategy: SpreadsheetApp.WrapStrategy) -> +SpreadsheetApp.Range",
            "setWraps": "fn(isWrapEnabled: [[object]]) -> +SpreadsheetApp.Range",
            "shiftColumnGroupDepth": "fn(delta: number) -> +SpreadsheetApp.Range",
            "shiftRowGroupDepth": "fn(delta: number) -> +SpreadsheetApp.Range",
            "sort": "fn(sortSpecObj: object) -> +SpreadsheetApp.Range",
            "splitTextToColumns": "fn(delimiter: string)",
            "uncheck": "fn() -> +SpreadsheetApp.Range",
            "removeDuplicates": "fn(columnsToCompare: [number]) -> +SpreadsheetApp.Range",
            "trimWhitespace": "fn() -> +SpreadsheetApp.Range"
          }
        },
        "SpreadsheetApp.RangeList": {
          "prototype": {
            "activate": "fn() -> +SpreadsheetApp.RangeList",
            "breakApart": "fn() -> +SpreadsheetApp.RangeList",
            "check": "fn() -> +SpreadsheetApp.RangeList",
            "clear": "fn(options: object) -> +SpreadsheetApp.RangeList",
            "clearContent": "fn() -> +SpreadsheetApp.RangeList",
            "clearDataValidations": "fn() -> +SpreadsheetApp.RangeList",
            "clearFormat": "fn() -> +SpreadsheetApp.RangeList",
            "clearNote": "fn() -> +SpreadsheetApp.RangeList",
            "getRanges": "fn() -> [+SpreadsheetApp.Range]",
            "insertCheckboxes": "fn(checkedValue: object, uncheckedValue: object) -> +SpreadsheetApp.RangeList",
            "removeCheckboxes": "fn() -> +SpreadsheetApp.RangeList",
            "setBackground": "fn(color: string) -> +SpreadsheetApp.RangeList",
            "setBackgroundRGB": "fn(red: number, green: number, blue: number) -> +SpreadsheetApp.RangeList",
            "setBorder": "fn(top: bool, left: bool, bottom: bool, right: bool, vertical: bool, horizontal: bool, color: string, style: SpreadsheetApp.BorderStyle) -> +SpreadsheetApp.RangeList",
            "setFontColor": "fn(color: string) -> +SpreadsheetApp.RangeList",
            "setFontFamily": "fn(fontFamily: string) -> +SpreadsheetApp.RangeList",
            "setFontLine": "fn(fontLine: string) -> +SpreadsheetApp.RangeList",
            "setFontSize": "fn(size: number) -> +SpreadsheetApp.RangeList",
            "setFontStyle": "fn(fontStyle: string) -> +SpreadsheetApp.RangeList",
            "setFontWeight": "fn(fontWeight: string) -> +SpreadsheetApp.RangeList",
            "setFormula": "fn(formula: string) -> +SpreadsheetApp.RangeList",
            "setFormulaR1C1": "fn(formula: string) -> +SpreadsheetApp.RangeList",
            "setHorizontalAlignment": "fn(alignment: string) -> +SpreadsheetApp.RangeList",
            "setNote": "fn(note: string) -> +SpreadsheetApp.RangeList",
            "setNumberFormat": "fn(numberFormat: string) -> +SpreadsheetApp.RangeList",
            "setShowHyperlink": "fn(showHyperlink: bool) -> +SpreadsheetApp.RangeList",
            "setTextDirection": "fn(direction: SpreadsheetApp.TextDirection) -> +SpreadsheetApp.RangeList",
            "setTextRotation": "fn(degrees: number) -> +SpreadsheetApp.RangeList",
            "setValue": "fn(value: object) -> +SpreadsheetApp.RangeList",
            "setVerticalAlignment": "fn(alignment: string) -> +SpreadsheetApp.RangeList",
            "setVerticalText": "fn(isVertical: bool) -> +SpreadsheetApp.RangeList",
            "setWrap": "fn(isWrapEnabled: bool) -> +SpreadsheetApp.RangeList",
            "setWrapStrategy": "fn(strategy: SpreadsheetApp.WrapStrategy) -> +SpreadsheetApp.RangeList",
            "uncheck": "fn() -> +SpreadsheetApp.RangeList",
            "trimWhitespace": "fn() -> +SpreadsheetApp.RangeList"
          }
        },
        "SpreadsheetApp.RecalculationInterval": {
          "prototype": {
            "HOUR": "+SpreadsheetApp.RecalculationInterval",
            "MINUTE": "+SpreadsheetApp.RecalculationInterval",
            "ON_CHANGE": "+SpreadsheetApp.RecalculationInterval"
          }
        },
        "SpreadsheetApp.RelativeDate": {
          "prototype": {
            "PAST_MONTH": "+SpreadsheetApp.RelativeDate",
            "PAST_WEEK": "+SpreadsheetApp.RelativeDate",
            "PAST_YEAR": "+SpreadsheetApp.RelativeDate",
            "TODAY": "+SpreadsheetApp.RelativeDate",
            "TOMORROW": "+SpreadsheetApp.RelativeDate",
            "YESTERDAY": "+SpreadsheetApp.RelativeDate"
          }
        },
        "SpreadsheetApp.RichTextValue": {
          "prototype": {
            "copy": "fn() -> +SpreadsheetApp.RichTextValueBuilder",
            "getEndIndex": "fn() -> number",
            "getRuns": "fn() -> [+SpreadsheetApp.RichTextValue]",
            "getStartIndex": "fn() -> number",
            "getText": "fn() -> string",
            "getTextStyle": "fn(startOffset: number, endOffset: number) -> +SpreadsheetApp.TextStyle"
          }
        },
        "SpreadsheetApp.RichTextValueBuilder": {
          "prototype": {
            "build": "fn() -> +SpreadsheetApp.RichTextValue",
            "setText": "fn(text: string) -> +SpreadsheetApp.RichTextValueBuilder",
            "setTextStyle": "fn(textStyle: SpreadsheetApp.TextStyle) -> +SpreadsheetApp.RichTextValueBuilder"
          }
        },
        "SpreadsheetApp.Selection": {
          "prototype": {
            "getActiveRange": "fn() -> +SpreadsheetApp.Range",
            "getActiveRangeList": "fn() -> +SpreadsheetApp.RangeList",
            "getActiveSheet": "fn() -> +SpreadsheetApp.Sheet",
            "getCurrentCell": "fn() -> +SpreadsheetApp.Range",
            "getNextDataRange": "fn(direction: SpreadsheetApp.Direction) -> +SpreadsheetApp.Range"
          }
        },
        "SpreadsheetApp.Sheet": {
          "prototype": {
            "activate": "fn() -> +SpreadsheetApp.Sheet",
            "addDeveloperMetadata": "fn(key: string, value: string, visibility: SpreadsheetApp.DeveloperMetadataVisibility) -> +SpreadsheetApp.Sheet",
            "appendRow": "fn(rowContents: [object]) -> +SpreadsheetApp.Sheet",
            "autoResizeColumn": "fn(columnPosition: number) -> +SpreadsheetApp.Sheet",
            "autoResizeColumns": "fn(startColumn: number, numColumns: number) -> +SpreadsheetApp.Sheet",
            "autoResizeRows": "fn(startRow: number, numRows: number) -> +SpreadsheetApp.Sheet",
            "clear": "fn(options: object) -> +SpreadsheetApp.Sheet",
            "clearConditionalFormatRules": "fn()",
            "clearContents": "fn() -> +SpreadsheetApp.Sheet",
            "clearFormats": "fn() -> +SpreadsheetApp.Sheet",
            "clearNotes": "fn() -> +SpreadsheetApp.Sheet",
            "collapseAllColumnGroups": "fn() -> +SpreadsheetApp.Sheet",
            "collapseAllRowGroups": "fn() -> +SpreadsheetApp.Sheet",
            "copyTo": "fn(spreadsheet: SpreadsheetApp.Spreadsheet) -> +SpreadsheetApp.Sheet",
            "createDeveloperMetadataFinder": "fn() -> +SpreadsheetApp.DeveloperMetadataFinder",
            "createTextFinder": "fn(findText: string) -> +SpreadsheetApp.TextFinder",
            "deleteColumn": "fn(columnPosition: number) -> +SpreadsheetApp.Sheet",
            "deleteColumns": "fn(columnPosition: number, howMany: number)",
            "deleteRow": "fn(rowPosition: number) -> +SpreadsheetApp.Sheet",
            "deleteRows": "fn(rowPosition: number, howMany: number)",
            "expandAllColumnGroups": "fn() -> +SpreadsheetApp.Sheet",
            "expandAllRowGroups": "fn() -> +SpreadsheetApp.Sheet",
            "expandColumnGroupsUpToDepth": "fn(groupDepth: number) -> +SpreadsheetApp.Sheet",
            "expandRowGroupsUpToDepth": "fn(groupDepth: number) -> +SpreadsheetApp.Sheet",
            "getActiveCell": "fn() -> +SpreadsheetApp.Range",
            "getActiveRange": "fn() -> +SpreadsheetApp.Range",
            "getActiveRangeList": "fn() -> +SpreadsheetApp.RangeList",
            "getBandings": "fn() -> [+SpreadsheetApp.Banding]",
            "getCharts": "fn() -> [+SpreadsheetApp.EmbeddedChart]",
            "getColumnGroup": "fn(columnIndex: number, groupDepth: number) -> +SpreadsheetApp.Group",
            "getColumnGroupControlPosition": "fn() -> +SpreadsheetApp.GroupControlTogglePosition",
            "getColumnGroupDepth": "fn(columnIndex: number) -> number",
            "getColumnWidth": "fn(columnPosition: number) -> number",
            "getConditionalFormatRules": "fn() -> [+SpreadsheetApp.ConditionalFormatRule]",
            "getCurrentCell": "fn() -> +SpreadsheetApp.Range",
            "getDataRange": "fn() -> +SpreadsheetApp.Range",
            "getDataSourceTables": "fn() -> [+SpreadsheetApp.DataSourceTable]",
            "getDeveloperMetadata": "fn() -> [+SpreadsheetApp.DeveloperMetadata]",
            "getFilter": "fn() -> +SpreadsheetApp.Filter",
            "getFormUrl": "fn() -> string",
            "getFrozenColumns": "fn() -> number",
            "getFrozenRows": "fn() -> number",
            "getImages": "fn() -> [+SpreadsheetApp.OverGridImage]",
            "getIndex": "fn() -> number",
            "getLastColumn": "fn() -> number",
            "getLastRow": "fn() -> number",
            "getMaxColumns": "fn() -> number",
            "getMaxRows": "fn() -> number",
            "getName": "fn() -> string",
            "getNamedRanges": "fn() -> [+SpreadsheetApp.NamedRange]",
            "getParent": "fn() -> +SpreadsheetApp.Spreadsheet",
            "getPivotTables": "fn() -> [+SpreadsheetApp.PivotTable]",
            "getProtections": "fn(type: SpreadsheetApp.ProtectionType) -> [+SpreadsheetApp.Protection]",
            "getRange": "fn(a1Notation: string) -> +SpreadsheetApp.Range",
            "getRangeList": "fn(a1Notations: [string]) -> +SpreadsheetApp.RangeList",
            "getRowGroup": "fn(rowIndex: number, groupDepth: number) -> +SpreadsheetApp.Group",
            "getRowGroupControlPosition": "fn() -> +SpreadsheetApp.GroupControlTogglePosition",
            "getRowGroupDepth": "fn(rowIndex: number) -> number",
            "getRowHeight": "fn(rowPosition: number) -> number",
            "getSelection": "fn() -> +SpreadsheetApp.Selection",
            "getSheetId": "fn() -> number",
            "getSheetName": "fn() -> string",
            "getSheetProtection": "fn() -> +SpreadsheetApp.PageProtection",
            "getSheetValues": "fn(startRow: number, startColumn: number, numRows: number, numColumns: number) -> [[object]]",
            "getTabColor": "fn() -> string",
            "getType": "fn() -> +SpreadsheetApp.SheetType",
            "hasHiddenGridlines": "fn() -> bool",
            "hideColumn": "fn(column: SpreadsheetApp.Range)",
            "hideColumns": "fn(columnIndex: number, numColumns: number)",
            "hideRow": "fn(row: SpreadsheetApp.Range)",
            "hideRows": "fn(rowIndex: number, numRows: number)",
            "hideSheet": "fn() -> +SpreadsheetApp.Sheet",
            "insertChart": "fn(chart: SpreadsheetApp.EmbeddedChart)",
            "insertColumnAfter": "fn(afterPosition: number) -> +SpreadsheetApp.Sheet",
            "insertColumnBefore": "fn(beforePosition: number) -> +SpreadsheetApp.Sheet",
            "insertColumns": "fn(columnIndex: number, numColumns: number)",
            "insertColumnsAfter": "fn(afterPosition: number, howMany: number) -> +SpreadsheetApp.Sheet",
            "insertColumnsBefore": "fn(beforePosition: number, howMany: number) -> +SpreadsheetApp.Sheet",
            "insertImage": "fn(url: string, column: number, row: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.OverGridImage",
            "insertRowAfter": "fn(afterPosition: number) -> +SpreadsheetApp.Sheet",
            "insertRowBefore": "fn(beforePosition: number) -> +SpreadsheetApp.Sheet",
            "insertRows": "fn(rowIndex: number, numRows: number)",
            "insertRowsAfter": "fn(afterPosition: number, howMany: number) -> +SpreadsheetApp.Sheet",
            "insertRowsBefore": "fn(beforePosition: number, howMany: number) -> +SpreadsheetApp.Sheet",
            "isColumnHiddenByUser": "fn(columnPosition: number) -> bool",
            "isRightToLeft": "fn() -> bool",
            "isRowHiddenByFilter": "fn(rowPosition: number) -> bool",
            "isRowHiddenByUser": "fn(rowPosition: number) -> bool",
            "isSheetHidden": "fn() -> bool",
            "moveColumns": "fn(columnSpec: SpreadsheetApp.Range, destinationIndex: number)",
            "moveRows": "fn(rowSpec: SpreadsheetApp.Range, destinationIndex: number)",
            "newChart": "fn() -> +SpreadsheetApp.EmbeddedChartBuilder",
            "protect": "fn() -> +SpreadsheetApp.Protection",
            "removeChart": "fn(chart: SpreadsheetApp.EmbeddedChart)",
            "setActiveRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.Range",
            "setActiveRangeList": "fn(rangeList: SpreadsheetApp.RangeList) -> +SpreadsheetApp.RangeList",
            "setActiveSelection": "fn(a1Notation: string) -> +SpreadsheetApp.Range",
            "setColumnGroupControlPosition": "fn(position: SpreadsheetApp.GroupControlTogglePosition) -> +SpreadsheetApp.Sheet",
            "setColumnWidth": "fn(columnPosition: number, width: number) -> +SpreadsheetApp.Sheet",
            "setColumnWidths": "fn(startColumn: number, numColumns: number, width: number) -> +SpreadsheetApp.Sheet",
            "setConditionalFormatRules": "fn(rules: [SpreadsheetApp.ConditionalFormatRule])",
            "setCurrentCell": "fn(cell: SpreadsheetApp.Range) -> +SpreadsheetApp.Range",
            "setFrozenColumns": "fn(columns: number)",
            "setFrozenRows": "fn(rows: number)",
            "setHiddenGridlines": "fn(hideGridlines: bool) -> +SpreadsheetApp.Sheet",
            "setName": "fn(name: string) -> +SpreadsheetApp.Sheet",
            "setRightToLeft": "fn(rightToLeft: bool) -> +SpreadsheetApp.Sheet",
            "setRowGroupControlPosition": "fn(position: SpreadsheetApp.GroupControlTogglePosition) -> +SpreadsheetApp.Sheet",
            "setRowHeight": "fn(rowPosition: number, height: number) -> +SpreadsheetApp.Sheet",
            "setRowHeights": "fn(startRow: number, numRows: number, height: number) -> +SpreadsheetApp.Sheet",
            "setSheetProtection": "fn(permissions: SpreadsheetApp.PageProtection)",
            "setTabColor": "fn(color: string) -> +SpreadsheetApp.Sheet",
            "showColumns": "fn(columnIndex: number, numColumns: number)",
            "showRows": "fn(rowIndex: number, numRows: number)",
            "showSheet": "fn() -> +SpreadsheetApp.Sheet",
            "sort": "fn(columnPosition: number, ascending: bool) -> +SpreadsheetApp.Sheet",
            "unhideColumn": "fn(column: SpreadsheetApp.Range)",
            "unhideRow": "fn(row: SpreadsheetApp.Range)",
            "updateChart": "fn(chart: SpreadsheetApp.EmbeddedChart)"
          }
        },
        "SpreadsheetApp.SheetType": {
          "prototype": {
            "GRID": "+SpreadsheetApp.SheetType",
            "OBJECT": "+SpreadsheetApp.SheetType"
          }
        },
        "SpreadsheetApp.Spreadsheet": {
          "prototype": {
            "addDeveloperMetadata": "fn(key: string, value: string, visibility: SpreadsheetApp.DeveloperMetadataVisibility) -> +SpreadsheetApp.Spreadsheet",
            "addEditor": "fn(user: User) -> +SpreadsheetApp.Spreadsheet",
            "addEditors": "fn(emailAddresses: [string]) -> +SpreadsheetApp.Spreadsheet",
            "addMenu": "fn(name: string, subMenus: [object])",
            "addViewer": "fn(user: User) -> +SpreadsheetApp.Spreadsheet",
            "addViewers": "fn(emailAddresses: [string]) -> +SpreadsheetApp.Spreadsheet",
            "appendRow": "fn(rowContents: [object]) -> +SpreadsheetApp.Sheet",
            "autoResizeColumn": "fn(columnPosition: number) -> +SpreadsheetApp.Sheet",
            "copy": "fn(name: string) -> +SpreadsheetApp.Spreadsheet",
            "createDeveloperMetadataFinder": "fn() -> +SpreadsheetApp.DeveloperMetadataFinder",
            "createTextFinder": "fn(findText: string) -> +SpreadsheetApp.TextFinder",
            "deleteActiveSheet": "fn() -> +SpreadsheetApp.Sheet",
            "deleteColumn": "fn(columnPosition: number) -> +SpreadsheetApp.Sheet",
            "deleteColumns": "fn(columnPosition: number, howMany: number)",
            "deleteRow": "fn(rowPosition: number) -> +SpreadsheetApp.Sheet",
            "deleteRows": "fn(rowPosition: number, howMany: number)",
            "deleteSheet": "fn(sheet: SpreadsheetApp.Sheet)",
            "duplicateActiveSheet": "fn() -> +SpreadsheetApp.Sheet",
            "getActiveCell": "fn() -> +SpreadsheetApp.Range",
            "getActiveRange": "fn() -> +SpreadsheetApp.Range",
            "getActiveRangeList": "fn() -> +SpreadsheetApp.RangeList",
            "getActiveSheet": "fn() -> +SpreadsheetApp.Sheet",
            "getAs": "fn(contentType: string) -> Blob",
            "getBandings": "fn() -> [+SpreadsheetApp.Banding]",
            "getBlob": "fn() -> Blob",
            "getColumnWidth": "fn(columnPosition: number) -> number",
            "getCurrentCell": "fn() -> +SpreadsheetApp.Range",
            "getDataRange": "fn() -> +SpreadsheetApp.Range",
            "getDataSourceTables": "fn() -> [+SpreadsheetApp.DataSourceTable]",
            "getDeveloperMetadata": "fn() -> [+SpreadsheetApp.DeveloperMetadata]",
            "getEditors": "fn() -> [User]",
            "getFormUrl": "fn() -> string",
            "getFrozenColumns": "fn() -> number",
            "getFrozenRows": "fn() -> number",
            "getId": "fn() -> string",
            "getImages": "fn() -> [+SpreadsheetApp.OverGridImage]",
            "getIterativeCalculationConvergenceThreshold": "fn() -> number",
            "getLastColumn": "fn() -> number",
            "getLastRow": "fn() -> number",
            "getMaxIterativeCalculationCycles": "fn() -> number",
            "getName": "fn() -> string",
            "getNamedRanges": "fn() -> [+SpreadsheetApp.NamedRange]",
            "getNumSheets": "fn() -> number",
            "getOwner": "fn() -> User",
            "getProtections": "fn(type: SpreadsheetApp.ProtectionType) -> [+SpreadsheetApp.Protection]",
            "getRange": "fn(a1Notation: string) -> +SpreadsheetApp.Range",
            "getRangeByName": "fn(name: string) -> +SpreadsheetApp.Range",
            "getRangeList": "fn(a1Notations: [string]) -> +SpreadsheetApp.RangeList",
            "getRecalculationInterval": "fn() -> +SpreadsheetApp.RecalculationInterval",
            "getRowHeight": "fn(rowPosition: number) -> number",
            "getSelection": "fn() -> +SpreadsheetApp.Selection",
            "getSheetByName": "fn(name: string) -> +SpreadsheetApp.Sheet",
            "getSheetId": "fn() -> number",
            "getSheetName": "fn() -> string",
            "getSheetProtection": "fn() -> +SpreadsheetApp.PageProtection",
            "getSheetValues": "fn(startRow: number, startColumn: number, numRows: number, numColumns: number) -> [[object]]",
            "getSheets": "fn() -> [+SpreadsheetApp.Sheet]",
            "getSpreadsheetLocale": "fn() -> string",
            "getSpreadsheetTimeZone": "fn() -> string",
            "getUrl": "fn() -> string",
            "getViewers": "fn() -> [User]",
            "hideColumn": "fn(column: SpreadsheetApp.Range)",
            "hideRow": "fn(row: SpreadsheetApp.Range)",
            "insertColumnAfter": "fn(afterPosition: number) -> +SpreadsheetApp.Sheet",
            "insertColumnBefore": "fn(beforePosition: number) -> +SpreadsheetApp.Sheet",
            "insertColumnsAfter": "fn(afterPosition: number, howMany: number) -> +SpreadsheetApp.Sheet",
            "insertColumnsBefore": "fn(beforePosition: number, howMany: number) -> +SpreadsheetApp.Sheet",
            "insertImage": "fn(url: string, column: number, row: number, offsetX: number, offsetY: number) -> +SpreadsheetApp.OverGridImage",
            "insertRowAfter": "fn(afterPosition: number) -> +SpreadsheetApp.Sheet",
            "insertRowBefore": "fn(beforePosition: number) -> +SpreadsheetApp.Sheet",
            "insertRowsAfter": "fn(afterPosition: number, howMany: number) -> +SpreadsheetApp.Sheet",
            "insertRowsBefore": "fn(beforePosition: number, howMany: number) -> +SpreadsheetApp.Sheet",
            "insertSheet": "fn(sheetName: string, options: object) -> +SpreadsheetApp.Sheet",
            "insertSheetWithDataSourceTable": "fn(spec: SpreadsheetApp.DataSourceSpec) -> +SpreadsheetApp.Sheet",
            "isAnonymousView": "fn() -> bool",
            "isAnonymousWrite": "fn() -> bool",
            "isColumnHiddenByUser": "fn(columnPosition: number) -> bool",
            "isIterativeCalculationEnabled": "fn() -> bool",
            "isRowHiddenByFilter": "fn(rowPosition: number) -> bool",
            "isRowHiddenByUser": "fn(rowPosition: number) -> bool",
            "moveActiveSheet": "fn(pos: number)",
            "moveChartToObjectSheet": "fn(chart: SpreadsheetApp.EmbeddedChart) -> +SpreadsheetApp.Sheet",
            "removeEditor": "fn(user: User) -> +SpreadsheetApp.Spreadsheet",
            "removeMenu": "fn(name: string)",
            "removeNamedRange": "fn(name: string)",
            "removeViewer": "fn(user: User) -> +SpreadsheetApp.Spreadsheet",
            "rename": "fn(newName: string)",
            "renameActiveSheet": "fn(newName: string)",
            "setActiveRange": "fn(range: SpreadsheetApp.Range) -> +SpreadsheetApp.Range",
            "setActiveRangeList": "fn(rangeList: SpreadsheetApp.RangeList) -> +SpreadsheetApp.RangeList",
            "setActiveSelection": "fn(a1Notation: string) -> +SpreadsheetApp.Range",
            "setActiveSheet": "fn(sheet: SpreadsheetApp.Sheet, restoreSelection: bool) -> +SpreadsheetApp.Sheet",
            "setAnonymousAccess": "fn(anonymousReadAllowed: bool, anonymousWriteAllowed: bool)",
            "setColumnWidth": "fn(columnPosition: number, width: number) -> +SpreadsheetApp.Sheet",
            "setCurrentCell": "fn(cell: SpreadsheetApp.Range) -> +SpreadsheetApp.Range",
            "setFrozenColumns": "fn(columns: number)",
            "setFrozenRows": "fn(rows: number)",
            "setIterativeCalculationConvergenceThreshold": "fn(minThreshold: number) -> +SpreadsheetApp.Spreadsheet",
            "setIterativeCalculationEnabled": "fn(isEnabled: bool) -> +SpreadsheetApp.Spreadsheet",
            "setMaxIterativeCalculationCycles": "fn(maxIterations: number) -> +SpreadsheetApp.Spreadsheet",
            "setNamedRange": "fn(name: string, range: SpreadsheetApp.Range)",
            "setRecalculationInterval": "fn(recalculationInterval: SpreadsheetApp.RecalculationInterval) -> +SpreadsheetApp.Spreadsheet",
            "setRowHeight": "fn(rowPosition: number, height: number) -> +SpreadsheetApp.Sheet",
            "setSheetProtection": "fn(permissions: SpreadsheetApp.PageProtection)",
            "setSpreadsheetLocale": "fn(locale: string)",
            "setSpreadsheetTimeZone": "fn(timezone: string)",
            "show": "fn(userInterface: object)",
            "sort": "fn(columnPosition: number, ascending: bool) -> +SpreadsheetApp.Sheet",
            "toast": "fn(msg: string, title: string, timeoutSeconds: number)",
            "unhideColumn": "fn(column: SpreadsheetApp.Range)",
            "unhideRow": "fn(row: SpreadsheetApp.Range)",
            "updateMenu": "fn(name: string, subMenus: [object])"
          }
        },
        "SpreadsheetApp.TextDirection": {
          "prototype": {
            "LEFT_TO_RIGHT": "+SpreadsheetApp.TextDirection",
            "RIGHT_TO_LEFT": "+SpreadsheetApp.TextDirection"
          }
        },
        "SpreadsheetApp.TextFinder": {
          "prototype": {
            "findAll": "fn() -> [+SpreadsheetApp.Range]",
            "findNext": "fn() -> +SpreadsheetApp.Range",
            "findPrevious": "fn() -> +SpreadsheetApp.Range",
            "getCurrentMatch": "fn() -> +SpreadsheetApp.Range",
            "ignoreDiacritics": "fn(ignoreDiacritics: bool) -> +SpreadsheetApp.TextFinder",
            "matchCase": "fn(matchCase: bool) -> +SpreadsheetApp.TextFinder",
            "matchEntireCell": "fn(matchEntireCell: bool) -> +SpreadsheetApp.TextFinder",
            "matchFormulaText": "fn(matchFormulaText: bool) -> +SpreadsheetApp.TextFinder",
            "replaceAllWith": "fn(replaceText: string) -> number",
            "replaceWith": "fn(replaceText: string) -> number",
            "startFrom": "fn(startRange: SpreadsheetApp.Range) -> +SpreadsheetApp.TextFinder",
            "useRegularExpression": "fn(useRegEx: bool) -> +SpreadsheetApp.TextFinder"
          }
        },
        "SpreadsheetApp.TextRotation": {
          "prototype": {
            "getDegrees": "fn() -> number",
            "isVertical": "fn() -> bool"
          }
        },
        "SpreadsheetApp.TextStyle": {
          "prototype": {
            "copy": "fn() -> +SpreadsheetApp.TextStyleBuilder",
            "getFontFamily": "fn() -> string",
            "getFontSize": "fn() -> number",
            "getForegroundColor": "fn() -> string",
            "isBold": "fn() -> bool",
            "isItalic": "fn() -> bool",
            "isStrikethrough": "fn() -> bool",
            "isUnderline": "fn() -> bool"
          }
        },
        "SpreadsheetApp.TextStyleBuilder": {
          "prototype": {
            "build": "fn() -> +SpreadsheetApp.TextStyle",
            "setBold": "fn(bold: bool) -> +SpreadsheetApp.TextStyleBuilder",
            "setFontFamily": "fn(fontFamily: string) -> +SpreadsheetApp.TextStyleBuilder",
            "setFontSize": "fn(fontSize: number) -> +SpreadsheetApp.TextStyleBuilder",
            "setForegroundColor": "fn(cssString: string) -> +SpreadsheetApp.TextStyleBuilder",
            "setItalic": "fn(italic: bool) -> +SpreadsheetApp.TextStyleBuilder",
            "setStrikethrough": "fn(strikethrough: bool) -> +SpreadsheetApp.TextStyleBuilder",
            "setUnderline": "fn(underline: bool) -> +SpreadsheetApp.TextStyleBuilder"
          }
        },
        "SpreadsheetApp.TextToColumnsDelimiter": {
          "prototype": {
            "COMMA": "+SpreadsheetApp.TextToColumnsDelimiter",
            "PERIOD": "+SpreadsheetApp.TextToColumnsDelimiter",
            "SEMICOLON": "+SpreadsheetApp.TextToColumnsDelimiter",
            "SPACE": "+SpreadsheetApp.TextToColumnsDelimiter"
          }
        },
        "SpreadsheetApp.WrapStrategy": {
          "prototype": {
            "CLIP": "+SpreadsheetApp.WrapStrategy",
            "OVERFLOW": "+SpreadsheetApp.WrapStrategy",
            "WRAP": "+SpreadsheetApp.WrapStrategy"
          }
        }
      }
    },
    {
      "!name": "UrlFetchApp",
      "UrlFetchApp": {
        "fetch": "fn(url: string, params: object) -> +UrlFetchApp.HTTPResponse",
        "fetchAll": "fn(requests: [object]) -> [+UrlFetchApp.HTTPResponse]",
        "getRequest": "fn(url: string, params: object) -> object"
      },
      "!define": {
        "UrlFetchApp.HTTPResponse": {
          "prototype": {
            "getAllHeaders": "fn() -> object",
            "getAs": "fn(contentType: string) -> Blob",
            "getBlob": "fn() -> Blob",
            "getContent": "fn() -> [number]",
            "getContentText": "fn(charset: string) -> string",
            "getHeaders": "fn() -> object",
            "getResponseCode": "fn() -> number"
          }
        }
      }
    },
    {
      "!name": "Utilities",
      "Utilities": {
        "base64Decode": "fn(encoded: string, charset: Utilities.Charset) -> [number]",
        "base64DecodeWebSafe": "fn(encoded: string, charset: Utilities.Charset) -> [number]",
        "base64Encode": "fn(data: string, charset: Utilities.Charset) -> string",
        "base64EncodeWebSafe": "fn(data: string, charset: Utilities.Charset) -> string",
        "computeDigest": "fn(algorithm: DigestAlgorithm, value: string, charset: Utilities.Charset) -> [number]",
        "computeHmacSha256Signature": "fn(value: string, key: string, charset: Utilities.Charset) -> [number]",
        "computeHmacSignature": "fn(algorithm: Utilities.MacAlgorithm, value: string, key: string, charset: Utilities.Charset) -> [number]",
        "computeRsaSha1Signature": "fn(value: string, key: string, charset: Utilities.Charset) -> [number]",
        "computeRsaSha256Signature": "fn(value: string, key: string, charset: Utilities.Charset) -> [number]",
        "computeRsaSignature": "fn(algorithm: Utilities.RsaAlgorithm, value: string, key: string, charset: Utilities.Charset) -> [number]",
        "formatDate": "fn(date: +Date, timeZone: string, format: string) -> string",
        "formatString": "fn(template: string, args: object...) -> string",
        "getUuid": "fn() -> string",
        "gzip": "fn(blob: BlobSource, name: string) -> Blob",
        "jsonParse": "fn(jsonString: string) -> object",
        "jsonStringify": "fn(obj: object) -> string",
        "newBlob": "fn(data: string, contentType: string, name: string) -> Blob",
        "parseCsv": "fn(csv: string, delimiter: string) -> [[string]]",
        "sleep": "fn(milliseconds: number)",
        "ungzip": "fn(blob: BlobSource) -> Blob",
        "unzip": "fn(blob: BlobSource) -> [Blob]",
        "zip": "fn(blobs: [BlobSource], name: string) -> Blob",
        "Charset": "+Utilities.Charset",
        "DigestAlgorithm": "DigestAlgorithm",
        "MacAlgorithm": "+Utilities.MacAlgorithm",
        "RsaAlgorithm": "+Utilities.RsaAlgorithm"
      },
      "!define": {
        "Utilities.Charset": {
          "prototype": {
            "US_ASCII": "+Utilities.Charset",
            "UTF_8": "+Utilities.Charset"
          }
        },
        "Utilities.MacAlgorithm": {
          "prototype": {
            "HMAC_MD5": "+Utilities.MacAlgorithm",
            "HMAC_SHA_1": "+Utilities.MacAlgorithm",
            "HMAC_SHA_256": "+Utilities.MacAlgorithm",
            "HMAC_SHA_384": "+Utilities.MacAlgorithm",
            "HMAC_SHA_512": "+Utilities.MacAlgorithm"
          }
        },
        "Utilities.RsaAlgorithm": {
          "prototype": {
            "RSA_SHA_1": "+Utilities.RsaAlgorithm",
            "RSA_SHA_256": "+Utilities.RsaAlgorithm"
          }
        }
      }
    },
    {
      "!name": "XmlService",
      "XmlService": {
        "createCdata": "fn(text: string) -> +XmlService.Cdata",
        "createComment": "fn(text: string) -> +XmlService.Comment",
        "createDocType": "fn(elementName: string, publicId: string, systemId: string) -> +XmlService.DocType",
        "createDocument": "fn(rootElement: XmlService.Element) -> +XmlService.Document",
        "createElement": "fn(name: string, namespace: XmlService.Namespace) -> +XmlService.Element",
        "createText": "fn(text: string) -> +XmlService.Text",
        "getCompactFormat": "fn() -> +XmlService.Format",
        "getNamespace": "fn(prefix: string, uri: string) -> +XmlService.Namespace",
        "getNoNamespace": "fn() -> +XmlService.Namespace",
        "getPrettyFormat": "fn() -> +XmlService.Format",
        "getRawFormat": "fn() -> +XmlService.Format",
        "getXmlNamespace": "fn() -> +XmlService.Namespace",
        "parse": "fn(xml: string) -> +XmlService.Document",
        "ContentTypes": "+XmlService.ContentType"
      },
      "!define": {
        "XmlService.Attribute": {
          "prototype": {
            "getName": "fn() -> string",
            "getNamespace": "fn() -> +XmlService.Namespace",
            "getValue": "fn() -> string",
            "setName": "fn(name: string) -> +XmlService.Attribute",
            "setNamespace": "fn(namespace: XmlService.Namespace) -> +XmlService.Attribute",
            "setValue": "fn(value: string) -> +XmlService.Attribute"
          }
        },
        "XmlService.Cdata": {
          "prototype": {
            "append": "fn(text: string) -> +XmlService.Text",
            "detach": "fn() -> +XmlService.Content",
            "getParentElement": "fn() -> +XmlService.Element",
            "getText": "fn() -> string",
            "getValue": "fn() -> string",
            "setText": "fn(text: string) -> +XmlService.Text"
          }
        },
        "XmlService.Comment": {
          "prototype": {
            "detach": "fn() -> +XmlService.Content",
            "getParentElement": "fn() -> +XmlService.Element",
            "getText": "fn() -> string",
            "getValue": "fn() -> string",
            "setText": "fn(text: string) -> +XmlService.Comment"
          }
        },
        "XmlService.Content": {
          "prototype": {
            "asCdata": "fn() -> +XmlService.Cdata",
            "asComment": "fn() -> +XmlService.Comment",
            "asDocType": "fn() -> +XmlService.DocType",
            "asElement": "fn() -> +XmlService.Element",
            "asEntityRef": "fn() -> +XmlService.EntityRef",
            "asProcessingInstruction": "fn() -> +XmlService.ProcessingInstruction",
            "asText": "fn() -> +XmlService.Text",
            "detach": "fn() -> +XmlService.Content",
            "getParentElement": "fn() -> +XmlService.Element",
            "getType": "fn() -> +XmlService.ContentType",
            "getValue": "fn() -> string"
          }
        },
        "XmlService.ContentType": {
          "prototype": {
            "CDATA": "+XmlService.ContentType",
            "COMMENT": "+XmlService.ContentType",
            "DOCTYPE": "+XmlService.ContentType",
            "ELEMENT": "+XmlService.ContentType",
            "ENTITYREF": "+XmlService.ContentType",
            "PROCESSINGINSTRUCTION": "+XmlService.ContentType",
            "TEXT": "+XmlService.ContentType"
          }
        },
        "XmlService.DocType": {
          "prototype": {
            "detach": "fn() -> +XmlService.Content",
            "getElementName": "fn() -> string",
            "getInternalSubset": "fn() -> string",
            "getParentElement": "fn() -> +XmlService.Element",
            "getPublicId": "fn() -> string",
            "getSystemId": "fn() -> string",
            "getValue": "fn() -> string",
            "setElementName": "fn(name: string) -> +XmlService.DocType",
            "setInternalSubset": "fn(data: string) -> +XmlService.DocType",
            "setPublicId": "fn(id: string) -> +XmlService.DocType",
            "setSystemId": "fn(id: string) -> +XmlService.DocType"
          }
        },
        "XmlService.Document": {
          "prototype": {
            "addContent": "fn(content: XmlService.Content) -> +XmlService.Document",
            "cloneContent": "fn() -> [+XmlService.Content]",
            "detachRootElement": "fn() -> +XmlService.Element",
            "getAllContent": "fn() -> [+XmlService.Content]",
            "getContent": "fn(index: number) -> +XmlService.Content",
            "getContentSize": "fn() -> number",
            "getDescendants": "fn() -> [+XmlService.Content]",
            "getDocType": "fn() -> +XmlService.DocType",
            "getRootElement": "fn() -> +XmlService.Element",
            "hasRootElement": "fn() -> bool",
            "removeContent": "fn(content: XmlService.Content) -> bool",
            "setDocType": "fn(docType: XmlService.DocType) -> +XmlService.Document",
            "setRootElement": "fn(element: XmlService.Element) -> +XmlService.Document"
          }
        },
        "XmlService.Element": {
          "prototype": {
            "addContent": "fn(content: XmlService.Content) -> +XmlService.Element",
            "cloneContent": "fn() -> [+XmlService.Content]",
            "detach": "fn() -> +XmlService.Content",
            "getAllContent": "fn() -> [+XmlService.Content]",
            "getAttribute": "fn(name: string, namespace: XmlService.Namespace) -> +XmlService.Attribute",
            "getAttributes": "fn() -> [+XmlService.Attribute]",
            "getChild": "fn(name: string, namespace: XmlService.Namespace) -> +XmlService.Element",
            "getChildText": "fn(name: string, namespace: XmlService.Namespace) -> string",
            "getChildren": "fn(name: string, namespace: XmlService.Namespace) -> [+XmlService.Element]",
            "getContent": "fn(index: number) -> +XmlService.Content",
            "getContentSize": "fn() -> number",
            "getDescendants": "fn() -> [+XmlService.Content]",
            "getDocument": "fn() -> +XmlService.Document",
            "getName": "fn() -> string",
            "getNamespace": "fn(prefix: string) -> +XmlService.Namespace",
            "getParentElement": "fn() -> +XmlService.Element",
            "getQualifiedName": "fn() -> string",
            "getText": "fn() -> string",
            "getValue": "fn() -> string",
            "isAncestorOf": "fn(other: XmlService.Element) -> bool",
            "isRootElement": "fn() -> bool",
            "removeAttribute": "fn(attribute: XmlService.Attribute) -> bool",
            "removeContent": "fn(content: XmlService.Content) -> bool",
            "setAttribute": "fn(attribute: XmlService.Attribute) -> +XmlService.Element",
            "setName": "fn(name: string) -> +XmlService.Element",
            "setNamespace": "fn(namespace: XmlService.Namespace) -> +XmlService.Element",
            "setText": "fn(text: string) -> +XmlService.Element"
          }
        },
        "XmlService.EntityRef": {
          "prototype": {
            "detach": "fn() -> +XmlService.Content",
            "getName": "fn() -> string",
            "getParentElement": "fn() -> +XmlService.Element",
            "getPublicId": "fn() -> string",
            "getSystemId": "fn() -> string",
            "getValue": "fn() -> string",
            "setName": "fn(name: string) -> +XmlService.EntityRef",
            "setPublicId": "fn(id: string) -> +XmlService.EntityRef",
            "setSystemId": "fn(id: string) -> +XmlService.EntityRef"
          }
        },
        "XmlService.Format": {
          "prototype": {
            "format": "fn(element: XmlService.Element) -> string",
            "setEncoding": "fn(encoding: string) -> +XmlService.Format",
            "setIndent": "fn(indent: string) -> +XmlService.Format",
            "setLineSeparator": "fn(separator: string) -> +XmlService.Format",
            "setOmitDeclaration": "fn(omitDeclaration: bool) -> +XmlService.Format",
            "setOmitEncoding": "fn(omitEncoding: bool) -> +XmlService.Format"
          }
        },
        "XmlService.Namespace": {
          "prototype": {
            "getPrefix": "fn() -> string",
            "getURI": "fn() -> string"
          }
        },
        "XmlService.ProcessingInstruction": {
          "prototype": {
            "detach": "fn() -> +XmlService.Content",
            "getData": "fn() -> string",
            "getParentElement": "fn() -> +XmlService.Element",
            "getTarget": "fn() -> string",
            "getValue": "fn() -> string"
          }
        },
        "XmlService.Text": {
          "prototype": {
            "append": "fn(text: string) -> +XmlService.Text",
            "detach": "fn() -> +XmlService.Content",
            "getParentElement": "fn() -> +XmlService.Element",
            "getText": "fn() -> string",
            "getValue": "fn() -> string",
            "setText": "fn(text: string) -> +XmlService.Text"
          }
        }
      }
    },
    {
      "!name": "Analytics",
      "Analytics": {
        "newAccount": "fn() -> +Analytics.V3.Schema.Account",
        "newAccountChildLink": "fn() -> +Analytics.V3.Schema.AccountChildLink",
        "newAccountPermissions": "fn() -> +Analytics.V3.Schema.AccountPermissions",
        "newAccountRef": "fn() -> +Analytics.V3.Schema.AccountRef",
        "newAccountTicket": "fn() -> +Analytics.V3.Schema.AccountTicket",
        "newAccountTreeRequest": "fn() -> +Analytics.V3.Schema.AccountTreeRequest",
        "newAdWordsAccount": "fn() -> +Analytics.V3.Schema.AdWordsAccount",
        "newAnalyticsDataimportDeleteUploadDataRequest": "fn() -> +Analytics.V3.Schema.AnalyticsDataimportDeleteUploadDataRequest",
        "newCustomDimension": "fn() -> +Analytics.V3.Schema.CustomDimension",
        "newCustomDimensionParentLink": "fn() -> +Analytics.V3.Schema.CustomDimensionParentLink",
        "newCustomMetric": "fn() -> +Analytics.V3.Schema.CustomMetric",
        "newCustomMetricParentLink": "fn() -> +Analytics.V3.Schema.CustomMetricParentLink",
        "newEntityAdWordsLink": "fn() -> +Analytics.V3.Schema.EntityAdWordsLink",
        "newEntityAdWordsLinkEntity": "fn() -> +Analytics.V3.Schema.EntityAdWordsLinkEntity",
        "newEntityUserLink": "fn() -> +Analytics.V3.Schema.EntityUserLink",
        "newEntityUserLinkEntity": "fn() -> +Analytics.V3.Schema.EntityUserLinkEntity",
        "newEntityUserLinkPermissions": "fn() -> +Analytics.V3.Schema.EntityUserLinkPermissions",
        "newExperiment": "fn() -> +Analytics.V3.Schema.Experiment",
        "newExperimentParentLink": "fn() -> +Analytics.V3.Schema.ExperimentParentLink",
        "newExperimentVariations": "fn() -> +Analytics.V3.Schema.ExperimentVariations",
        "newFilter": "fn() -> +Analytics.V3.Schema.Filter",
        "newFilterAdvancedDetails": "fn() -> +Analytics.V3.Schema.FilterAdvancedDetails",
        "newFilterExpression": "fn() -> +Analytics.V3.Schema.FilterExpression",
        "newFilterLowercaseDetails": "fn() -> +Analytics.V3.Schema.FilterLowercaseDetails",
        "newFilterParentLink": "fn() -> +Analytics.V3.Schema.FilterParentLink",
        "newFilterRef": "fn() -> +Analytics.V3.Schema.FilterRef",
        "newFilterSearchAndReplaceDetails": "fn() -> +Analytics.V3.Schema.FilterSearchAndReplaceDetails",
        "newFilterUppercaseDetails": "fn() -> +Analytics.V3.Schema.FilterUppercaseDetails",
        "newGoal": "fn() -> +Analytics.V3.Schema.Goal",
        "newGoalEventDetails": "fn() -> +Analytics.V3.Schema.GoalEventDetails",
        "newGoalEventDetailsEventConditions": "fn() -> +Analytics.V3.Schema.GoalEventDetailsEventConditions",
        "newGoalParentLink": "fn() -> +Analytics.V3.Schema.GoalParentLink",
        "newGoalUrlDestinationDetails": "fn() -> +Analytics.V3.Schema.GoalUrlDestinationDetails",
        "newGoalUrlDestinationDetailsSteps": "fn() -> +Analytics.V3.Schema.GoalUrlDestinationDetailsSteps",
        "newGoalVisitNumPagesDetails": "fn() -> +Analytics.V3.Schema.GoalVisitNumPagesDetails",
        "newGoalVisitTimeOnSiteDetails": "fn() -> +Analytics.V3.Schema.GoalVisitTimeOnSiteDetails",
        "newHashClientIdRequest": "fn() -> +Analytics.V3.Schema.HashClientIdRequest",
        "newIncludeConditions": "fn() -> +Analytics.V3.Schema.IncludeConditions",
        "newLinkedForeignAccount": "fn() -> +Analytics.V3.Schema.LinkedForeignAccount",
        "newProfile": "fn() -> +Analytics.V3.Schema.Profile",
        "newProfileChildLink": "fn() -> +Analytics.V3.Schema.ProfileChildLink",
        "newProfileFilterLink": "fn() -> +Analytics.V3.Schema.ProfileFilterLink",
        "newProfileParentLink": "fn() -> +Analytics.V3.Schema.ProfileParentLink",
        "newProfilePermissions": "fn() -> +Analytics.V3.Schema.ProfilePermissions",
        "newProfileRef": "fn() -> +Analytics.V3.Schema.ProfileRef",
        "newRemarketingAudience": "fn() -> +Analytics.V3.Schema.RemarketingAudience",
        "newRemarketingAudienceAudienceDefinition": "fn() -> +Analytics.V3.Schema.RemarketingAudienceAudienceDefinition",
        "newRemarketingAudienceStateBasedAudienceDefinition": "fn() -> +Analytics.V3.Schema.RemarketingAudienceStateBasedAudienceDefinition",
        "newRemarketingAudienceStateBasedAudienceDefinitionExcludeConditions": "fn() -> +Analytics.V3.Schema.RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions",
        "newUnsampledReport": "fn() -> +Analytics.V3.Schema.UnsampledReport",
        "newUnsampledReportCloudStorageDownloadDetails": "fn() -> +Analytics.V3.Schema.UnsampledReportCloudStorageDownloadDetails",
        "newUnsampledReportDriveDownloadDetails": "fn() -> +Analytics.V3.Schema.UnsampledReportDriveDownloadDetails",
        "newUserDeletionRequest": "fn() -> +Analytics.V3.Schema.UserDeletionRequest",
        "newUserDeletionRequestId": "fn() -> +Analytics.V3.Schema.UserDeletionRequestId",
        "newUserRef": "fn() -> +Analytics.V3.Schema.UserRef",
        "newWebPropertyRef": "fn() -> +Analytics.V3.Schema.WebPropertyRef",
        "newWebproperty": "fn() -> +Analytics.V3.Schema.Webproperty",
        "newWebpropertyChildLink": "fn() -> +Analytics.V3.Schema.WebpropertyChildLink",
        "newWebpropertyParentLink": "fn() -> +Analytics.V3.Schema.WebpropertyParentLink",
        "newWebpropertyPermissions": "fn() -> +Analytics.V3.Schema.WebpropertyPermissions",
        "Data": "+Analytics.V3.Collection.DataCollection",
        "Management": "+Analytics.V3.Collection.ManagementCollection",
        "Metadata": "+Analytics.V3.Collection.MetadataCollection",
        "Provisioning": "+Analytics.V3.Collection.ProvisioningCollection",
        "UserDeletion": "+Analytics.V3.Collection.UserDeletionCollection"
      },
      "!define": {
        "Analytics.V3.Collection.Data.GaCollection": {
          "prototype": {
            "get": "fn(ids: string, startDate: string, endDate: string, metrics: string, optionalArgs: object) -> +Analytics.V3.Schema.GaData"
          }
        },
        "Analytics.V3.Collection.Data.McfCollection": {
          "prototype": {
            "get": "fn(ids: string, startDate: string, endDate: string, metrics: string, optionalArgs: object) -> +Analytics.V3.Schema.McfData"
          }
        },
        "Analytics.V3.Collection.Data.RealtimeCollection": {
          "prototype": {
            "get": "fn(ids: string, metrics: string, optionalArgs: object) -> +Analytics.V3.Schema.RealtimeData"
          }
        },
        "Analytics.V3.Collection.DataCollection": {
          "prototype": {
            "Ga": "+Analytics.V3.Collection.Data.GaCollection",
            "Mcf": "+Analytics.V3.Collection.Data.McfCollection",
            "Realtime": "+Analytics.V3.Collection.Data.RealtimeCollection"
          }
        },
        "Analytics.V3.Collection.Management.AccountSummariesCollection": {
          "prototype": {
            "list": "fn(optionalArgs: object) -> +Analytics.V3.Schema.AccountSummaries"
          }
        },
        "Analytics.V3.Collection.Management.AccountUserLinksCollection": {
          "prototype": {
            "insert": "fn(resource: Analytics.V3.Schema.EntityUserLink, accountId: string) -> +Analytics.V3.Schema.EntityUserLink",
            "list": "fn(accountId: string, optionalArgs: object) -> +Analytics.V3.Schema.EntityUserLinks",
            "remove": "fn(accountId: string, linkId: string)",
            "update": "fn(resource: Analytics.V3.Schema.EntityUserLink, accountId: string, linkId: string) -> +Analytics.V3.Schema.EntityUserLink"
          }
        },
        "Analytics.V3.Collection.Management.AccountsCollection": {
          "prototype": {
            "list": "fn(optionalArgs: object) -> +Analytics.V3.Schema.Accounts"
          }
        },
        "Analytics.V3.Collection.Management.ClientIdCollection": {
          "prototype": {
            "hashClientId": "fn(resource: Analytics.V3.Schema.HashClientIdRequest) -> +Analytics.V3.Schema.HashClientIdResponse"
          }
        },
        "Analytics.V3.Collection.Management.CustomDataSourcesCollection": {
          "prototype": {
            "list": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> +Analytics.V3.Schema.CustomDataSources"
          }
        },
        "Analytics.V3.Collection.Management.CustomDimensionsCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, customDimensionId: string) -> +Analytics.V3.Schema.CustomDimension",
            "insert": "fn(resource: Analytics.V3.Schema.CustomDimension, accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.CustomDimension",
            "list": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> +Analytics.V3.Schema.CustomDimensions",
            "patch": "fn(resource: Analytics.V3.Schema.CustomDimension, accountId: string, webPropertyId: string, customDimensionId: string, optionalArgs: object) -> +Analytics.V3.Schema.CustomDimension",
            "update": "fn(resource: Analytics.V3.Schema.CustomDimension, accountId: string, webPropertyId: string, customDimensionId: string, optionalArgs: object) -> +Analytics.V3.Schema.CustomDimension"
          }
        },
        "Analytics.V3.Collection.Management.CustomMetricsCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, customMetricId: string) -> +Analytics.V3.Schema.CustomMetric",
            "insert": "fn(resource: Analytics.V3.Schema.CustomMetric, accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.CustomMetric",
            "list": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> +Analytics.V3.Schema.CustomMetrics",
            "patch": "fn(resource: Analytics.V3.Schema.CustomMetric, accountId: string, webPropertyId: string, customMetricId: string, optionalArgs: object) -> +Analytics.V3.Schema.CustomMetric",
            "update": "fn(resource: Analytics.V3.Schema.CustomMetric, accountId: string, webPropertyId: string, customMetricId: string, optionalArgs: object) -> +Analytics.V3.Schema.CustomMetric"
          }
        },
        "Analytics.V3.Collection.Management.ExperimentsCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, profileId: string, experimentId: string) -> +Analytics.V3.Schema.Experiment",
            "insert": "fn(resource: Analytics.V3.Schema.Experiment, accountId: string, webPropertyId: string, profileId: string) -> +Analytics.V3.Schema.Experiment",
            "list": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> +Analytics.V3.Schema.Experiments",
            "patch": "fn(resource: Analytics.V3.Schema.Experiment, accountId: string, webPropertyId: string, profileId: string, experimentId: string) -> +Analytics.V3.Schema.Experiment",
            "remove": "fn(accountId: string, webPropertyId: string, profileId: string, experimentId: string)",
            "update": "fn(resource: Analytics.V3.Schema.Experiment, accountId: string, webPropertyId: string, profileId: string, experimentId: string) -> +Analytics.V3.Schema.Experiment"
          }
        },
        "Analytics.V3.Collection.Management.FiltersCollection": {
          "prototype": {
            "get": "fn(accountId: string, filterId: string) -> +Analytics.V3.Schema.Filter",
            "insert": "fn(resource: Analytics.V3.Schema.Filter, accountId: string) -> +Analytics.V3.Schema.Filter",
            "list": "fn(accountId: string, optionalArgs: object) -> +Analytics.V3.Schema.Filters",
            "patch": "fn(resource: Analytics.V3.Schema.Filter, accountId: string, filterId: string) -> +Analytics.V3.Schema.Filter",
            "remove": "fn(accountId: string, filterId: string) -> +Analytics.V3.Schema.Filter",
            "update": "fn(resource: Analytics.V3.Schema.Filter, accountId: string, filterId: string) -> +Analytics.V3.Schema.Filter"
          }
        },
        "Analytics.V3.Collection.Management.GoalsCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, profileId: string, goalId: string) -> +Analytics.V3.Schema.Goal",
            "insert": "fn(resource: Analytics.V3.Schema.Goal, accountId: string, webPropertyId: string, profileId: string) -> +Analytics.V3.Schema.Goal",
            "list": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> +Analytics.V3.Schema.Goals",
            "patch": "fn(resource: Analytics.V3.Schema.Goal, accountId: string, webPropertyId: string, profileId: string, goalId: string) -> +Analytics.V3.Schema.Goal",
            "update": "fn(resource: Analytics.V3.Schema.Goal, accountId: string, webPropertyId: string, profileId: string, goalId: string) -> +Analytics.V3.Schema.Goal"
          }
        },
        "Analytics.V3.Collection.Management.ProfileFilterLinksCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, profileId: string, linkId: string) -> +Analytics.V3.Schema.ProfileFilterLink",
            "insert": "fn(resource: Analytics.V3.Schema.ProfileFilterLink, accountId: string, webPropertyId: string, profileId: string) -> +Analytics.V3.Schema.ProfileFilterLink",
            "list": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> +Analytics.V3.Schema.ProfileFilterLinks",
            "patch": "fn(resource: Analytics.V3.Schema.ProfileFilterLink, accountId: string, webPropertyId: string, profileId: string, linkId: string) -> +Analytics.V3.Schema.ProfileFilterLink",
            "remove": "fn(accountId: string, webPropertyId: string, profileId: string, linkId: string)",
            "update": "fn(resource: Analytics.V3.Schema.ProfileFilterLink, accountId: string, webPropertyId: string, profileId: string, linkId: string) -> +Analytics.V3.Schema.ProfileFilterLink"
          }
        },
        "Analytics.V3.Collection.Management.ProfileUserLinksCollection": {
          "prototype": {
            "insert": "fn(resource: Analytics.V3.Schema.EntityUserLink, accountId: string, webPropertyId: string, profileId: string) -> +Analytics.V3.Schema.EntityUserLink",
            "list": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> +Analytics.V3.Schema.EntityUserLinks",
            "remove": "fn(accountId: string, webPropertyId: string, profileId: string, linkId: string)",
            "update": "fn(resource: Analytics.V3.Schema.EntityUserLink, accountId: string, webPropertyId: string, profileId: string, linkId: string) -> +Analytics.V3.Schema.EntityUserLink"
          }
        },
        "Analytics.V3.Collection.Management.ProfilesCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, profileId: string) -> +Analytics.V3.Schema.Profile",
            "insert": "fn(resource: Analytics.V3.Schema.Profile, accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.Profile",
            "list": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> +Analytics.V3.Schema.Profiles",
            "patch": "fn(resource: Analytics.V3.Schema.Profile, accountId: string, webPropertyId: string, profileId: string) -> +Analytics.V3.Schema.Profile",
            "remove": "fn(accountId: string, webPropertyId: string, profileId: string)",
            "update": "fn(resource: Analytics.V3.Schema.Profile, accountId: string, webPropertyId: string, profileId: string) -> +Analytics.V3.Schema.Profile"
          }
        },
        "Analytics.V3.Collection.Management.RemarketingAudienceCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, remarketingAudienceId: string) -> +Analytics.V3.Schema.RemarketingAudience",
            "insert": "fn(resource: Analytics.V3.Schema.RemarketingAudience, accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.RemarketingAudience",
            "list": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> +Analytics.V3.Schema.RemarketingAudiences",
            "patch": "fn(resource: Analytics.V3.Schema.RemarketingAudience, accountId: string, webPropertyId: string, remarketingAudienceId: string) -> +Analytics.V3.Schema.RemarketingAudience",
            "remove": "fn(accountId: string, webPropertyId: string, remarketingAudienceId: string)",
            "update": "fn(resource: Analytics.V3.Schema.RemarketingAudience, accountId: string, webPropertyId: string, remarketingAudienceId: string) -> +Analytics.V3.Schema.RemarketingAudience"
          }
        },
        "Analytics.V3.Collection.Management.SegmentsCollection": {
          "prototype": {
            "list": "fn(optionalArgs: object) -> +Analytics.V3.Schema.Segments"
          }
        },
        "Analytics.V3.Collection.Management.UnsampledReportsCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, profileId: string, unsampledReportId: string) -> +Analytics.V3.Schema.UnsampledReport",
            "insert": "fn(resource: Analytics.V3.Schema.UnsampledReport, accountId: string, webPropertyId: string, profileId: string) -> +Analytics.V3.Schema.UnsampledReport",
            "list": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> +Analytics.V3.Schema.UnsampledReports",
            "remove": "fn(accountId: string, webPropertyId: string, profileId: string, unsampledReportId: string)"
          }
        },
        "Analytics.V3.Collection.Management.UploadsCollection": {
          "prototype": {
            "deleteUploadData": "fn(resource: Analytics.V3.Schema.AnalyticsDataimportDeleteUploadDataRequest, accountId: string, webPropertyId: string, customDataSourceId: string)",
            "get": "fn(accountId: string, webPropertyId: string, customDataSourceId: string, uploadId: string) -> +Analytics.V3.Schema.Upload",
            "list": "fn(accountId: string, webPropertyId: string, customDataSourceId: string, optionalArgs: object) -> +Analytics.V3.Schema.Uploads",
            "uploadData": "fn(accountId: string, webPropertyId: string, customDataSourceId: string, mediaData: Blob) -> +Analytics.V3.Schema.Upload"
          }
        },
        "Analytics.V3.Collection.Management.WebPropertyAdWordsLinksCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string, webPropertyAdWordsLinkId: string) -> +Analytics.V3.Schema.EntityAdWordsLink",
            "insert": "fn(resource: Analytics.V3.Schema.EntityAdWordsLink, accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.EntityAdWordsLink",
            "list": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> +Analytics.V3.Schema.EntityAdWordsLinks",
            "patch": "fn(resource: Analytics.V3.Schema.EntityAdWordsLink, accountId: string, webPropertyId: string, webPropertyAdWordsLinkId: string) -> +Analytics.V3.Schema.EntityAdWordsLink",
            "remove": "fn(accountId: string, webPropertyId: string, webPropertyAdWordsLinkId: string)",
            "update": "fn(resource: Analytics.V3.Schema.EntityAdWordsLink, accountId: string, webPropertyId: string, webPropertyAdWordsLinkId: string) -> +Analytics.V3.Schema.EntityAdWordsLink"
          }
        },
        "Analytics.V3.Collection.Management.WebpropertiesCollection": {
          "prototype": {
            "get": "fn(accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.Webproperty",
            "insert": "fn(resource: Analytics.V3.Schema.Webproperty, accountId: string) -> +Analytics.V3.Schema.Webproperty",
            "list": "fn(accountId: string, optionalArgs: object) -> +Analytics.V3.Schema.Webproperties",
            "patch": "fn(resource: Analytics.V3.Schema.Webproperty, accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.Webproperty",
            "update": "fn(resource: Analytics.V3.Schema.Webproperty, accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.Webproperty"
          }
        },
        "Analytics.V3.Collection.Management.WebpropertyUserLinksCollection": {
          "prototype": {
            "insert": "fn(resource: Analytics.V3.Schema.EntityUserLink, accountId: string, webPropertyId: string) -> +Analytics.V3.Schema.EntityUserLink",
            "list": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> +Analytics.V3.Schema.EntityUserLinks",
            "remove": "fn(accountId: string, webPropertyId: string, linkId: string)",
            "update": "fn(resource: Analytics.V3.Schema.EntityUserLink, accountId: string, webPropertyId: string, linkId: string) -> +Analytics.V3.Schema.EntityUserLink"
          }
        },
        "Analytics.V3.Collection.ManagementCollection": {
          "prototype": {
            "AccountSummaries": "+Analytics.V3.Collection.Management.AccountSummariesCollection",
            "AccountUserLinks": "+Analytics.V3.Collection.Management.AccountUserLinksCollection",
            "Accounts": "+Analytics.V3.Collection.Management.AccountsCollection",
            "ClientId": "+Analytics.V3.Collection.Management.ClientIdCollection",
            "CustomDataSources": "+Analytics.V3.Collection.Management.CustomDataSourcesCollection",
            "CustomDimensions": "+Analytics.V3.Collection.Management.CustomDimensionsCollection",
            "CustomMetrics": "+Analytics.V3.Collection.Management.CustomMetricsCollection",
            "Experiments": "+Analytics.V3.Collection.Management.ExperimentsCollection",
            "Filters": "+Analytics.V3.Collection.Management.FiltersCollection",
            "Goals": "+Analytics.V3.Collection.Management.GoalsCollection",
            "ProfileFilterLinks": "+Analytics.V3.Collection.Management.ProfileFilterLinksCollection",
            "ProfileUserLinks": "+Analytics.V3.Collection.Management.ProfileUserLinksCollection",
            "Profiles": "+Analytics.V3.Collection.Management.ProfilesCollection",
            "RemarketingAudience": "+Analytics.V3.Collection.Management.RemarketingAudienceCollection",
            "Segments": "+Analytics.V3.Collection.Management.SegmentsCollection",
            "UnsampledReports": "+Analytics.V3.Collection.Management.UnsampledReportsCollection",
            "Uploads": "+Analytics.V3.Collection.Management.UploadsCollection",
            "WebPropertyAdWordsLinks": "+Analytics.V3.Collection.Management.WebPropertyAdWordsLinksCollection",
            "Webproperties": "+Analytics.V3.Collection.Management.WebpropertiesCollection",
            "WebpropertyUserLinks": "+Analytics.V3.Collection.Management.WebpropertyUserLinksCollection"
          }
        },
        "Analytics.V3.Collection.Metadata.ColumnsCollection": {
          "prototype": {
            "list": "fn(reportType: string) -> +Analytics.V3.Schema.Columns"
          }
        },
        "Analytics.V3.Collection.MetadataCollection": {
          "prototype": {
            "Columns": "+Analytics.V3.Collection.Metadata.ColumnsCollection"
          }
        },
        "Analytics.V3.Collection.ProvisioningCollection": {
          "prototype": {
            "createAccountTicket": "fn(resource: Analytics.V3.Schema.AccountTicket) -> +Analytics.V3.Schema.AccountTicket",
            "createAccountTree": "fn(resource: Analytics.V3.Schema.AccountTreeRequest) -> +Analytics.V3.Schema.AccountTreeResponse"
          }
        },
        "Analytics.V3.Collection.UserDeletion.UserDeletionRequestCollection": {
          "prototype": {
            "upsert": "fn(resource: Analytics.V3.Schema.UserDeletionRequest) -> +Analytics.V3.Schema.UserDeletionRequest"
          }
        },
        "Analytics.V3.Collection.UserDeletionCollection": {
          "prototype": {
            "UserDeletionRequest": "+Analytics.V3.Collection.UserDeletion.UserDeletionRequestCollection"
          }
        },
        "Analytics.V3.Schema.Account": {
          "prototype": {
            "childLink": "+Analytics.V3.Schema.AccountChildLink",
            "created": "string",
            "id": "string",
            "kind": "string",
            "name": "string",
            "permissions": "+Analytics.V3.Schema.AccountPermissions",
            "selfLink": "string",
            "starred": "bool",
            "updated": "string"
          }
        },
        "Analytics.V3.Schema.AccountChildLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.AccountPermissions": {
          "prototype": {
            "effective": "[string]"
          }
        },
        "Analytics.V3.Schema.AccountRef": {
          "prototype": {
            "href": "string",
            "id": "string",
            "kind": "string",
            "name": "string"
          }
        },
        "Analytics.V3.Schema.AccountSummaries": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.AccountSummary]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.AccountSummary": {
          "prototype": {
            "id": "string",
            "kind": "string",
            "name": "string",
            "starred": "bool",
            "webProperties": "[+Analytics.V3.Schema.WebPropertySummary]"
          }
        },
        "Analytics.V3.Schema.AccountTicket": {
          "prototype": {
            "account": "+Analytics.V3.Schema.Account",
            "id": "string",
            "kind": "string",
            "profile": "+Analytics.V3.Schema.Profile",
            "redirectUri": "string",
            "webproperty": "+Analytics.V3.Schema.Webproperty"
          }
        },
        "Analytics.V3.Schema.AccountTreeRequest": {
          "prototype": {
            "accountName": "string",
            "kind": "string",
            "profileName": "string",
            "timezone": "string",
            "webpropertyName": "string",
            "websiteUrl": "string"
          }
        },
        "Analytics.V3.Schema.AccountTreeResponse": {
          "prototype": {
            "account": "+Analytics.V3.Schema.Account",
            "kind": "string",
            "profile": "+Analytics.V3.Schema.Profile",
            "webproperty": "+Analytics.V3.Schema.Webproperty"
          }
        },
        "Analytics.V3.Schema.Accounts": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.Account]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.AdWordsAccount": {
          "prototype": {
            "autoTaggingEnabled": "bool",
            "customerId": "string",
            "kind": "string"
          }
        },
        "Analytics.V3.Schema.AnalyticsDataimportDeleteUploadDataRequest": {
          "prototype": {
            "customDataImportUids": "[string]"
          }
        },
        "Analytics.V3.Schema.Column": {
          "prototype": {
            "attributes": "Object",
            "id": "string",
            "kind": "string"
          }
        },
        "Analytics.V3.Schema.Columns": {
          "prototype": {
            "attributeNames": "[string]",
            "etag": "string",
            "items": "[+Analytics.V3.Schema.Column]",
            "kind": "string",
            "totalResults": "Integer"
          }
        },
        "Analytics.V3.Schema.CustomDataSource": {
          "prototype": {
            "accountId": "string",
            "childLink": "+Analytics.V3.Schema.CustomDataSourceChildLink",
            "created": "string",
            "description": "string",
            "id": "string",
            "importBehavior": "string",
            "kind": "string",
            "name": "string",
            "parentLink": "+Analytics.V3.Schema.CustomDataSourceParentLink",
            "profilesLinked": "[string]",
            "schema": "[string]",
            "selfLink": "string",
            "type": "string",
            "updated": "string",
            "uploadType": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.CustomDataSourceChildLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.CustomDataSourceParentLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.CustomDataSources": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.CustomDataSource]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.CustomDimension": {
          "prototype": {
            "accountId": "string",
            "active": "bool",
            "created": "string",
            "id": "string",
            "index": "Integer",
            "kind": "string",
            "name": "string",
            "parentLink": "+Analytics.V3.Schema.CustomDimensionParentLink",
            "scope": "string",
            "selfLink": "string",
            "updated": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.CustomDimensionParentLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.CustomDimensions": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.CustomDimension]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.CustomMetric": {
          "prototype": {
            "accountId": "string",
            "active": "bool",
            "created": "string",
            "id": "string",
            "index": "Integer",
            "kind": "string",
            "max_value": "string",
            "min_value": "string",
            "name": "string",
            "parentLink": "+Analytics.V3.Schema.CustomMetricParentLink",
            "scope": "string",
            "selfLink": "string",
            "type": "string",
            "updated": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.CustomMetricParentLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.CustomMetrics": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.CustomMetric]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.EntityAdWordsLink": {
          "prototype": {
            "adWordsAccounts": "[+Analytics.V3.Schema.AdWordsAccount]",
            "entity": "+Analytics.V3.Schema.EntityAdWordsLinkEntity",
            "id": "string",
            "kind": "string",
            "name": "string",
            "profileIds": "[string]",
            "selfLink": "string"
          }
        },
        "Analytics.V3.Schema.EntityAdWordsLinkEntity": {
          "prototype": {
            "webPropertyRef": "+Analytics.V3.Schema.WebPropertyRef"
          }
        },
        "Analytics.V3.Schema.EntityAdWordsLinks": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.EntityAdWordsLink]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer"
          }
        },
        "Analytics.V3.Schema.EntityUserLink": {
          "prototype": {
            "entity": "+Analytics.V3.Schema.EntityUserLinkEntity",
            "id": "string",
            "kind": "string",
            "permissions": "+Analytics.V3.Schema.EntityUserLinkPermissions",
            "selfLink": "string",
            "userRef": "+Analytics.V3.Schema.UserRef"
          }
        },
        "Analytics.V3.Schema.EntityUserLinkEntity": {
          "prototype": {
            "accountRef": "+Analytics.V3.Schema.AccountRef",
            "profileRef": "+Analytics.V3.Schema.ProfileRef",
            "webPropertyRef": "+Analytics.V3.Schema.WebPropertyRef"
          }
        },
        "Analytics.V3.Schema.EntityUserLinkPermissions": {
          "prototype": {
            "effective": "[string]",
            "local": "[string]"
          }
        },
        "Analytics.V3.Schema.EntityUserLinks": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.EntityUserLink]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer"
          }
        },
        "Analytics.V3.Schema.Experiment": {
          "prototype": {
            "accountId": "string",
            "created": "string",
            "description": "string",
            "editableInGaUi": "bool",
            "endTime": "string",
            "equalWeighting": "bool",
            "id": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "minimumExperimentLengthInDays": "Integer",
            "name": "string",
            "objectiveMetric": "string",
            "optimizationType": "string",
            "parentLink": "+Analytics.V3.Schema.ExperimentParentLink",
            "profileId": "string",
            "reasonExperimentEnded": "string",
            "rewriteVariationUrlsAsOriginal": "bool",
            "selfLink": "string",
            "servingFramework": "string",
            "snippet": "string",
            "startTime": "string",
            "status": "string",
            "trafficCoverage": "number",
            "updated": "string",
            "variations": "[+Analytics.V3.Schema.ExperimentVariations]",
            "webPropertyId": "string",
            "winnerConfidenceLevel": "number",
            "winnerFound": "bool"
          }
        },
        "Analytics.V3.Schema.ExperimentParentLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.ExperimentVariations": {
          "prototype": {
            "name": "string",
            "status": "string",
            "url": "string",
            "weight": "number",
            "won": "bool"
          }
        },
        "Analytics.V3.Schema.Experiments": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.Experiment]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.Filter": {
          "prototype": {
            "accountId": "string",
            "advancedDetails": "+Analytics.V3.Schema.FilterAdvancedDetails",
            "created": "string",
            "excludeDetails": "+Analytics.V3.Schema.FilterExpression",
            "id": "string",
            "includeDetails": "+Analytics.V3.Schema.FilterExpression",
            "kind": "string",
            "lowercaseDetails": "+Analytics.V3.Schema.FilterLowercaseDetails",
            "name": "string",
            "parentLink": "+Analytics.V3.Schema.FilterParentLink",
            "searchAndReplaceDetails": "+Analytics.V3.Schema.FilterSearchAndReplaceDetails",
            "selfLink": "string",
            "type": "string",
            "updated": "string",
            "uppercaseDetails": "+Analytics.V3.Schema.FilterUppercaseDetails"
          }
        },
        "Analytics.V3.Schema.FilterAdvancedDetails": {
          "prototype": {
            "caseSensitive": "bool",
            "extractA": "string",
            "extractB": "string",
            "fieldA": "string",
            "fieldAIndex": "Integer",
            "fieldARequired": "bool",
            "fieldB": "string",
            "fieldBIndex": "Integer",
            "fieldBRequired": "bool",
            "outputConstructor": "string",
            "outputToField": "string",
            "outputToFieldIndex": "Integer",
            "overrideOutputField": "bool"
          }
        },
        "Analytics.V3.Schema.FilterExpression": {
          "prototype": {
            "caseSensitive": "bool",
            "expressionValue": "string",
            "field": "string",
            "fieldIndex": "Integer",
            "kind": "string",
            "matchType": "string"
          }
        },
        "Analytics.V3.Schema.FilterLowercaseDetails": {
          "prototype": {
            "field": "string",
            "fieldIndex": "Integer"
          }
        },
        "Analytics.V3.Schema.FilterParentLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.FilterRef": {
          "prototype": {
            "accountId": "string",
            "href": "string",
            "id": "string",
            "kind": "string",
            "name": "string"
          }
        },
        "Analytics.V3.Schema.FilterSearchAndReplaceDetails": {
          "prototype": {
            "caseSensitive": "bool",
            "field": "string",
            "fieldIndex": "Integer",
            "replaceString": "string",
            "searchString": "string"
          }
        },
        "Analytics.V3.Schema.FilterUppercaseDetails": {
          "prototype": {
            "field": "string",
            "fieldIndex": "Integer"
          }
        },
        "Analytics.V3.Schema.Filters": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.Filter]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.GaData": {
          "prototype": {
            "columnHeaders": "[+Analytics.V3.Schema.GaDataColumnHeaders]",
            "containsSampledData": "bool",
            "dataLastRefreshed": "string",
            "dataTable": "+Analytics.V3.Schema.GaDataDataTable",
            "id": "string",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "profileInfo": "+Analytics.V3.Schema.GaDataProfileInfo",
            "query": "+Analytics.V3.Schema.GaDataQuery",
            "rows": "[[string]]",
            "sampleSize": "string",
            "sampleSpace": "string",
            "selfLink": "string",
            "totalResults": "Integer",
            "totalsForAllResults": "Object"
          }
        },
        "Analytics.V3.Schema.GaDataColumnHeaders": {
          "prototype": {
            "columnType": "string",
            "dataType": "string",
            "name": "string"
          }
        },
        "Analytics.V3.Schema.GaDataDataTable": {
          "prototype": {
            "cols": "[+Analytics.V3.Schema.GaDataDataTableCols]",
            "rows": "[+Analytics.V3.Schema.GaDataDataTableRows]"
          }
        },
        "Analytics.V3.Schema.GaDataDataTableCols": {
          "prototype": {
            "id": "string",
            "label": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.GaDataDataTableRows": {
          "prototype": {
            "c": "[+Analytics.V3.Schema.GaDataDataTableRowsC]"
          }
        },
        "Analytics.V3.Schema.GaDataDataTableRowsC": {
          "prototype": {
            "v": "string"
          }
        },
        "Analytics.V3.Schema.GaDataProfileInfo": {
          "prototype": {
            "accountId": "string",
            "internalWebPropertyId": "string",
            "profileId": "string",
            "profileName": "string",
            "tableId": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.GaDataQuery": {
          "prototype": {
            "dimensions": "string",
            "end-date": "string",
            "filters": "string",
            "ids": "string",
            "max-results": "Integer",
            "metrics": "[string]",
            "samplingLevel": "string",
            "segment": "string",
            "sort": "[string]",
            "start-date": "string",
            "start-index": "Integer"
          }
        },
        "Analytics.V3.Schema.Goal": {
          "prototype": {
            "accountId": "string",
            "active": "bool",
            "created": "string",
            "eventDetails": "+Analytics.V3.Schema.GoalEventDetails",
            "id": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "name": "string",
            "parentLink": "+Analytics.V3.Schema.GoalParentLink",
            "profileId": "string",
            "selfLink": "string",
            "type": "string",
            "updated": "string",
            "urlDestinationDetails": "+Analytics.V3.Schema.GoalUrlDestinationDetails",
            "value": "number",
            "visitNumPagesDetails": "+Analytics.V3.Schema.GoalVisitNumPagesDetails",
            "visitTimeOnSiteDetails": "+Analytics.V3.Schema.GoalVisitTimeOnSiteDetails",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.GoalEventDetails": {
          "prototype": {
            "eventConditions": "[+Analytics.V3.Schema.GoalEventDetailsEventConditions]",
            "useEventValue": "bool"
          }
        },
        "Analytics.V3.Schema.GoalEventDetailsEventConditions": {
          "prototype": {
            "comparisonType": "string",
            "comparisonValue": "string",
            "expression": "string",
            "matchType": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.GoalParentLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.GoalUrlDestinationDetails": {
          "prototype": {
            "caseSensitive": "bool",
            "firstStepRequired": "bool",
            "matchType": "string",
            "steps": "[+Analytics.V3.Schema.GoalUrlDestinationDetailsSteps]",
            "url": "string"
          }
        },
        "Analytics.V3.Schema.GoalUrlDestinationDetailsSteps": {
          "prototype": {
            "name": "string",
            "number": "Integer",
            "url": "string"
          }
        },
        "Analytics.V3.Schema.GoalVisitNumPagesDetails": {
          "prototype": {
            "comparisonType": "string",
            "comparisonValue": "string"
          }
        },
        "Analytics.V3.Schema.GoalVisitTimeOnSiteDetails": {
          "prototype": {
            "comparisonType": "string",
            "comparisonValue": "string"
          }
        },
        "Analytics.V3.Schema.Goals": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.Goal]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.HashClientIdRequest": {
          "prototype": {
            "clientId": "string",
            "kind": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.HashClientIdResponse": {
          "prototype": {
            "clientId": "string",
            "hashedClientId": "string",
            "kind": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.IncludeConditions": {
          "prototype": {
            "daysToLookBack": "Integer",
            "isSmartList": "bool",
            "kind": "string",
            "membershipDurationDays": "Integer",
            "segment": "string"
          }
        },
        "Analytics.V3.Schema.LinkedForeignAccount": {
          "prototype": {
            "accountId": "string",
            "eligibleForSearch": "bool",
            "id": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "linkedAccountId": "string",
            "remarketingAudienceId": "string",
            "status": "string",
            "type": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.McfData": {
          "prototype": {
            "columnHeaders": "[+Analytics.V3.Schema.McfDataColumnHeaders]",
            "containsSampledData": "bool",
            "id": "string",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "profileInfo": "+Analytics.V3.Schema.McfDataProfileInfo",
            "query": "+Analytics.V3.Schema.McfDataQuery",
            "rows": "[[+Analytics.V3.Schema.McfDataRows]]",
            "sampleSize": "string",
            "sampleSpace": "string",
            "selfLink": "string",
            "totalResults": "Integer",
            "totalsForAllResults": "Object"
          }
        },
        "Analytics.V3.Schema.McfDataColumnHeaders": {
          "prototype": {
            "columnType": "string",
            "dataType": "string",
            "name": "string"
          }
        },
        "Analytics.V3.Schema.McfDataProfileInfo": {
          "prototype": {
            "accountId": "string",
            "internalWebPropertyId": "string",
            "profileId": "string",
            "profileName": "string",
            "tableId": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.McfDataQuery": {
          "prototype": {
            "dimensions": "string",
            "end-date": "string",
            "filters": "string",
            "ids": "string",
            "max-results": "Integer",
            "metrics": "[string]",
            "samplingLevel": "string",
            "segment": "string",
            "sort": "[string]",
            "start-date": "string",
            "start-index": "Integer"
          }
        },
        "Analytics.V3.Schema.McfDataRows": {
          "prototype": {
            "conversionPathValue": "[+Analytics.V3.Schema.McfDataRowsConversionPathValue]",
            "primitiveValue": "string"
          }
        },
        "Analytics.V3.Schema.McfDataRowsConversionPathValue": {
          "prototype": {
            "interactionType": "string",
            "nodeValue": "string"
          }
        },
        "Analytics.V3.Schema.Profile": {
          "prototype": {
            "accountId": "string",
            "botFilteringEnabled": "bool",
            "childLink": "+Analytics.V3.Schema.ProfileChildLink",
            "created": "string",
            "currency": "string",
            "defaultPage": "string",
            "eCommerceTracking": "bool",
            "enhancedECommerceTracking": "bool",
            "excludeQueryParameters": "string",
            "id": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "name": "string",
            "parentLink": "+Analytics.V3.Schema.ProfileParentLink",
            "permissions": "+Analytics.V3.Schema.ProfilePermissions",
            "selfLink": "string",
            "siteSearchCategoryParameters": "string",
            "siteSearchQueryParameters": "string",
            "starred": "bool",
            "stripSiteSearchCategoryParameters": "bool",
            "stripSiteSearchQueryParameters": "bool",
            "timezone": "string",
            "type": "string",
            "updated": "string",
            "webPropertyId": "string",
            "websiteUrl": "string"
          }
        },
        "Analytics.V3.Schema.ProfileChildLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.ProfileFilterLink": {
          "prototype": {
            "filterRef": "+Analytics.V3.Schema.FilterRef",
            "id": "string",
            "kind": "string",
            "profileRef": "+Analytics.V3.Schema.ProfileRef",
            "rank": "Integer",
            "selfLink": "string"
          }
        },
        "Analytics.V3.Schema.ProfileFilterLinks": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.ProfileFilterLink]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.ProfileParentLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.ProfilePermissions": {
          "prototype": {
            "effective": "[string]"
          }
        },
        "Analytics.V3.Schema.ProfileRef": {
          "prototype": {
            "accountId": "string",
            "href": "string",
            "id": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "name": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.ProfileSummary": {
          "prototype": {
            "id": "string",
            "kind": "string",
            "name": "string",
            "starred": "bool",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.Profiles": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.Profile]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.RealtimeData": {
          "prototype": {
            "columnHeaders": "[+Analytics.V3.Schema.RealtimeDataColumnHeaders]",
            "id": "string",
            "kind": "string",
            "profileInfo": "+Analytics.V3.Schema.RealtimeDataProfileInfo",
            "query": "+Analytics.V3.Schema.RealtimeDataQuery",
            "rows": "[[string]]",
            "selfLink": "string",
            "totalResults": "Integer",
            "totalsForAllResults": "Object"
          }
        },
        "Analytics.V3.Schema.RealtimeDataColumnHeaders": {
          "prototype": {
            "columnType": "string",
            "dataType": "string",
            "name": "string"
          }
        },
        "Analytics.V3.Schema.RealtimeDataProfileInfo": {
          "prototype": {
            "accountId": "string",
            "internalWebPropertyId": "string",
            "profileId": "string",
            "profileName": "string",
            "tableId": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.RealtimeDataQuery": {
          "prototype": {
            "dimensions": "string",
            "filters": "string",
            "ids": "string",
            "max-results": "Integer",
            "metrics": "[string]",
            "sort": "[string]"
          }
        },
        "Analytics.V3.Schema.RemarketingAudience": {
          "prototype": {
            "accountId": "string",
            "audienceDefinition": "+Analytics.V3.Schema.RemarketingAudienceAudienceDefinition",
            "audienceType": "string",
            "created": "string",
            "description": "string",
            "id": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "linkedAdAccounts": "[+Analytics.V3.Schema.LinkedForeignAccount]",
            "linkedViews": "[string]",
            "name": "string",
            "stateBasedAudienceDefinition": "+Analytics.V3.Schema.RemarketingAudienceStateBasedAudienceDefinition",
            "updated": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.RemarketingAudienceAudienceDefinition": {
          "prototype": {
            "includeConditions": "+Analytics.V3.Schema.IncludeConditions"
          }
        },
        "Analytics.V3.Schema.RemarketingAudienceStateBasedAudienceDefinition": {
          "prototype": {
            "excludeConditions": "+Analytics.V3.Schema.RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions",
            "includeConditions": "+Analytics.V3.Schema.IncludeConditions"
          }
        },
        "Analytics.V3.Schema.RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions": {
          "prototype": {
            "exclusionDuration": "string",
            "segment": "string"
          }
        },
        "Analytics.V3.Schema.RemarketingAudiences": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.RemarketingAudience]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.Segment": {
          "prototype": {
            "created": "string",
            "definition": "string",
            "id": "string",
            "kind": "string",
            "name": "string",
            "segmentId": "string",
            "selfLink": "string",
            "type": "string",
            "updated": "string"
          }
        },
        "Analytics.V3.Schema.Segments": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.Segment]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.UnsampledReport": {
          "prototype": {
            "accountId": "string",
            "cloudStorageDownloadDetails": "+Analytics.V3.Schema.UnsampledReportCloudStorageDownloadDetails",
            "created": "string",
            "dimensions": "string",
            "downloadType": "string",
            "driveDownloadDetails": "+Analytics.V3.Schema.UnsampledReportDriveDownloadDetails",
            "end-date": "string",
            "filters": "string",
            "id": "string",
            "kind": "string",
            "metrics": "string",
            "profileId": "string",
            "segment": "string",
            "selfLink": "string",
            "start-date": "string",
            "status": "string",
            "title": "string",
            "updated": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.UnsampledReportCloudStorageDownloadDetails": {
          "prototype": {
            "bucketId": "string",
            "objectId": "string"
          }
        },
        "Analytics.V3.Schema.UnsampledReportDriveDownloadDetails": {
          "prototype": {
            "documentId": "string"
          }
        },
        "Analytics.V3.Schema.UnsampledReports": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.UnsampledReport]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.Upload": {
          "prototype": {
            "accountId": "string",
            "customDataSourceId": "string",
            "errors": "[string]",
            "id": "string",
            "kind": "string",
            "status": "string",
            "uploadTime": "string"
          }
        },
        "Analytics.V3.Schema.Uploads": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.Upload]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer"
          }
        },
        "Analytics.V3.Schema.UserDeletionRequest": {
          "prototype": {
            "deletionRequestTime": "string",
            "firebaseProjectId": "string",
            "id": "+Analytics.V3.Schema.UserDeletionRequestId",
            "kind": "string",
            "webPropertyId": "string"
          }
        },
        "Analytics.V3.Schema.UserDeletionRequestId": {
          "prototype": {
            "type": "string",
            "userId": "string"
          }
        },
        "Analytics.V3.Schema.UserRef": {
          "prototype": {
            "email": "string",
            "id": "string",
            "kind": "string"
          }
        },
        "Analytics.V3.Schema.WebPropertyRef": {
          "prototype": {
            "accountId": "string",
            "href": "string",
            "id": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "name": "string"
          }
        },
        "Analytics.V3.Schema.WebPropertySummary": {
          "prototype": {
            "id": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "level": "string",
            "name": "string",
            "profiles": "[+Analytics.V3.Schema.ProfileSummary]",
            "starred": "bool",
            "websiteUrl": "string"
          }
        },
        "Analytics.V3.Schema.Webproperties": {
          "prototype": {
            "items": "[+Analytics.V3.Schema.Webproperty]",
            "itemsPerPage": "Integer",
            "kind": "string",
            "nextLink": "string",
            "previousLink": "string",
            "startIndex": "Integer",
            "totalResults": "Integer",
            "username": "string"
          }
        },
        "Analytics.V3.Schema.Webproperty": {
          "prototype": {
            "accountId": "string",
            "childLink": "+Analytics.V3.Schema.WebpropertyChildLink",
            "created": "string",
            "dataRetentionResetOnNewActivity": "bool",
            "dataRetentionTtl": "string",
            "defaultProfileId": "string",
            "id": "string",
            "industryVertical": "string",
            "internalWebPropertyId": "string",
            "kind": "string",
            "level": "string",
            "name": "string",
            "parentLink": "+Analytics.V3.Schema.WebpropertyParentLink",
            "permissions": "+Analytics.V3.Schema.WebpropertyPermissions",
            "profileCount": "Integer",
            "selfLink": "string",
            "starred": "bool",
            "updated": "string",
            "websiteUrl": "string"
          }
        },
        "Analytics.V3.Schema.WebpropertyChildLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.WebpropertyParentLink": {
          "prototype": {
            "href": "string",
            "type": "string"
          }
        },
        "Analytics.V3.Schema.WebpropertyPermissions": {
          "prototype": {
            "effective": "[string]"
          }
        }
      }
    },
    {
      "!name": "BigQuery",
      "BigQuery": {
        "newBigQueryModelTraining": "fn() -> +Bigquery.V2.Schema.BigQueryModelTraining",
        "newBigtableColumn": "fn() -> +Bigquery.V2.Schema.BigtableColumn",
        "newBigtableColumnFamily": "fn() -> +Bigquery.V2.Schema.BigtableColumnFamily",
        "newBigtableOptions": "fn() -> +Bigquery.V2.Schema.BigtableOptions",
        "newBqmlIterationResult": "fn() -> +Bigquery.V2.Schema.BqmlIterationResult",
        "newBqmlTrainingRun": "fn() -> +Bigquery.V2.Schema.BqmlTrainingRun",
        "newBqmlTrainingRunTrainingOptions": "fn() -> +Bigquery.V2.Schema.BqmlTrainingRunTrainingOptions",
        "newClustering": "fn() -> +Bigquery.V2.Schema.Clustering",
        "newCsvOptions": "fn() -> +Bigquery.V2.Schema.CsvOptions",
        "newDataset": "fn() -> +Bigquery.V2.Schema.Dataset",
        "newDatasetAccess": "fn() -> +Bigquery.V2.Schema.DatasetAccess",
        "newDatasetReference": "fn() -> +Bigquery.V2.Schema.DatasetReference",
        "newDestinationTableProperties": "fn() -> +Bigquery.V2.Schema.DestinationTableProperties",
        "newEncryptionConfiguration": "fn() -> +Bigquery.V2.Schema.EncryptionConfiguration",
        "newErrorProto": "fn() -> +Bigquery.V2.Schema.ErrorProto",
        "newExplainQueryStage": "fn() -> +Bigquery.V2.Schema.ExplainQueryStage",
        "newExplainQueryStep": "fn() -> +Bigquery.V2.Schema.ExplainQueryStep",
        "newExternalDataConfiguration": "fn() -> +Bigquery.V2.Schema.ExternalDataConfiguration",
        "newGoogleSheetsOptions": "fn() -> +Bigquery.V2.Schema.GoogleSheetsOptions",
        "newHivePartitioningOptions": "fn() -> +Bigquery.V2.Schema.HivePartitioningOptions",
        "newJob": "fn() -> +Bigquery.V2.Schema.Job",
        "newJobConfiguration": "fn() -> +Bigquery.V2.Schema.JobConfiguration",
        "newJobConfigurationExtract": "fn() -> +Bigquery.V2.Schema.JobConfigurationExtract",
        "newJobConfigurationLoad": "fn() -> +Bigquery.V2.Schema.JobConfigurationLoad",
        "newJobConfigurationQuery": "fn() -> +Bigquery.V2.Schema.JobConfigurationQuery",
        "newJobConfigurationTableCopy": "fn() -> +Bigquery.V2.Schema.JobConfigurationTableCopy",
        "newJobReference": "fn() -> +Bigquery.V2.Schema.JobReference",
        "newJobStatistics": "fn() -> +Bigquery.V2.Schema.JobStatistics",
        "newJobStatistics2": "fn() -> +Bigquery.V2.Schema.JobStatistics2",
        "newJobStatistics2ReservationUsage": "fn() -> +Bigquery.V2.Schema.JobStatistics2ReservationUsage",
        "newJobStatistics3": "fn() -> +Bigquery.V2.Schema.JobStatistics3",
        "newJobStatistics4": "fn() -> +Bigquery.V2.Schema.JobStatistics4",
        "newJobStatisticsReservationUsage": "fn() -> +Bigquery.V2.Schema.JobStatisticsReservationUsage",
        "newJobStatus": "fn() -> +Bigquery.V2.Schema.JobStatus",
        "newMaterializedViewDefinition": "fn() -> +Bigquery.V2.Schema.MaterializedViewDefinition",
        "newModelDefinition": "fn() -> +Bigquery.V2.Schema.ModelDefinition",
        "newModelDefinitionModelOptions": "fn() -> +Bigquery.V2.Schema.ModelDefinitionModelOptions",
        "newQueryParameter": "fn() -> +Bigquery.V2.Schema.QueryParameter",
        "newQueryParameterType": "fn() -> +Bigquery.V2.Schema.QueryParameterType",
        "newQueryParameterTypeStructTypes": "fn() -> +Bigquery.V2.Schema.QueryParameterTypeStructTypes",
        "newQueryParameterValue": "fn() -> +Bigquery.V2.Schema.QueryParameterValue",
        "newQueryRequest": "fn() -> +Bigquery.V2.Schema.QueryRequest",
        "newQueryTimelineSample": "fn() -> +Bigquery.V2.Schema.QueryTimelineSample",
        "newRangePartitioning": "fn() -> +Bigquery.V2.Schema.RangePartitioning",
        "newRangePartitioningRange": "fn() -> +Bigquery.V2.Schema.RangePartitioningRange",
        "newRoutineReference": "fn() -> +Bigquery.V2.Schema.RoutineReference",
        "newStreamingbuffer": "fn() -> +Bigquery.V2.Schema.Streamingbuffer",
        "newTable": "fn() -> +Bigquery.V2.Schema.Table",
        "newTableDataInsertAllRequest": "fn() -> +Bigquery.V2.Schema.TableDataInsertAllRequest",
        "newTableDataInsertAllRequestRows": "fn() -> +Bigquery.V2.Schema.TableDataInsertAllRequestRows",
        "newTableFieldSchema": "fn() -> +Bigquery.V2.Schema.TableFieldSchema",
        "newTableFieldSchemaCategories": "fn() -> +Bigquery.V2.Schema.TableFieldSchemaCategories",
        "newTableReference": "fn() -> +Bigquery.V2.Schema.TableReference",
        "newTableSchema": "fn() -> +Bigquery.V2.Schema.TableSchema",
        "newTimePartitioning": "fn() -> +Bigquery.V2.Schema.TimePartitioning",
        "newUserDefinedFunctionResource": "fn() -> +Bigquery.V2.Schema.UserDefinedFunctionResource",
        "newViewDefinition": "fn() -> +Bigquery.V2.Schema.ViewDefinition",
        "Datasets": "+Bigquery.V2.Collection.DatasetsCollection",
        "Jobs": "+Bigquery.V2.Collection.JobsCollection",
        "Projects": "+Bigquery.V2.Collection.ProjectsCollection",
        "Tabledata": "+Bigquery.V2.Collection.TabledataCollection",
        "Tables": "+Bigquery.V2.Collection.TablesCollection"
      },
      "!define": {
        "Bigquery.V2.Collection.DatasetsCollection": {
          "prototype": {
            "get": "fn(projectId: string, datasetId: string) -> +Bigquery.V2.Schema.Dataset",
            "insert": "fn(resource: Bigquery.V2.Schema.Dataset, projectId: string) -> +Bigquery.V2.Schema.Dataset",
            "list": "fn(projectId: string, optionalArgs: object) -> +Bigquery.V2.Schema.DatasetList",
            "patch": "fn(resource: Bigquery.V2.Schema.Dataset, projectId: string, datasetId: string) -> +Bigquery.V2.Schema.Dataset",
            "remove": "fn(projectId: string, datasetId: string, optionalArgs: object)",
            "update": "fn(resource: Bigquery.V2.Schema.Dataset, projectId: string, datasetId: string) -> +Bigquery.V2.Schema.Dataset"
          }
        },
        "Bigquery.V2.Collection.JobsCollection": {
          "prototype": {
            "cancel": "fn(projectId: string, jobId: string, optionalArgs: object) -> +Bigquery.V2.Schema.JobCancelResponse",
            "get": "fn(projectId: string, jobId: string, optionalArgs: object) -> +Bigquery.V2.Schema.Job",
            "getQueryResults": "fn(projectId: string, jobId: string, optionalArgs: object) -> +Bigquery.V2.Schema.GetQueryResultsResponse",
            "insert": "fn(resource: Bigquery.V2.Schema.Job, projectId: string, mediaData: Blob) -> +Bigquery.V2.Schema.Job",
            "list": "fn(projectId: string, optionalArgs: object) -> +Bigquery.V2.Schema.JobList",
            "query": "fn(resource: Bigquery.V2.Schema.QueryRequest, projectId: string) -> +Bigquery.V2.Schema.QueryResponse"
          }
        },
        "Bigquery.V2.Collection.ProjectsCollection": {
          "prototype": {
            "getServiceAccount": "fn(projectId: string) -> +Bigquery.V2.Schema.GetServiceAccountResponse",
            "list": "fn(optionalArgs: object) -> +Bigquery.V2.Schema.ProjectList"
          }
        },
        "Bigquery.V2.Collection.TabledataCollection": {
          "prototype": {
            "insertAll": "fn(resource: Bigquery.V2.Schema.TableDataInsertAllRequest, projectId: string, datasetId: string, tableId: string) -> +Bigquery.V2.Schema.TableDataInsertAllResponse",
            "list": "fn(projectId: string, datasetId: string, tableId: string, optionalArgs: object) -> +Bigquery.V2.Schema.TableDataList"
          }
        },
        "Bigquery.V2.Collection.TablesCollection": {
          "prototype": {
            "get": "fn(projectId: string, datasetId: string, tableId: string, optionalArgs: object) -> +Bigquery.V2.Schema.Table",
            "insert": "fn(resource: Bigquery.V2.Schema.Table, projectId: string, datasetId: string) -> +Bigquery.V2.Schema.Table",
            "list": "fn(projectId: string, datasetId: string, optionalArgs: object) -> +Bigquery.V2.Schema.TableList",
            "patch": "fn(resource: Bigquery.V2.Schema.Table, projectId: string, datasetId: string, tableId: string) -> +Bigquery.V2.Schema.Table",
            "remove": "fn(projectId: string, datasetId: string, tableId: string)",
            "update": "fn(resource: Bigquery.V2.Schema.Table, projectId: string, datasetId: string, tableId: string) -> +Bigquery.V2.Schema.Table"
          }
        },
        "Bigquery.V2.Schema.BigQueryModelTraining": {
          "prototype": {
            "currentIteration": "Integer",
            "expectedTotalIterations": "string"
          }
        },
        "Bigquery.V2.Schema.BigtableColumn": {
          "prototype": {
            "encoding": "string",
            "fieldName": "string",
            "onlyReadLatest": "bool",
            "qualifierEncoded": "[number]",
            "qualifierString": "string",
            "type": "string"
          }
        },
        "Bigquery.V2.Schema.BigtableColumnFamily": {
          "prototype": {
            "columns": "[+Bigquery.V2.Schema.BigtableColumn]",
            "encoding": "string",
            "familyId": "string",
            "onlyReadLatest": "bool",
            "type": "string"
          }
        },
        "Bigquery.V2.Schema.BigtableOptions": {
          "prototype": {
            "columnFamilies": "[+Bigquery.V2.Schema.BigtableColumnFamily]",
            "ignoreUnspecifiedColumnFamilies": "bool",
            "readRowkeyAsString": "bool"
          }
        },
        "Bigquery.V2.Schema.BqmlIterationResult": {
          "prototype": {
            "durationMs": "string",
            "evalLoss": "number",
            "index": "Integer",
            "learnRate": "number",
            "trainingLoss": "number"
          }
        },
        "Bigquery.V2.Schema.BqmlTrainingRun": {
          "prototype": {
            "iterationResults": "[+Bigquery.V2.Schema.BqmlIterationResult]",
            "startTime": "string",
            "state": "string",
            "trainingOptions": "+Bigquery.V2.Schema.BqmlTrainingRunTrainingOptions"
          }
        },
        "Bigquery.V2.Schema.BqmlTrainingRunTrainingOptions": {
          "prototype": {
            "earlyStop": "bool",
            "l1Reg": "number",
            "l2Reg": "number",
            "learnRate": "number",
            "learnRateStrategy": "string",
            "lineSearchInitLearnRate": "number",
            "maxIteration": "string",
            "minRelProgress": "number",
            "warmStart": "bool"
          }
        },
        "Bigquery.V2.Schema.Clustering": {
          "prototype": {
            "fields": "[string]"
          }
        },
        "Bigquery.V2.Schema.CsvOptions": {
          "prototype": {
            "allowJaggedRows": "bool",
            "allowQuotedNewlines": "bool",
            "encoding": "string",
            "fieldDelimiter": "string",
            "quote": "string",
            "skipLeadingRows": "string"
          }
        },
        "Bigquery.V2.Schema.Dataset": {
          "prototype": {
            "access": "[+Bigquery.V2.Schema.DatasetAccess]",
            "creationTime": "string",
            "datasetReference": "+Bigquery.V2.Schema.DatasetReference",
            "defaultEncryptionConfiguration": "+Bigquery.V2.Schema.EncryptionConfiguration",
            "defaultPartitionExpirationMs": "string",
            "defaultTableExpirationMs": "string",
            "description": "string",
            "etag": "string",
            "friendlyName": "string",
            "id": "string",
            "kind": "string",
            "labels": "Object",
            "lastModifiedTime": "string",
            "location": "string",
            "selfLink": "string"
          }
        },
        "Bigquery.V2.Schema.DatasetAccess": {
          "prototype": {
            "domain": "string",
            "groupByEmail": "string",
            "iamMember": "string",
            "role": "string",
            "specialGroup": "string",
            "userByEmail": "string",
            "view": "+Bigquery.V2.Schema.TableReference"
          }
        },
        "Bigquery.V2.Schema.DatasetList": {
          "prototype": {
            "datasets": "[+Bigquery.V2.Schema.DatasetListDatasets]",
            "etag": "string",
            "kind": "string",
            "nextPageToken": "string"
          }
        },
        "Bigquery.V2.Schema.DatasetListDatasets": {
          "prototype": {
            "datasetReference": "+Bigquery.V2.Schema.DatasetReference",
            "friendlyName": "string",
            "id": "string",
            "kind": "string",
            "labels": "Object",
            "location": "string"
          }
        },
        "Bigquery.V2.Schema.DatasetReference": {
          "prototype": {
            "datasetId": "string",
            "projectId": "string"
          }
        },
        "Bigquery.V2.Schema.DestinationTableProperties": {
          "prototype": {
            "description": "string",
            "friendlyName": "string",
            "labels": "Object"
          }
        },
        "Bigquery.V2.Schema.EncryptionConfiguration": {
          "prototype": {
            "kmsKeyName": "string"
          }
        },
        "Bigquery.V2.Schema.ErrorProto": {
          "prototype": {
            "debugInfo": "string",
            "location": "string",
            "message": "string",
            "reason": "string"
          }
        },
        "Bigquery.V2.Schema.ExplainQueryStage": {
          "prototype": {
            "completedParallelInputs": "string",
            "computeMsAvg": "string",
            "computeMsMax": "string",
            "computeRatioAvg": "number",
            "computeRatioMax": "number",
            "endMs": "string",
            "id": "string",
            "inputStages": "[string]",
            "name": "string",
            "parallelInputs": "string",
            "readMsAvg": "string",
            "readMsMax": "string",
            "readRatioAvg": "number",
            "readRatioMax": "number",
            "recordsRead": "string",
            "recordsWritten": "string",
            "shuffleOutputBytes": "string",
            "shuffleOutputBytesSpilled": "string",
            "startMs": "string",
            "status": "string",
            "steps": "[+Bigquery.V2.Schema.ExplainQueryStep]",
            "waitMsAvg": "string",
            "waitMsMax": "string",
            "waitRatioAvg": "number",
            "waitRatioMax": "number",
            "writeMsAvg": "string",
            "writeMsMax": "string",
            "writeRatioAvg": "number",
            "writeRatioMax": "number"
          }
        },
        "Bigquery.V2.Schema.ExplainQueryStep": {
          "prototype": {
            "kind": "string",
            "substeps": "[string]"
          }
        },
        "Bigquery.V2.Schema.ExternalDataConfiguration": {
          "prototype": {
            "autodetect": "bool",
            "bigtableOptions": "+Bigquery.V2.Schema.BigtableOptions",
            "compression": "string",
            "csvOptions": "+Bigquery.V2.Schema.CsvOptions",
            "googleSheetsOptions": "+Bigquery.V2.Schema.GoogleSheetsOptions",
            "hivePartitioningMode": "string",
            "hivePartitioningOptions": "+Bigquery.V2.Schema.HivePartitioningOptions",
            "ignoreUnknownValues": "bool",
            "maxBadRecords": "Integer",
            "schema": "+Bigquery.V2.Schema.TableSchema",
            "sourceFormat": "string",
            "sourceUris": "[string]"
          }
        },
        "Bigquery.V2.Schema.GetQueryResultsResponse": {
          "prototype": {
            "cacheHit": "bool",
            "errors": "[+Bigquery.V2.Schema.ErrorProto]",
            "etag": "string",
            "jobComplete": "bool",
            "jobReference": "+Bigquery.V2.Schema.JobReference",
            "kind": "string",
            "numDmlAffectedRows": "string",
            "pageToken": "string",
            "rows": "[+Bigquery.V2.Schema.TableRow]",
            "schema": "+Bigquery.V2.Schema.TableSchema",
            "totalBytesProcessed": "string",
            "totalRows": "string"
          }
        },
        "Bigquery.V2.Schema.GetServiceAccountResponse": {
          "prototype": {
            "email": "string",
            "kind": "string"
          }
        },
        "Bigquery.V2.Schema.GoogleSheetsOptions": {
          "prototype": {
            "range": "string",
            "skipLeadingRows": "string"
          }
        },
        "Bigquery.V2.Schema.HivePartitioningOptions": {
          "prototype": {
            "mode": "string",
            "sourceUriPrefix": "string"
          }
        },
        "Bigquery.V2.Schema.Job": {
          "prototype": {
            "configuration": "+Bigquery.V2.Schema.JobConfiguration",
            "etag": "string",
            "id": "string",
            "jobReference": "+Bigquery.V2.Schema.JobReference",
            "kind": "string",
            "selfLink": "string",
            "statistics": "+Bigquery.V2.Schema.JobStatistics",
            "status": "+Bigquery.V2.Schema.JobStatus",
            "user_email": "string"
          }
        },
        "Bigquery.V2.Schema.JobCancelResponse": {
          "prototype": {
            "job": "+Bigquery.V2.Schema.Job",
            "kind": "string"
          }
        },
        "Bigquery.V2.Schema.JobConfiguration": {
          "prototype": {
            "copy": "+Bigquery.V2.Schema.JobConfigurationTableCopy",
            "dryRun": "bool",
            "extract": "+Bigquery.V2.Schema.JobConfigurationExtract",
            "jobTimeoutMs": "string",
            "jobType": "string",
            "labels": "Object",
            "load": "+Bigquery.V2.Schema.JobConfigurationLoad",
            "query": "+Bigquery.V2.Schema.JobConfigurationQuery"
          }
        },
        "Bigquery.V2.Schema.JobConfigurationExtract": {
          "prototype": {
            "compression": "string",
            "destinationFormat": "string",
            "destinationUri": "string",
            "destinationUris": "[string]",
            "fieldDelimiter": "string",
            "printHeader": "bool",
            "sourceTable": "+Bigquery.V2.Schema.TableReference"
          }
        },
        "Bigquery.V2.Schema.JobConfigurationLoad": {
          "prototype": {
            "allowJaggedRows": "bool",
            "allowQuotedNewlines": "bool",
            "autodetect": "bool",
            "clustering": "+Bigquery.V2.Schema.Clustering",
            "createDisposition": "string",
            "destinationEncryptionConfiguration": "+Bigquery.V2.Schema.EncryptionConfiguration",
            "destinationTable": "+Bigquery.V2.Schema.TableReference",
            "destinationTableProperties": "+Bigquery.V2.Schema.DestinationTableProperties",
            "encoding": "string",
            "fieldDelimiter": "string",
            "hivePartitioningMode": "string",
            "hivePartitioningOptions": "+Bigquery.V2.Schema.HivePartitioningOptions",
            "ignoreUnknownValues": "bool",
            "maxBadRecords": "Integer",
            "nullMarker": "string",
            "projectionFields": "[string]",
            "quote": "string",
            "rangePartitioning": "+Bigquery.V2.Schema.RangePartitioning",
            "schema": "+Bigquery.V2.Schema.TableSchema",
            "schemaInline": "string",
            "schemaInlineFormat": "string",
            "schemaUpdateOptions": "[string]",
            "skipLeadingRows": "Integer",
            "sourceFormat": "string",
            "sourceUris": "[string]",
            "timePartitioning": "+Bigquery.V2.Schema.TimePartitioning",
            "useAvroLogicalTypes": "bool",
            "writeDisposition": "string"
          }
        },
        "Bigquery.V2.Schema.JobConfigurationQuery": {
          "prototype": {
            "allowLargeResults": "bool",
            "clustering": "+Bigquery.V2.Schema.Clustering",
            "createDisposition": "string",
            "defaultDataset": "+Bigquery.V2.Schema.DatasetReference",
            "destinationEncryptionConfiguration": "+Bigquery.V2.Schema.EncryptionConfiguration",
            "destinationTable": "+Bigquery.V2.Schema.TableReference",
            "flattenResults": "bool",
            "maximumBillingTier": "Integer",
            "maximumBytesBilled": "string",
            "parameterMode": "string",
            "preserveNulls": "bool",
            "priority": "string",
            "query": "string",
            "queryParameters": "[+Bigquery.V2.Schema.QueryParameter]",
            "rangePartitioning": "+Bigquery.V2.Schema.RangePartitioning",
            "schemaUpdateOptions": "[string]",
            "tableDefinitions": "Object",
            "timePartitioning": "+Bigquery.V2.Schema.TimePartitioning",
            "useLegacySql": "bool",
            "useQueryCache": "bool",
            "userDefinedFunctionResources": "[+Bigquery.V2.Schema.UserDefinedFunctionResource]",
            "writeDisposition": "string"
          }
        },
        "Bigquery.V2.Schema.JobConfigurationTableCopy": {
          "prototype": {
            "createDisposition": "string",
            "destinationEncryptionConfiguration": "+Bigquery.V2.Schema.EncryptionConfiguration",
            "destinationTable": "+Bigquery.V2.Schema.TableReference",
            "sourceTable": "+Bigquery.V2.Schema.TableReference",
            "sourceTables": "[+Bigquery.V2.Schema.TableReference]",
            "writeDisposition": "string"
          }
        },
        "Bigquery.V2.Schema.JobList": {
          "prototype": {
            "etag": "string",
            "jobs": "[+Bigquery.V2.Schema.JobListJobs]",
            "kind": "string",
            "nextPageToken": "string"
          }
        },
        "Bigquery.V2.Schema.JobListJobs": {
          "prototype": {
            "configuration": "+Bigquery.V2.Schema.JobConfiguration",
            "errorResult": "+Bigquery.V2.Schema.ErrorProto",
            "id": "string",
            "jobReference": "+Bigquery.V2.Schema.JobReference",
            "kind": "string",
            "state": "string",
            "statistics": "+Bigquery.V2.Schema.JobStatistics",
            "status": "+Bigquery.V2.Schema.JobStatus",
            "user_email": "string"
          }
        },
        "Bigquery.V2.Schema.JobReference": {
          "prototype": {
            "jobId": "string",
            "location": "string",
            "projectId": "string"
          }
        },
        "Bigquery.V2.Schema.JobStatistics": {
          "prototype": {
            "completionRatio": "number",
            "creationTime": "string",
            "endTime": "string",
            "extract": "+Bigquery.V2.Schema.JobStatistics4",
            "load": "+Bigquery.V2.Schema.JobStatistics3",
            "numChildJobs": "string",
            "parentJobId": "string",
            "query": "+Bigquery.V2.Schema.JobStatistics2",
            "quotaDeferments": "[string]",
            "reservationUsage": "[+Bigquery.V2.Schema.JobStatisticsReservationUsage]",
            "reservation_id": "string",
            "startTime": "string",
            "totalBytesProcessed": "string",
            "totalSlotMs": "string"
          }
        },
        "Bigquery.V2.Schema.JobStatistics2": {
          "prototype": {
            "billingTier": "Integer",
            "cacheHit": "bool",
            "ddlOperationPerformed": "string",
            "ddlTargetRoutine": "+Bigquery.V2.Schema.RoutineReference",
            "ddlTargetTable": "+Bigquery.V2.Schema.TableReference",
            "estimatedBytesProcessed": "string",
            "modelTraining": "+Bigquery.V2.Schema.BigQueryModelTraining",
            "modelTrainingCurrentIteration": "Integer",
            "modelTrainingExpectedTotalIteration": "string",
            "numDmlAffectedRows": "string",
            "queryPlan": "[+Bigquery.V2.Schema.ExplainQueryStage]",
            "referencedRoutines": "[+Bigquery.V2.Schema.RoutineReference]",
            "referencedTables": "[+Bigquery.V2.Schema.TableReference]",
            "reservationUsage": "[+Bigquery.V2.Schema.JobStatistics2ReservationUsage]",
            "schema": "+Bigquery.V2.Schema.TableSchema",
            "statementType": "string",
            "timeline": "[+Bigquery.V2.Schema.QueryTimelineSample]",
            "totalBytesBilled": "string",
            "totalBytesProcessed": "string",
            "totalBytesProcessedAccuracy": "string",
            "totalPartitionsProcessed": "string",
            "totalSlotMs": "string",
            "undeclaredQueryParameters": "[+Bigquery.V2.Schema.QueryParameter]"
          }
        },
        "Bigquery.V2.Schema.JobStatistics2ReservationUsage": {
          "prototype": {
            "name": "string",
            "slotMs": "string"
          }
        },
        "Bigquery.V2.Schema.JobStatistics3": {
          "prototype": {
            "badRecords": "string",
            "inputFileBytes": "string",
            "inputFiles": "string",
            "outputBytes": "string",
            "outputRows": "string"
          }
        },
        "Bigquery.V2.Schema.JobStatistics4": {
          "prototype": {
            "destinationUriFileCounts": "[string]",
            "inputBytes": "string"
          }
        },
        "Bigquery.V2.Schema.JobStatisticsReservationUsage": {
          "prototype": {
            "name": "string",
            "slotMs": "string"
          }
        },
        "Bigquery.V2.Schema.JobStatus": {
          "prototype": {
            "errorResult": "+Bigquery.V2.Schema.ErrorProto",
            "errors": "[+Bigquery.V2.Schema.ErrorProto]",
            "state": "string"
          }
        },
        "Bigquery.V2.Schema.MaterializedViewDefinition": {
          "prototype": {
            "lastRefreshTime": "string",
            "query": "string"
          }
        },
        "Bigquery.V2.Schema.ModelDefinition": {
          "prototype": {
            "modelOptions": "+Bigquery.V2.Schema.ModelDefinitionModelOptions",
            "trainingRuns": "[+Bigquery.V2.Schema.BqmlTrainingRun]"
          }
        },
        "Bigquery.V2.Schema.ModelDefinitionModelOptions": {
          "prototype": {
            "labels": "[string]",
            "lossType": "string",
            "modelType": "string"
          }
        },
        "Bigquery.V2.Schema.ProjectList": {
          "prototype": {
            "etag": "string",
            "kind": "string",
            "nextPageToken": "string",
            "projects": "[+Bigquery.V2.Schema.ProjectListProjects]",
            "totalItems": "Integer"
          }
        },
        "Bigquery.V2.Schema.ProjectListProjects": {
          "prototype": {
            "friendlyName": "string",
            "id": "string",
            "kind": "string",
            "numericId": "string",
            "projectReference": "+Bigquery.V2.Schema.ProjectReference"
          }
        },
        "Bigquery.V2.Schema.ProjectReference": {
          "prototype": {
            "projectId": "string"
          }
        },
        "Bigquery.V2.Schema.QueryParameter": {
          "prototype": {
            "name": "string",
            "parameterType": "+Bigquery.V2.Schema.QueryParameterType",
            "parameterValue": "+Bigquery.V2.Schema.QueryParameterValue"
          }
        },
        "Bigquery.V2.Schema.QueryParameterType": {
          "prototype": {
            "arrayType": "+Bigquery.V2.Schema.QueryParameterType",
            "structTypes": "[+Bigquery.V2.Schema.QueryParameterTypeStructTypes]",
            "type": "string"
          }
        },
        "Bigquery.V2.Schema.QueryParameterTypeStructTypes": {
          "prototype": {
            "description": "string",
            "name": "string",
            "type": "+Bigquery.V2.Schema.QueryParameterType"
          }
        },
        "Bigquery.V2.Schema.QueryParameterValue": {
          "prototype": {
            "arrayValues": "[+Bigquery.V2.Schema.QueryParameterValue]",
            "structValues": "Object",
            "value": "string"
          }
        },
        "Bigquery.V2.Schema.QueryRequest": {
          "prototype": {
            "defaultDataset": "+Bigquery.V2.Schema.DatasetReference",
            "dryRun": "bool",
            "kind": "string",
            "location": "string",
            "maxResults": "Integer",
            "parameterMode": "string",
            "preserveNulls": "bool",
            "query": "string",
            "queryParameters": "[+Bigquery.V2.Schema.QueryParameter]",
            "timeoutMs": "Integer",
            "useLegacySql": "bool",
            "useQueryCache": "bool"
          }
        },
        "Bigquery.V2.Schema.QueryResponse": {
          "prototype": {
            "cacheHit": "bool",
            "errors": "[+Bigquery.V2.Schema.ErrorProto]",
            "jobComplete": "bool",
            "jobReference": "+Bigquery.V2.Schema.JobReference",
            "kind": "string",
            "numDmlAffectedRows": "string",
            "pageToken": "string",
            "rows": "[+Bigquery.V2.Schema.TableRow]",
            "schema": "+Bigquery.V2.Schema.TableSchema",
            "totalBytesProcessed": "string",
            "totalRows": "string"
          }
        },
        "Bigquery.V2.Schema.QueryTimelineSample": {
          "prototype": {
            "activeUnits": "string",
            "completedUnits": "string",
            "elapsedMs": "string",
            "pendingUnits": "string",
            "totalSlotMs": "string"
          }
        },
        "Bigquery.V2.Schema.RangePartitioning": {
          "prototype": {
            "field": "string",
            "range": "+Bigquery.V2.Schema.RangePartitioningRange"
          }
        },
        "Bigquery.V2.Schema.RangePartitioningRange": {
          "prototype": {
            "end": "string",
            "interval": "string",
            "start": "string"
          }
        },
        "Bigquery.V2.Schema.RoutineReference": {
          "prototype": {
            "datasetId": "string",
            "projectId": "string",
            "routineId": "string"
          }
        },
        "Bigquery.V2.Schema.Streamingbuffer": {
          "prototype": {
            "estimatedBytes": "string",
            "estimatedRows": "string",
            "oldestEntryTime": "string"
          }
        },
        "Bigquery.V2.Schema.Table": {
          "prototype": {
            "clustering": "+Bigquery.V2.Schema.Clustering",
            "creationTime": "string",
            "description": "string",
            "encryptionConfiguration": "+Bigquery.V2.Schema.EncryptionConfiguration",
            "etag": "string",
            "expirationTime": "string",
            "externalDataConfiguration": "+Bigquery.V2.Schema.ExternalDataConfiguration",
            "friendlyName": "string",
            "id": "string",
            "kind": "string",
            "labels": "Object",
            "lastModifiedTime": "string",
            "location": "string",
            "materializedView": "+Bigquery.V2.Schema.MaterializedViewDefinition",
            "model": "+Bigquery.V2.Schema.ModelDefinition",
            "numBytes": "string",
            "numLongTermBytes": "string",
            "numPhysicalBytes": "string",
            "numRows": "string",
            "rangePartitioning": "+Bigquery.V2.Schema.RangePartitioning",
            "requirePartitionFilter": "bool",
            "schema": "+Bigquery.V2.Schema.TableSchema",
            "selfLink": "string",
            "streamingBuffer": "+Bigquery.V2.Schema.Streamingbuffer",
            "tableReference": "+Bigquery.V2.Schema.TableReference",
            "timePartitioning": "+Bigquery.V2.Schema.TimePartitioning",
            "type": "string",
            "view": "+Bigquery.V2.Schema.ViewDefinition"
          }
        },
        "Bigquery.V2.Schema.TableCell": {
          "prototype": {
            "v": "Object"
          }
        },
        "Bigquery.V2.Schema.TableDataInsertAllRequest": {
          "prototype": {
            "ignoreUnknownValues": "bool",
            "kind": "string",
            "rows": "[+Bigquery.V2.Schema.TableDataInsertAllRequestRows]",
            "skipInvalidRows": "bool",
            "templateSuffix": "string"
          }
        },
        "Bigquery.V2.Schema.TableDataInsertAllRequestRows": {
          "prototype": {
            "insertId": "string",
            "json": "Bigquery.V2.Schema.JsonObject"
          }
        },
        "Bigquery.V2.Schema.TableDataInsertAllResponse": {
          "prototype": {
            "insertErrors": "[+Bigquery.V2.Schema.TableDataInsertAllResponseInsertErrors]",
            "kind": "string"
          }
        },
        "Bigquery.V2.Schema.TableDataInsertAllResponseInsertErrors": {
          "prototype": {
            "errors": "[+Bigquery.V2.Schema.ErrorProto]",
            "index": "Integer"
          }
        },
        "Bigquery.V2.Schema.TableDataList": {
          "prototype": {
            "etag": "string",
            "kind": "string",
            "pageToken": "string",
            "rows": "[+Bigquery.V2.Schema.TableRow]",
            "totalRows": "string"
          }
        },
        "Bigquery.V2.Schema.TableFieldSchema": {
          "prototype": {
            "categories": "+Bigquery.V2.Schema.TableFieldSchemaCategories",
            "description": "string",
            "fields": "[+Bigquery.V2.Schema.TableFieldSchema]",
            "mode": "string",
            "name": "string",
            "type": "string"
          }
        },
        "Bigquery.V2.Schema.TableFieldSchemaCategories": {
          "prototype": {
            "names": "[string]"
          }
        },
        "Bigquery.V2.Schema.TableList": {
          "prototype": {
            "etag": "string",
            "kind": "string",
            "nextPageToken": "string",
            "tables": "[+Bigquery.V2.Schema.TableListTables]",
            "totalItems": "Integer"
          }
        },
        "Bigquery.V2.Schema.TableListTables": {
          "prototype": {
            "clustering": "+Bigquery.V2.Schema.Clustering",
            "creationTime": "string",
            "expirationTime": "string",
            "friendlyName": "string",
            "id": "string",
            "kind": "string",
            "labels": "Object",
            "tableReference": "+Bigquery.V2.Schema.TableReference",
            "timePartitioning": "+Bigquery.V2.Schema.TimePartitioning",
            "type": "string",
            "view": "+Bigquery.V2.Schema.TableListTablesView"
          }
        },
        "Bigquery.V2.Schema.TableListTablesView": {
          "prototype": {
            "useLegacySql": "bool"
          }
        },
        "Bigquery.V2.Schema.TableReference": {
          "prototype": {
            "datasetId": "string",
            "projectId": "string",
            "tableId": "string"
          }
        },
        "Bigquery.V2.Schema.TableRow": {
          "prototype": {
            "f": "[+Bigquery.V2.Schema.TableCell]"
          }
        },
        "Bigquery.V2.Schema.TableSchema": {
          "prototype": {
            "fields": "[+Bigquery.V2.Schema.TableFieldSchema]"
          }
        },
        "Bigquery.V2.Schema.TimePartitioning": {
          "prototype": {
            "expirationMs": "string",
            "field": "string",
            "requirePartitionFilter": "bool",
            "type": "string"
          }
        },
        "Bigquery.V2.Schema.UserDefinedFunctionResource": {
          "prototype": {
            "inlineCode": "string",
            "resourceUri": "string"
          }
        },
        "Bigquery.V2.Schema.ViewDefinition": {
          "prototype": {
            "query": "string",
            "useLegacySql": "bool",
            "userDefinedFunctionResources": "[+Bigquery.V2.Schema.UserDefinedFunctionResource]"
          }
        }
      }
    },
    {
      "!name": "Calendar",
      "Calendar": {
        "newAclRule": "fn() -> +Calendar.V3.Schema.AclRule",
        "newAclRuleScope": "fn() -> +Calendar.V3.Schema.AclRuleScope",
        "newCalendar": "fn() -> +Calendar.V3.Schema.Calendar",
        "newCalendarListEntry": "fn() -> +Calendar.V3.Schema.CalendarListEntry",
        "newCalendarListEntryNotificationSettings": "fn() -> +Calendar.V3.Schema.CalendarListEntryNotificationSettings",
        "newCalendarNotification": "fn() -> +Calendar.V3.Schema.CalendarNotification",
        "newChannel": "fn() -> +Calendar.V3.Schema.Channel",
        "newConferenceData": "fn() -> +Calendar.V3.Schema.ConferenceData",
        "newConferenceParameters": "fn() -> +Calendar.V3.Schema.ConferenceParameters",
        "newConferenceParametersAddOnParameters": "fn() -> +Calendar.V3.Schema.ConferenceParametersAddOnParameters",
        "newConferenceProperties": "fn() -> +Calendar.V3.Schema.ConferenceProperties",
        "newConferenceRequestStatus": "fn() -> +Calendar.V3.Schema.ConferenceRequestStatus",
        "newConferenceSolution": "fn() -> +Calendar.V3.Schema.ConferenceSolution",
        "newConferenceSolutionKey": "fn() -> +Calendar.V3.Schema.ConferenceSolutionKey",
        "newCreateConferenceRequest": "fn() -> +Calendar.V3.Schema.CreateConferenceRequest",
        "newEntryPoint": "fn() -> +Calendar.V3.Schema.EntryPoint",
        "newEvent": "fn() -> +Calendar.V3.Schema.Event",
        "newEventAttachment": "fn() -> +Calendar.V3.Schema.EventAttachment",
        "newEventAttendee": "fn() -> +Calendar.V3.Schema.EventAttendee",
        "newEventCreator": "fn() -> +Calendar.V3.Schema.EventCreator",
        "newEventDateTime": "fn() -> +Calendar.V3.Schema.EventDateTime",
        "newEventExtendedProperties": "fn() -> +Calendar.V3.Schema.EventExtendedProperties",
        "newEventGadget": "fn() -> +Calendar.V3.Schema.EventGadget",
        "newEventOrganizer": "fn() -> +Calendar.V3.Schema.EventOrganizer",
        "newEventReminder": "fn() -> +Calendar.V3.Schema.EventReminder",
        "newEventReminders": "fn() -> +Calendar.V3.Schema.EventReminders",
        "newEventSource": "fn() -> +Calendar.V3.Schema.EventSource",
        "newFreeBusyRequest": "fn() -> +Calendar.V3.Schema.FreeBusyRequest",
        "newFreeBusyRequestItem": "fn() -> +Calendar.V3.Schema.FreeBusyRequestItem",
        "Acl": "+Calendar.V3.Collection.AclCollection",
        "CalendarList": "+Calendar.V3.Collection.CalendarListCollection",
        "Calendars": "+Calendar.V3.Collection.CalendarsCollection",
        "Channels": "+Calendar.V3.Collection.ChannelsCollection",
        "Colors": "+Calendar.V3.Collection.ColorsCollection",
        "Events": "+Calendar.V3.Collection.EventsCollection",
        "Freebusy": "+Calendar.V3.Collection.FreebusyCollection",
        "Settings": "+Calendar.V3.Collection.SettingsCollection"
      },
      "!define": {
        "Calendar.V3.Collection.AclCollection": {
          "prototype": {
            "get": "fn(calendarId: string, ruleId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.AclRule",
            "insert": "fn(resource: Calendar.V3.Schema.AclRule, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.AclRule",
            "list": "fn(calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Acl",
            "patch": "fn(resource: Calendar.V3.Schema.AclRule, calendarId: string, ruleId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.AclRule",
            "remove": "fn(calendarId: string, ruleId: string, optionalArgs: object, headers: object)",
            "update": "fn(resource: Calendar.V3.Schema.AclRule, calendarId: string, ruleId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.AclRule",
            "watch": "fn(resource: Calendar.V3.Schema.Channel, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Channel"
          }
        },
        "Calendar.V3.Collection.CalendarListCollection": {
          "prototype": {
            "get": "fn(calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.CalendarListEntry",
            "insert": "fn(resource: Calendar.V3.Schema.CalendarListEntry, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.CalendarListEntry",
            "list": "fn(optionalArgs: object, headers: object) -> +Calendar.V3.Schema.CalendarList",
            "patch": "fn(resource: Calendar.V3.Schema.CalendarListEntry, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.CalendarListEntry",
            "remove": "fn(calendarId: string, optionalArgs: object, headers: object)",
            "update": "fn(resource: Calendar.V3.Schema.CalendarListEntry, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.CalendarListEntry",
            "watch": "fn(resource: Calendar.V3.Schema.Channel, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Channel"
          }
        },
        "Calendar.V3.Collection.CalendarsCollection": {
          "prototype": {
            "clear": "fn(calendarId: string, optionalArgs: object, headers: object)",
            "get": "fn(calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Calendar",
            "insert": "fn(resource: Calendar.V3.Schema.Calendar, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Calendar",
            "patch": "fn(resource: Calendar.V3.Schema.Calendar, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Calendar",
            "remove": "fn(calendarId: string, optionalArgs: object, headers: object)",
            "update": "fn(resource: Calendar.V3.Schema.Calendar, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Calendar"
          }
        },
        "Calendar.V3.Collection.ChannelsCollection": {
          "prototype": {
            "stop": "fn(resource: Calendar.V3.Schema.Channel, optionalArgs: object, headers: object)"
          }
        },
        "Calendar.V3.Collection.ColorsCollection": {
          "prototype": {
            "get": "fn(optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Colors"
          }
        },
        "Calendar.V3.Collection.EventsCollection": {
          "prototype": {
            "get": "fn(calendarId: string, eventId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Event",
            "import": "fn(resource: Calendar.V3.Schema.Event, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Event",
            "insert": "fn(resource: Calendar.V3.Schema.Event, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Event",
            "instances": "fn(calendarId: string, eventId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Events",
            "list": "fn(calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Events",
            "move": "fn(calendarId: string, eventId: string, destination: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Event",
            "patch": "fn(resource: Calendar.V3.Schema.Event, calendarId: string, eventId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Event",
            "quickAdd": "fn(calendarId: string, text: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Event",
            "remove": "fn(calendarId: string, eventId: string, optionalArgs: object, headers: object)",
            "update": "fn(resource: Calendar.V3.Schema.Event, calendarId: string, eventId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Event",
            "watch": "fn(resource: Calendar.V3.Schema.Channel, calendarId: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Channel"
          }
        },
        "Calendar.V3.Collection.FreebusyCollection": {
          "prototype": {
            "query": "fn(resource: Calendar.V3.Schema.FreeBusyRequest, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.FreeBusyResponse"
          }
        },
        "Calendar.V3.Collection.SettingsCollection": {
          "prototype": {
            "get": "fn(setting: string, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Setting",
            "list": "fn(optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Settings",
            "watch": "fn(resource: Calendar.V3.Schema.Channel, optionalArgs: object, headers: object) -> +Calendar.V3.Schema.Channel"
          }
        },
        "Calendar.V3.Schema.Acl": {
          "prototype": {
            "etag": "string",
            "items": "[+Calendar.V3.Schema.AclRule]",
            "kind": "string",
            "nextPageToken": "string",
            "nextSyncToken": "string"
          }
        },
        "Calendar.V3.Schema.AclRule": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "role": "string",
            "scope": "+Calendar.V3.Schema.AclRuleScope"
          }
        },
        "Calendar.V3.Schema.AclRuleScope": {
          "prototype": {
            "type": "string",
            "value": "string"
          }
        },
        "Calendar.V3.Schema.Calendar": {
          "prototype": {
            "conferenceProperties": "+Calendar.V3.Schema.ConferenceProperties",
            "description": "string",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "location": "string",
            "summary": "string",
            "timeZone": "string"
          }
        },
        "Calendar.V3.Schema.CalendarList": {
          "prototype": {
            "etag": "string",
            "items": "[+Calendar.V3.Schema.CalendarListEntry]",
            "kind": "string",
            "nextPageToken": "string",
            "nextSyncToken": "string"
          }
        },
        "Calendar.V3.Schema.CalendarListEntry": {
          "prototype": {
            "accessRole": "string",
            "backgroundColor": "string",
            "colorId": "string",
            "conferenceProperties": "+Calendar.V3.Schema.ConferenceProperties",
            "defaultReminders": "[+Calendar.V3.Schema.EventReminder]",
            "deleted": "bool",
            "description": "string",
            "etag": "string",
            "foregroundColor": "string",
            "hidden": "bool",
            "id": "string",
            "kind": "string",
            "location": "string",
            "notificationSettings": "+Calendar.V3.Schema.CalendarListEntryNotificationSettings",
            "primary": "bool",
            "selected": "bool",
            "summary": "string",
            "summaryOverride": "string",
            "timeZone": "string"
          }
        },
        "Calendar.V3.Schema.CalendarListEntryNotificationSettings": {
          "prototype": {
            "notifications": "[+Calendar.V3.Schema.CalendarNotification]"
          }
        },
        "Calendar.V3.Schema.CalendarNotification": {
          "prototype": {
            "method": "string",
            "type": "string"
          }
        },
        "Calendar.V3.Schema.Channel": {
          "prototype": {
            "address": "string",
            "expiration": "string",
            "id": "string",
            "kind": "string",
            "params": "Object",
            "payload": "bool",
            "resourceId": "string",
            "resourceUri": "string",
            "token": "string",
            "type": "string"
          }
        },
        "Calendar.V3.Schema.ColorDefinition": {
          "prototype": {
            "background": "string",
            "foreground": "string"
          }
        },
        "Calendar.V3.Schema.Colors": {
          "prototype": {
            "calendar": "Object",
            "event": "Object",
            "kind": "string",
            "updated": "string"
          }
        },
        "Calendar.V3.Schema.ConferenceData": {
          "prototype": {
            "conferenceId": "string",
            "conferenceSolution": "+Calendar.V3.Schema.ConferenceSolution",
            "createRequest": "+Calendar.V3.Schema.CreateConferenceRequest",
            "entryPoints": "[+Calendar.V3.Schema.EntryPoint]",
            "notes": "string",
            "parameters": "+Calendar.V3.Schema.ConferenceParameters",
            "signature": "string"
          }
        },
        "Calendar.V3.Schema.ConferenceParameters": {
          "prototype": {
            "addOnParameters": "+Calendar.V3.Schema.ConferenceParametersAddOnParameters"
          }
        },
        "Calendar.V3.Schema.ConferenceParametersAddOnParameters": {
          "prototype": {
            "parameters": "Object"
          }
        },
        "Calendar.V3.Schema.ConferenceProperties": {
          "prototype": {
            "allowedConferenceSolutionTypes": "[string]"
          }
        },
        "Calendar.V3.Schema.ConferenceRequestStatus": {
          "prototype": {
            "statusCode": "string"
          }
        },
        "Calendar.V3.Schema.ConferenceSolution": {
          "prototype": {
            "iconUri": "string",
            "key": "+Calendar.V3.Schema.ConferenceSolutionKey",
            "name": "string"
          }
        },
        "Calendar.V3.Schema.ConferenceSolutionKey": {
          "prototype": {
            "type": "string"
          }
        },
        "Calendar.V3.Schema.CreateConferenceRequest": {
          "prototype": {
            "conferenceSolutionKey": "+Calendar.V3.Schema.ConferenceSolutionKey",
            "requestId": "string",
            "status": "+Calendar.V3.Schema.ConferenceRequestStatus"
          }
        },
        "Calendar.V3.Schema.EntryPoint": {
          "prototype": {
            "accessCode": "string",
            "entryPointFeatures": "[string]",
            "entryPointType": "string",
            "label": "string",
            "meetingCode": "string",
            "passcode": "string",
            "password": "string",
            "pin": "string",
            "regionCode": "string",
            "uri": "string"
          }
        },
        "Calendar.V3.Schema.Error": {
          "prototype": {
            "domain": "string",
            "reason": "string"
          }
        },
        "Calendar.V3.Schema.Event": {
          "prototype": {
            "anyoneCanAddSelf": "bool",
            "attachments": "[+Calendar.V3.Schema.EventAttachment]",
            "attendees": "[+Calendar.V3.Schema.EventAttendee]",
            "attendeesOmitted": "bool",
            "colorId": "string",
            "conferenceData": "+Calendar.V3.Schema.ConferenceData",
            "created": "string",
            "creator": "+Calendar.V3.Schema.EventCreator",
            "description": "string",
            "end": "+Calendar.V3.Schema.EventDateTime",
            "endTimeUnspecified": "bool",
            "etag": "string",
            "extendedProperties": "+Calendar.V3.Schema.EventExtendedProperties",
            "gadget": "+Calendar.V3.Schema.EventGadget",
            "guestsCanInviteOthers": "bool",
            "guestsCanModify": "bool",
            "guestsCanSeeOtherGuests": "bool",
            "hangoutLink": "string",
            "htmlLink": "string",
            "iCalUID": "string",
            "id": "string",
            "kind": "string",
            "location": "string",
            "locked": "bool",
            "organizer": "+Calendar.V3.Schema.EventOrganizer",
            "originalStartTime": "+Calendar.V3.Schema.EventDateTime",
            "privateCopy": "bool",
            "recurrence": "[string]",
            "recurringEventId": "string",
            "reminders": "+Calendar.V3.Schema.EventReminders",
            "sequence": "Integer",
            "source": "+Calendar.V3.Schema.EventSource",
            "start": "+Calendar.V3.Schema.EventDateTime",
            "status": "string",
            "summary": "string",
            "transparency": "string",
            "updated": "string",
            "visibility": "string"
          }
        },
        "Calendar.V3.Schema.EventAttachment": {
          "prototype": {
            "fileId": "string",
            "fileUrl": "string",
            "iconLink": "string",
            "mimeType": "string",
            "title": "string"
          }
        },
        "Calendar.V3.Schema.EventAttendee": {
          "prototype": {
            "additionalGuests": "Integer",
            "comment": "string",
            "displayName": "string",
            "email": "string",
            "id": "string",
            "optional": "bool",
            "organizer": "bool",
            "resource": "bool",
            "responseStatus": "string",
            "self": "bool"
          }
        },
        "Calendar.V3.Schema.EventCreator": {
          "prototype": {
            "displayName": "string",
            "email": "string",
            "id": "string",
            "self": "bool"
          }
        },
        "Calendar.V3.Schema.EventDateTime": {
          "prototype": {
            "date": "string",
            "dateTime": "string",
            "timeZone": "string"
          }
        },
        "Calendar.V3.Schema.EventExtendedProperties": {
          "prototype": {
            "private": "Object",
            "shared": "Object"
          }
        },
        "Calendar.V3.Schema.EventGadget": {
          "prototype": {
            "display": "string",
            "height": "Integer",
            "iconLink": "string",
            "link": "string",
            "preferences": "Object",
            "title": "string",
            "type": "string",
            "width": "Integer"
          }
        },
        "Calendar.V3.Schema.EventOrganizer": {
          "prototype": {
            "displayName": "string",
            "email": "string",
            "id": "string",
            "self": "bool"
          }
        },
        "Calendar.V3.Schema.EventReminder": {
          "prototype": {
            "method": "string",
            "minutes": "Integer"
          }
        },
        "Calendar.V3.Schema.EventReminders": {
          "prototype": {
            "overrides": "[+Calendar.V3.Schema.EventReminder]",
            "useDefault": "bool"
          }
        },
        "Calendar.V3.Schema.EventSource": {
          "prototype": {
            "title": "string",
            "url": "string"
          }
        },
        "Calendar.V3.Schema.Events": {
          "prototype": {
            "accessRole": "string",
            "defaultReminders": "[+Calendar.V3.Schema.EventReminder]",
            "description": "string",
            "etag": "string",
            "items": "[+Calendar.V3.Schema.Event]",
            "kind": "string",
            "nextPageToken": "string",
            "nextSyncToken": "string",
            "summary": "string",
            "timeZone": "string",
            "updated": "string"
          }
        },
        "Calendar.V3.Schema.FreeBusyCalendar": {
          "prototype": {
            "busy": "[+Calendar.V3.Schema.TimePeriod]",
            "errors": "[+Calendar.V3.Schema.Error]"
          }
        },
        "Calendar.V3.Schema.FreeBusyGroup": {
          "prototype": {
            "calendars": "[string]",
            "errors": "[+Calendar.V3.Schema.Error]"
          }
        },
        "Calendar.V3.Schema.FreeBusyRequest": {
          "prototype": {
            "calendarExpansionMax": "Integer",
            "groupExpansionMax": "Integer",
            "items": "[+Calendar.V3.Schema.FreeBusyRequestItem]",
            "timeMax": "string",
            "timeMin": "string",
            "timeZone": "string"
          }
        },
        "Calendar.V3.Schema.FreeBusyRequestItem": {
          "prototype": {
            "id": "string"
          }
        },
        "Calendar.V3.Schema.FreeBusyResponse": {
          "prototype": {
            "calendars": "Object",
            "groups": "Object",
            "kind": "string",
            "timeMax": "string",
            "timeMin": "string"
          }
        },
        "Calendar.V3.Schema.Setting": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "value": "string"
          }
        },
        "Calendar.V3.Schema.Settings": {
          "prototype": {
            "etag": "string",
            "items": "[+Calendar.V3.Schema.Setting]",
            "kind": "string",
            "nextPageToken": "string",
            "nextSyncToken": "string"
          }
        },
        "Calendar.V3.Schema.TimePeriod": {
          "prototype": {
            "end": "string",
            "start": "string"
          }
        }
      }
    },
    {
      "!name": "FusionTables",
      "FusionTables": {
        "newBucket": "fn() -> +Fusiontables.V1.Schema.Bucket",
        "newColumn": "fn() -> +Fusiontables.V1.Schema.Column",
        "newColumnBaseColumn": "fn() -> +Fusiontables.V1.Schema.ColumnBaseColumn",
        "newLineStyle": "fn() -> +Fusiontables.V1.Schema.LineStyle",
        "newPointStyle": "fn() -> +Fusiontables.V1.Schema.PointStyle",
        "newPolygonStyle": "fn() -> +Fusiontables.V1.Schema.PolygonStyle",
        "newStyleFunction": "fn() -> +Fusiontables.V1.Schema.StyleFunction",
        "newStyleFunctionGradient": "fn() -> +Fusiontables.V1.Schema.StyleFunctionGradient",
        "newStyleFunctionGradientColors": "fn() -> +Fusiontables.V1.Schema.StyleFunctionGradientColors",
        "newStyleSetting": "fn() -> +Fusiontables.V1.Schema.StyleSetting",
        "newTable": "fn() -> +Fusiontables.V1.Schema.Table",
        "newTemplate": "fn() -> +Fusiontables.V1.Schema.Template",
        "Column": "+Fusiontables.V1.Collection.ColumnCollection",
        "Query": "+Fusiontables.V1.Collection.QueryCollection",
        "Style": "+Fusiontables.V1.Collection.StyleCollection",
        "Table": "+Fusiontables.V1.Collection.TableCollection",
        "Task": "+Fusiontables.V1.Collection.TaskCollection",
        "Template": "+Fusiontables.V1.Collection.TemplateCollection"
      },
      "!define": {
        "Fusiontables.V1.Collection.ColumnCollection": {
          "prototype": {
            "get": "fn(tableId: string, columnId: string) -> +Fusiontables.V1.Schema.Column",
            "insert": "fn(resource: Fusiontables.V1.Schema.Column, tableId: string) -> +Fusiontables.V1.Schema.Column",
            "list": "fn(tableId: string, optionalArgs: object) -> +Fusiontables.V1.Schema.ColumnList",
            "patch": "fn(resource: Fusiontables.V1.Schema.Column, tableId: string, columnId: string) -> +Fusiontables.V1.Schema.Column",
            "remove": "fn(tableId: string, columnId: string)",
            "update": "fn(resource: Fusiontables.V1.Schema.Column, tableId: string, columnId: string) -> +Fusiontables.V1.Schema.Column"
          }
        },
        "Fusiontables.V1.Collection.QueryCollection": {
          "prototype": {
            "sql": "fn(sql: string, optionalArgs: object) -> +Fusiontables.V1.Schema.Sqlresponse",
            "sqlGet": "fn(sql: string, optionalArgs: object) -> +Fusiontables.V1.Schema.Sqlresponse"
          }
        },
        "Fusiontables.V1.Collection.StyleCollection": {
          "prototype": {
            "get": "fn(tableId: string, styleId: number) -> +Fusiontables.V1.Schema.StyleSetting",
            "insert": "fn(resource: Fusiontables.V1.Schema.StyleSetting, tableId: string) -> +Fusiontables.V1.Schema.StyleSetting",
            "list": "fn(tableId: string, optionalArgs: object) -> +Fusiontables.V1.Schema.StyleSettingList",
            "patch": "fn(resource: Fusiontables.V1.Schema.StyleSetting, tableId: string, styleId: number) -> +Fusiontables.V1.Schema.StyleSetting",
            "remove": "fn(tableId: string, styleId: number)",
            "update": "fn(resource: Fusiontables.V1.Schema.StyleSetting, tableId: string, styleId: number) -> +Fusiontables.V1.Schema.StyleSetting"
          }
        },
        "Fusiontables.V1.Collection.TableCollection": {
          "prototype": {
            "copy": "fn(tableId: string, optionalArgs: object) -> +Fusiontables.V1.Schema.Table",
            "get": "fn(tableId: string) -> +Fusiontables.V1.Schema.Table",
            "importRows": "fn(tableId: string, mediaData: Blob, optionalArgs: object) -> +Fusiontables.V1.Schema.Import",
            "importTable": "fn(name: string, mediaData: Blob, optionalArgs: object) -> +Fusiontables.V1.Schema.Table",
            "insert": "fn(resource: Fusiontables.V1.Schema.Table) -> +Fusiontables.V1.Schema.Table",
            "list": "fn(optionalArgs: object) -> +Fusiontables.V1.Schema.TableList",
            "patch": "fn(resource: Fusiontables.V1.Schema.Table, tableId: string, optionalArgs: object) -> +Fusiontables.V1.Schema.Table",
            "remove": "fn(tableId: string)",
            "update": "fn(resource: Fusiontables.V1.Schema.Table, tableId: string, optionalArgs: object) -> +Fusiontables.V1.Schema.Table"
          }
        },
        "Fusiontables.V1.Collection.TaskCollection": {
          "prototype": {
            "get": "fn(tableId: string, taskId: string) -> +Fusiontables.V1.Schema.Task",
            "list": "fn(tableId: string, optionalArgs: object) -> +Fusiontables.V1.Schema.TaskList",
            "remove": "fn(tableId: string, taskId: string)"
          }
        },
        "Fusiontables.V1.Collection.TemplateCollection": {
          "prototype": {
            "get": "fn(tableId: string, templateId: number) -> +Fusiontables.V1.Schema.Template",
            "insert": "fn(resource: Fusiontables.V1.Schema.Template, tableId: string) -> +Fusiontables.V1.Schema.Template",
            "list": "fn(tableId: string, optionalArgs: object) -> +Fusiontables.V1.Schema.TemplateList",
            "patch": "fn(resource: Fusiontables.V1.Schema.Template, tableId: string, templateId: number) -> +Fusiontables.V1.Schema.Template",
            "remove": "fn(tableId: string, templateId: number)",
            "update": "fn(resource: Fusiontables.V1.Schema.Template, tableId: string, templateId: number) -> +Fusiontables.V1.Schema.Template"
          }
        },
        "Fusiontables.V1.Schema.Bucket": {
          "prototype": {
            "color": "string",
            "icon": "string",
            "max": "number",
            "min": "number",
            "opacity": "number",
            "weight": "Integer"
          }
        },
        "Fusiontables.V1.Schema.Column": {
          "prototype": {
            "baseColumn": "+Fusiontables.V1.Schema.ColumnBaseColumn",
            "columnId": "Integer",
            "description": "string",
            "graph_predicate": "string",
            "kind": "string",
            "name": "string",
            "type": "string"
          }
        },
        "Fusiontables.V1.Schema.ColumnBaseColumn": {
          "prototype": {
            "columnId": "Integer",
            "tableIndex": "Integer"
          }
        },
        "Fusiontables.V1.Schema.ColumnList": {
          "prototype": {
            "items": "[+Fusiontables.V1.Schema.Column]",
            "kind": "string",
            "nextPageToken": "string",
            "totalItems": "Integer"
          }
        },
        "Fusiontables.V1.Schema.Geometry": {
          "prototype": {
            "geometries": "[object]",
            "geometry": "Object",
            "type": "string"
          }
        },
        "Fusiontables.V1.Schema.Import": {
          "prototype": {
            "kind": "string",
            "numRowsReceived": "string"
          }
        },
        "Fusiontables.V1.Schema.Line": {
          "prototype": {
            "coordinates": "[[number]]",
            "type": "string"
          }
        },
        "Fusiontables.V1.Schema.LineStyle": {
          "prototype": {
            "strokeColor": "string",
            "strokeColorStyler": "+Fusiontables.V1.Schema.StyleFunction",
            "strokeOpacity": "number",
            "strokeWeight": "Integer",
            "strokeWeightStyler": "+Fusiontables.V1.Schema.StyleFunction"
          }
        },
        "Fusiontables.V1.Schema.Point": {
          "prototype": {
            "coordinates": "[number]",
            "type": "string"
          }
        },
        "Fusiontables.V1.Schema.PointStyle": {
          "prototype": {
            "iconName": "string",
            "iconStyler": "+Fusiontables.V1.Schema.StyleFunction"
          }
        },
        "Fusiontables.V1.Schema.Polygon": {
          "prototype": {
            "coordinates": "[[[number]]]",
            "type": "string"
          }
        },
        "Fusiontables.V1.Schema.PolygonStyle": {
          "prototype": {
            "fillColor": "string",
            "fillColorStyler": "+Fusiontables.V1.Schema.StyleFunction",
            "fillOpacity": "number",
            "strokeColor": "string",
            "strokeColorStyler": "+Fusiontables.V1.Schema.StyleFunction",
            "strokeOpacity": "number",
            "strokeWeight": "Integer",
            "strokeWeightStyler": "+Fusiontables.V1.Schema.StyleFunction"
          }
        },
        "Fusiontables.V1.Schema.Sqlresponse": {
          "prototype": {
            "columns": "[string]",
            "kind": "string",
            "rows": "[[object]]"
          }
        },
        "Fusiontables.V1.Schema.StyleFunction": {
          "prototype": {
            "buckets": "[+Fusiontables.V1.Schema.Bucket]",
            "columnName": "string",
            "gradient": "+Fusiontables.V1.Schema.StyleFunctionGradient",
            "kind": "string"
          }
        },
        "Fusiontables.V1.Schema.StyleFunctionGradient": {
          "prototype": {
            "colors": "[+Fusiontables.V1.Schema.StyleFunctionGradientColors]",
            "max": "number",
            "min": "number"
          }
        },
        "Fusiontables.V1.Schema.StyleFunctionGradientColors": {
          "prototype": {
            "color": "string",
            "opacity": "number"
          }
        },
        "Fusiontables.V1.Schema.StyleSetting": {
          "prototype": {
            "kind": "string",
            "markerOptions": "+Fusiontables.V1.Schema.PointStyle",
            "name": "string",
            "polygonOptions": "+Fusiontables.V1.Schema.PolygonStyle",
            "polylineOptions": "+Fusiontables.V1.Schema.LineStyle",
            "styleId": "Integer",
            "tableId": "string"
          }
        },
        "Fusiontables.V1.Schema.StyleSettingList": {
          "prototype": {
            "items": "[+Fusiontables.V1.Schema.StyleSetting]",
            "kind": "string",
            "nextPageToken": "string",
            "totalItems": "Integer"
          }
        },
        "Fusiontables.V1.Schema.Table": {
          "prototype": {
            "attribution": "string",
            "attributionLink": "string",
            "baseTableIds": "[string]",
            "columns": "[+Fusiontables.V1.Schema.Column]",
            "description": "string",
            "isExportable": "bool",
            "kind": "string",
            "name": "string",
            "sql": "string",
            "tableId": "string"
          }
        },
        "Fusiontables.V1.Schema.TableList": {
          "prototype": {
            "items": "[+Fusiontables.V1.Schema.Table]",
            "kind": "string",
            "nextPageToken": "string"
          }
        },
        "Fusiontables.V1.Schema.Task": {
          "prototype": {
            "kind": "string",
            "progress": "string",
            "started": "bool",
            "taskId": "string",
            "type": "string"
          }
        },
        "Fusiontables.V1.Schema.TaskList": {
          "prototype": {
            "items": "[+Fusiontables.V1.Schema.Task]",
            "kind": "string",
            "nextPageToken": "string",
            "totalItems": "Integer"
          }
        },
        "Fusiontables.V1.Schema.Template": {
          "prototype": {
            "automaticColumnNames": "[string]",
            "body": "string",
            "kind": "string",
            "name": "string",
            "tableId": "string",
            "templateId": "Integer"
          }
        },
        "Fusiontables.V1.Schema.TemplateList": {
          "prototype": {
            "items": "[+Fusiontables.V1.Schema.Template]",
            "kind": "string",
            "nextPageToken": "string",
            "totalItems": "Integer"
          }
        }
      }
    },
    {
      "!name": "ShoppingContent",
      "ShoppingContent": {
        "newAccount": "fn() -> +Content.V2.Schema.Account",
        "newAccountAddress": "fn() -> +Content.V2.Schema.AccountAddress",
        "newAccountAdwordsLink": "fn() -> +Content.V2.Schema.AccountAdwordsLink",
        "newAccountBusinessInformation": "fn() -> +Content.V2.Schema.AccountBusinessInformation",
        "newAccountCustomerService": "fn() -> +Content.V2.Schema.AccountCustomerService",
        "newAccountGoogleMyBusinessLink": "fn() -> +Content.V2.Schema.AccountGoogleMyBusinessLink",
        "newAccountTax": "fn() -> +Content.V2.Schema.AccountTax",
        "newAccountTaxTaxRule": "fn() -> +Content.V2.Schema.AccountTaxTaxRule",
        "newAccountUser": "fn() -> +Content.V2.Schema.AccountUser",
        "newAccountYouTubeChannelLink": "fn() -> +Content.V2.Schema.AccountYouTubeChannelLink",
        "newAccountsCustomBatchRequest": "fn() -> +Content.V2.Schema.AccountsCustomBatchRequest",
        "newAccountsCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.AccountsCustomBatchRequestEntry",
        "newAccountsCustomBatchRequestEntryLinkRequest": "fn() -> +Content.V2.Schema.AccountsCustomBatchRequestEntryLinkRequest",
        "newAccountsLinkRequest": "fn() -> +Content.V2.Schema.AccountsLinkRequest",
        "newAccountstatusesCustomBatchRequest": "fn() -> +Content.V2.Schema.AccountstatusesCustomBatchRequest",
        "newAccountstatusesCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.AccountstatusesCustomBatchRequestEntry",
        "newAccounttaxCustomBatchRequest": "fn() -> +Content.V2.Schema.AccounttaxCustomBatchRequest",
        "newAccounttaxCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.AccounttaxCustomBatchRequestEntry",
        "newAmount": "fn() -> +Content.V2.Schema.Amount",
        "newBusinessDayConfig": "fn() -> +Content.V2.Schema.BusinessDayConfig",
        "newCarrierRate": "fn() -> +Content.V2.Schema.CarrierRate",
        "newCustomAttribute": "fn() -> +Content.V2.Schema.CustomAttribute",
        "newCustomGroup": "fn() -> +Content.V2.Schema.CustomGroup",
        "newCutoffTime": "fn() -> +Content.V2.Schema.CutoffTime",
        "newDatafeed": "fn() -> +Content.V2.Schema.Datafeed",
        "newDatafeedFetchSchedule": "fn() -> +Content.V2.Schema.DatafeedFetchSchedule",
        "newDatafeedFormat": "fn() -> +Content.V2.Schema.DatafeedFormat",
        "newDatafeedTarget": "fn() -> +Content.V2.Schema.DatafeedTarget",
        "newDatafeedsCustomBatchRequest": "fn() -> +Content.V2.Schema.DatafeedsCustomBatchRequest",
        "newDatafeedsCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.DatafeedsCustomBatchRequestEntry",
        "newDatafeedstatusesCustomBatchRequest": "fn() -> +Content.V2.Schema.DatafeedstatusesCustomBatchRequest",
        "newDatafeedstatusesCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.DatafeedstatusesCustomBatchRequestEntry",
        "newDeliveryTime": "fn() -> +Content.V2.Schema.DeliveryTime",
        "newError": "fn() -> +Content.V2.Schema.Error",
        "newHeaders": "fn() -> +Content.V2.Schema.Headers",
        "newHolidayCutoff": "fn() -> +Content.V2.Schema.HolidayCutoff",
        "newInstallment": "fn() -> +Content.V2.Schema.Installment",
        "newInventory": "fn() -> +Content.V2.Schema.Inventory",
        "newInventoryCustomBatchRequest": "fn() -> +Content.V2.Schema.InventoryCustomBatchRequest",
        "newInventoryCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.InventoryCustomBatchRequestEntry",
        "newInventoryPickup": "fn() -> +Content.V2.Schema.InventoryPickup",
        "newInventorySetRequest": "fn() -> +Content.V2.Schema.InventorySetRequest",
        "newInvoiceSummary": "fn() -> +Content.V2.Schema.InvoiceSummary",
        "newInvoiceSummaryAdditionalChargeSummary": "fn() -> +Content.V2.Schema.InvoiceSummaryAdditionalChargeSummary",
        "newLiaAboutPageSettings": "fn() -> +Content.V2.Schema.LiaAboutPageSettings",
        "newLiaCountrySettings": "fn() -> +Content.V2.Schema.LiaCountrySettings",
        "newLiaInventorySettings": "fn() -> +Content.V2.Schema.LiaInventorySettings",
        "newLiaOnDisplayToOrderSettings": "fn() -> +Content.V2.Schema.LiaOnDisplayToOrderSettings",
        "newLiaPosDataProvider": "fn() -> +Content.V2.Schema.LiaPosDataProvider",
        "newLiaSettings": "fn() -> +Content.V2.Schema.LiaSettings",
        "newLiasettingsCustomBatchRequest": "fn() -> +Content.V2.Schema.LiasettingsCustomBatchRequest",
        "newLiasettingsCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.LiasettingsCustomBatchRequestEntry",
        "newLocationIdSet": "fn() -> +Content.V2.Schema.LocationIdSet",
        "newLoyaltyPoints": "fn() -> +Content.V2.Schema.LoyaltyPoints",
        "newOrderLegacyPromotion": "fn() -> +Content.V2.Schema.OrderLegacyPromotion",
        "newOrderLegacyPromotionBenefit": "fn() -> +Content.V2.Schema.OrderLegacyPromotionBenefit",
        "newOrderLineItemProductFee": "fn() -> +Content.V2.Schema.OrderLineItemProductFee",
        "newOrderLineItemProductVariantAttribute": "fn() -> +Content.V2.Schema.OrderLineItemProductVariantAttribute",
        "newOrderLineItemReturnInfo": "fn() -> +Content.V2.Schema.OrderLineItemReturnInfo",
        "newOrderLineItemShippingDetails": "fn() -> +Content.V2.Schema.OrderLineItemShippingDetails",
        "newOrderLineItemShippingDetailsMethod": "fn() -> +Content.V2.Schema.OrderLineItemShippingDetailsMethod",
        "newOrderMerchantProvidedAnnotation": "fn() -> +Content.V2.Schema.OrderMerchantProvidedAnnotation",
        "newOrderShipmentLineItemShipment": "fn() -> +Content.V2.Schema.OrderShipmentLineItemShipment",
        "newOrderinvoicesCreateChargeInvoiceRequest": "fn() -> +Content.V2.Schema.OrderinvoicesCreateChargeInvoiceRequest",
        "newOrderinvoicesCreateRefundInvoiceRequest": "fn() -> +Content.V2.Schema.OrderinvoicesCreateRefundInvoiceRequest",
        "newOrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption": "fn() -> +Content.V2.Schema.OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption",
        "newOrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption": "fn() -> +Content.V2.Schema.OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption",
        "newOrderpaymentsNotifyAuthApprovedRequest": "fn() -> +Content.V2.Schema.OrderpaymentsNotifyAuthApprovedRequest",
        "newOrderpaymentsNotifyAuthDeclinedRequest": "fn() -> +Content.V2.Schema.OrderpaymentsNotifyAuthDeclinedRequest",
        "newOrderpaymentsNotifyChargeRequest": "fn() -> +Content.V2.Schema.OrderpaymentsNotifyChargeRequest",
        "newOrderpaymentsNotifyRefundRequest": "fn() -> +Content.V2.Schema.OrderpaymentsNotifyRefundRequest",
        "newOrdersAcknowledgeRequest": "fn() -> +Content.V2.Schema.OrdersAcknowledgeRequest",
        "newOrdersCancelLineItemRequest": "fn() -> +Content.V2.Schema.OrdersCancelLineItemRequest",
        "newOrdersCancelRequest": "fn() -> +Content.V2.Schema.OrdersCancelRequest",
        "newOrdersCancelTestOrderByCustomerRequest": "fn() -> +Content.V2.Schema.OrdersCancelTestOrderByCustomerRequest",
        "newOrdersCreateTestOrderRequest": "fn() -> +Content.V2.Schema.OrdersCreateTestOrderRequest",
        "newOrdersCreateTestReturnRequest": "fn() -> +Content.V2.Schema.OrdersCreateTestReturnRequest",
        "newOrdersCustomBatchRequest": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequest",
        "newOrdersCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntry",
        "newOrdersCustomBatchRequestEntryCancel": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryCancel",
        "newOrdersCustomBatchRequestEntryCancelLineItem": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryCancelLineItem",
        "newOrdersCustomBatchRequestEntryCreateTestReturnReturnItem": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryCreateTestReturnReturnItem",
        "newOrdersCustomBatchRequestEntryInStoreRefundLineItem": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryInStoreRefundLineItem",
        "newOrdersCustomBatchRequestEntryRefund": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryRefund",
        "newOrdersCustomBatchRequestEntryRejectReturnLineItem": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryRejectReturnLineItem",
        "newOrdersCustomBatchRequestEntryReturnLineItem": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryReturnLineItem",
        "newOrdersCustomBatchRequestEntryReturnRefundLineItem": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryReturnRefundLineItem",
        "newOrdersCustomBatchRequestEntrySetLineItemMetadata": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntrySetLineItemMetadata",
        "newOrdersCustomBatchRequestEntryShipLineItems": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryShipLineItems",
        "newOrdersCustomBatchRequestEntryShipLineItemsShipmentInfo": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo",
        "newOrdersCustomBatchRequestEntryUpdateLineItemShippingDetails": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails",
        "newOrdersCustomBatchRequestEntryUpdateShipment": "fn() -> +Content.V2.Schema.OrdersCustomBatchRequestEntryUpdateShipment",
        "newOrdersInStoreRefundLineItemRequest": "fn() -> +Content.V2.Schema.OrdersInStoreRefundLineItemRequest",
        "newOrdersRefundRequest": "fn() -> +Content.V2.Schema.OrdersRefundRequest",
        "newOrdersRejectReturnLineItemRequest": "fn() -> +Content.V2.Schema.OrdersRejectReturnLineItemRequest",
        "newOrdersReturnLineItemRequest": "fn() -> +Content.V2.Schema.OrdersReturnLineItemRequest",
        "newOrdersReturnRefundLineItemRequest": "fn() -> +Content.V2.Schema.OrdersReturnRefundLineItemRequest",
        "newOrdersSetLineItemMetadataRequest": "fn() -> +Content.V2.Schema.OrdersSetLineItemMetadataRequest",
        "newOrdersShipLineItemsRequest": "fn() -> +Content.V2.Schema.OrdersShipLineItemsRequest",
        "newOrdersUpdateLineItemShippingDetailsRequest": "fn() -> +Content.V2.Schema.OrdersUpdateLineItemShippingDetailsRequest",
        "newOrdersUpdateMerchantOrderIdRequest": "fn() -> +Content.V2.Schema.OrdersUpdateMerchantOrderIdRequest",
        "newOrdersUpdateShipmentRequest": "fn() -> +Content.V2.Schema.OrdersUpdateShipmentRequest",
        "newPosCustomBatchRequest": "fn() -> +Content.V2.Schema.PosCustomBatchRequest",
        "newPosCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.PosCustomBatchRequestEntry",
        "newPosInventory": "fn() -> +Content.V2.Schema.PosInventory",
        "newPosInventoryRequest": "fn() -> +Content.V2.Schema.PosInventoryRequest",
        "newPosSale": "fn() -> +Content.V2.Schema.PosSale",
        "newPosSaleRequest": "fn() -> +Content.V2.Schema.PosSaleRequest",
        "newPosStore": "fn() -> +Content.V2.Schema.PosStore",
        "newPostalCodeGroup": "fn() -> +Content.V2.Schema.PostalCodeGroup",
        "newPostalCodeRange": "fn() -> +Content.V2.Schema.PostalCodeRange",
        "newPrice": "fn() -> +Content.V2.Schema.Price",
        "newProduct": "fn() -> +Content.V2.Schema.Product",
        "newProductAspect": "fn() -> +Content.V2.Schema.ProductAspect",
        "newProductDestination": "fn() -> +Content.V2.Schema.ProductDestination",
        "newProductShipping": "fn() -> +Content.V2.Schema.ProductShipping",
        "newProductShippingDimension": "fn() -> +Content.V2.Schema.ProductShippingDimension",
        "newProductShippingWeight": "fn() -> +Content.V2.Schema.ProductShippingWeight",
        "newProductTax": "fn() -> +Content.V2.Schema.ProductTax",
        "newProductUnitPricingBaseMeasure": "fn() -> +Content.V2.Schema.ProductUnitPricingBaseMeasure",
        "newProductUnitPricingMeasure": "fn() -> +Content.V2.Schema.ProductUnitPricingMeasure",
        "newProductsCustomBatchRequest": "fn() -> +Content.V2.Schema.ProductsCustomBatchRequest",
        "newProductsCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.ProductsCustomBatchRequestEntry",
        "newProductstatusesCustomBatchRequest": "fn() -> +Content.V2.Schema.ProductstatusesCustomBatchRequest",
        "newProductstatusesCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.ProductstatusesCustomBatchRequestEntry",
        "newPromotion": "fn() -> +Content.V2.Schema.Promotion",
        "newRateGroup": "fn() -> +Content.V2.Schema.RateGroup",
        "newRow": "fn() -> +Content.V2.Schema.Row",
        "newService": "fn() -> +Content.V2.Schema.Service",
        "newShipmentInvoice": "fn() -> +Content.V2.Schema.ShipmentInvoice",
        "newShipmentInvoiceLineItemInvoice": "fn() -> +Content.V2.Schema.ShipmentInvoiceLineItemInvoice",
        "newShippingSettings": "fn() -> +Content.V2.Schema.ShippingSettings",
        "newShippingsettingsCustomBatchRequest": "fn() -> +Content.V2.Schema.ShippingsettingsCustomBatchRequest",
        "newShippingsettingsCustomBatchRequestEntry": "fn() -> +Content.V2.Schema.ShippingsettingsCustomBatchRequestEntry",
        "newTable": "fn() -> +Content.V2.Schema.Table",
        "newTestOrder": "fn() -> +Content.V2.Schema.TestOrder",
        "newTestOrderCustomer": "fn() -> +Content.V2.Schema.TestOrderCustomer",
        "newTestOrderCustomerMarketingRightsInfo": "fn() -> +Content.V2.Schema.TestOrderCustomerMarketingRightsInfo",
        "newTestOrderLineItem": "fn() -> +Content.V2.Schema.TestOrderLineItem",
        "newTestOrderLineItemProduct": "fn() -> +Content.V2.Schema.TestOrderLineItemProduct",
        "newTestOrderPaymentMethod": "fn() -> +Content.V2.Schema.TestOrderPaymentMethod",
        "newTransitTable": "fn() -> +Content.V2.Schema.TransitTable",
        "newTransitTableTransitTimeRow": "fn() -> +Content.V2.Schema.TransitTableTransitTimeRow",
        "newTransitTableTransitTimeRowTransitTimeValue": "fn() -> +Content.V2.Schema.TransitTableTransitTimeRowTransitTimeValue",
        "newUnitInvoice": "fn() -> +Content.V2.Schema.UnitInvoice",
        "newUnitInvoiceAdditionalCharge": "fn() -> +Content.V2.Schema.UnitInvoiceAdditionalCharge",
        "newUnitInvoiceTaxLine": "fn() -> +Content.V2.Schema.UnitInvoiceTaxLine",
        "newValue": "fn() -> +Content.V2.Schema.Value",
        "newWeight": "fn() -> +Content.V2.Schema.Weight",
        "Accounts": "+Content.V2.Collection.AccountsCollection",
        "Accountstatuses": "+Content.V2.Collection.AccountstatusesCollection",
        "Accounttax": "+Content.V2.Collection.AccounttaxCollection",
        "Datafeeds": "+Content.V2.Collection.DatafeedsCollection",
        "Datafeedstatuses": "+Content.V2.Collection.DatafeedstatusesCollection",
        "Inventory": "+Content.V2.Collection.InventoryCollection",
        "Liasettings": "+Content.V2.Collection.LiasettingsCollection",
        "Orderinvoices": "+Content.V2.Collection.OrderinvoicesCollection",
        "Orderpayments": "+Content.V2.Collection.OrderpaymentsCollection",
        "Orderreports": "+Content.V2.Collection.OrderreportsCollection",
        "Orderreturns": "+Content.V2.Collection.OrderreturnsCollection",
        "Orders": "+Content.V2.Collection.OrdersCollection",
        "Pos": "+Content.V2.Collection.PosCollection",
        "Products": "+Content.V2.Collection.ProductsCollection",
        "Productstatuses": "+Content.V2.Collection.ProductstatusesCollection",
        "Shippingsettings": "+Content.V2.Collection.ShippingsettingsCollection"
      },
      "!define": {
        "Content.V2.Collection.AccountsCollection": {
          "prototype": {
            "authinfo": "fn() -> +Content.V2.Schema.AccountsAuthInfoResponse",
            "claimwebsite": "fn(merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.AccountsClaimWebsiteResponse",
            "custombatch": "fn(resource: Content.V2.Schema.AccountsCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.AccountsCustomBatchResponse",
            "get": "fn(merchantId: string, accountId: string) -> +Content.V2.Schema.Account",
            "insert": "fn(resource: Content.V2.Schema.Account, merchantId: string, optionalArgs: object) -> +Content.V2.Schema.Account",
            "link": "fn(resource: Content.V2.Schema.AccountsLinkRequest, merchantId: string, accountId: string) -> +Content.V2.Schema.AccountsLinkResponse",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.AccountsListResponse",
            "patch": "fn(resource: Content.V2.Schema.Account, merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.Account",
            "remove": "fn(merchantId: string, accountId: string, optionalArgs: object)",
            "update": "fn(resource: Content.V2.Schema.Account, merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.Account"
          }
        },
        "Content.V2.Collection.AccountstatusesCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.AccountstatusesCustomBatchRequest) -> +Content.V2.Schema.AccountstatusesCustomBatchResponse",
            "get": "fn(merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.AccountStatus",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.AccountstatusesListResponse"
          }
        },
        "Content.V2.Collection.AccounttaxCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.AccounttaxCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.AccounttaxCustomBatchResponse",
            "get": "fn(merchantId: string, accountId: string) -> +Content.V2.Schema.AccountTax",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.AccounttaxListResponse",
            "patch": "fn(resource: Content.V2.Schema.AccountTax, merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.AccountTax",
            "update": "fn(resource: Content.V2.Schema.AccountTax, merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.AccountTax"
          }
        },
        "Content.V2.Collection.DatafeedsCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.DatafeedsCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.DatafeedsCustomBatchResponse",
            "fetchnow": "fn(merchantId: string, datafeedId: string, optionalArgs: object) -> +Content.V2.Schema.DatafeedsFetchNowResponse",
            "get": "fn(merchantId: string, datafeedId: string) -> +Content.V2.Schema.Datafeed",
            "insert": "fn(resource: Content.V2.Schema.Datafeed, merchantId: string, optionalArgs: object) -> +Content.V2.Schema.Datafeed",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.DatafeedsListResponse",
            "patch": "fn(resource: Content.V2.Schema.Datafeed, merchantId: string, datafeedId: string, optionalArgs: object) -> +Content.V2.Schema.Datafeed",
            "remove": "fn(merchantId: string, datafeedId: string, optionalArgs: object)",
            "update": "fn(resource: Content.V2.Schema.Datafeed, merchantId: string, datafeedId: string, optionalArgs: object) -> +Content.V2.Schema.Datafeed"
          }
        },
        "Content.V2.Collection.DatafeedstatusesCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.DatafeedstatusesCustomBatchRequest) -> +Content.V2.Schema.DatafeedstatusesCustomBatchResponse",
            "get": "fn(merchantId: string, datafeedId: string, optionalArgs: object) -> +Content.V2.Schema.DatafeedStatus",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.DatafeedstatusesListResponse"
          }
        },
        "Content.V2.Collection.InventoryCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.InventoryCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.InventoryCustomBatchResponse",
            "set": "fn(resource: Content.V2.Schema.InventorySetRequest, merchantId: string, storeCode: string, productId: string, optionalArgs: object) -> +Content.V2.Schema.InventorySetResponse"
          }
        },
        "Content.V2.Collection.LiasettingsCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.LiasettingsCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.LiasettingsCustomBatchResponse",
            "get": "fn(merchantId: string, accountId: string) -> +Content.V2.Schema.LiaSettings",
            "getaccessiblegmbaccounts": "fn(merchantId: string, accountId: string) -> +Content.V2.Schema.LiasettingsGetAccessibleGmbAccountsResponse",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.LiasettingsListResponse",
            "listposdataproviders": "fn() -> +Content.V2.Schema.LiasettingsListPosDataProvidersResponse",
            "patch": "fn(resource: Content.V2.Schema.LiaSettings, merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.LiaSettings",
            "requestgmbaccess": "fn(merchantId: string, accountId: string, gmbEmail: string) -> +Content.V2.Schema.LiasettingsRequestGmbAccessResponse",
            "requestinventoryverification": "fn(merchantId: string, accountId: string, country: string) -> +Content.V2.Schema.LiasettingsRequestInventoryVerificationResponse",
            "setinventoryverificationcontact": "fn(merchantId: string, accountId: string, contactEmail: string, contactName: string, country: string, language: string) -> +Content.V2.Schema.LiasettingsSetInventoryVerificationContactResponse",
            "setposdataprovider": "fn(merchantId: string, accountId: string, country: string, optionalArgs: object) -> +Content.V2.Schema.LiasettingsSetPosDataProviderResponse",
            "update": "fn(resource: Content.V2.Schema.LiaSettings, merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.LiaSettings"
          }
        },
        "Content.V2.Collection.OrderinvoicesCollection": {
          "prototype": {
            "createchargeinvoice": "fn(resource: Content.V2.Schema.OrderinvoicesCreateChargeInvoiceRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrderinvoicesCreateChargeInvoiceResponse",
            "createrefundinvoice": "fn(resource: Content.V2.Schema.OrderinvoicesCreateRefundInvoiceRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrderinvoicesCreateRefundInvoiceResponse"
          }
        },
        "Content.V2.Collection.OrderpaymentsCollection": {
          "prototype": {
            "notifyauthapproved": "fn(resource: Content.V2.Schema.OrderpaymentsNotifyAuthApprovedRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrderpaymentsNotifyAuthApprovedResponse",
            "notifyauthdeclined": "fn(resource: Content.V2.Schema.OrderpaymentsNotifyAuthDeclinedRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrderpaymentsNotifyAuthDeclinedResponse",
            "notifycharge": "fn(resource: Content.V2.Schema.OrderpaymentsNotifyChargeRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrderpaymentsNotifyChargeResponse",
            "notifyrefund": "fn(resource: Content.V2.Schema.OrderpaymentsNotifyRefundRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrderpaymentsNotifyRefundResponse"
          }
        },
        "Content.V2.Collection.OrderreportsCollection": {
          "prototype": {
            "listdisbursements": "fn(merchantId: string, disbursementStartDate: string, optionalArgs: object) -> +Content.V2.Schema.OrderreportsListDisbursementsResponse",
            "listtransactions": "fn(merchantId: string, disbursementId: string, transactionStartDate: string, optionalArgs: object) -> +Content.V2.Schema.OrderreportsListTransactionsResponse"
          }
        },
        "Content.V2.Collection.OrderreturnsCollection": {
          "prototype": {
            "get": "fn(merchantId: string, returnId: string) -> +Content.V2.Schema.MerchantOrderReturn",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.OrderreturnsListResponse"
          }
        },
        "Content.V2.Collection.OrdersCollection": {
          "prototype": {
            "acknowledge": "fn(resource: Content.V2.Schema.OrdersAcknowledgeRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersAcknowledgeResponse",
            "advancetestorder": "fn(merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersAdvanceTestOrderResponse",
            "cancel": "fn(resource: Content.V2.Schema.OrdersCancelRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersCancelResponse",
            "cancellineitem": "fn(resource: Content.V2.Schema.OrdersCancelLineItemRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersCancelLineItemResponse",
            "canceltestorderbycustomer": "fn(resource: Content.V2.Schema.OrdersCancelTestOrderByCustomerRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersCancelTestOrderByCustomerResponse",
            "createtestorder": "fn(resource: Content.V2.Schema.OrdersCreateTestOrderRequest, merchantId: string) -> +Content.V2.Schema.OrdersCreateTestOrderResponse",
            "createtestreturn": "fn(resource: Content.V2.Schema.OrdersCreateTestReturnRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersCreateTestReturnResponse",
            "custombatch": "fn(resource: Content.V2.Schema.OrdersCustomBatchRequest) -> +Content.V2.Schema.OrdersCustomBatchResponse",
            "get": "fn(merchantId: string, orderId: string) -> +Content.V2.Schema.Order",
            "getbymerchantorderid": "fn(merchantId: string, merchantOrderId: string) -> +Content.V2.Schema.OrdersGetByMerchantOrderIdResponse",
            "gettestordertemplate": "fn(merchantId: string, templateName: string, optionalArgs: object) -> +Content.V2.Schema.OrdersGetTestOrderTemplateResponse",
            "instorerefundlineitem": "fn(resource: Content.V2.Schema.OrdersInStoreRefundLineItemRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersInStoreRefundLineItemResponse",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.OrdersListResponse",
            "refund": "fn(resource: Content.V2.Schema.OrdersRefundRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersRefundResponse",
            "rejectreturnlineitem": "fn(resource: Content.V2.Schema.OrdersRejectReturnLineItemRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersRejectReturnLineItemResponse",
            "returnlineitem": "fn(resource: Content.V2.Schema.OrdersReturnLineItemRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersReturnLineItemResponse",
            "returnrefundlineitem": "fn(resource: Content.V2.Schema.OrdersReturnRefundLineItemRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersReturnRefundLineItemResponse",
            "setlineitemmetadata": "fn(resource: Content.V2.Schema.OrdersSetLineItemMetadataRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersSetLineItemMetadataResponse",
            "shiplineitems": "fn(resource: Content.V2.Schema.OrdersShipLineItemsRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersShipLineItemsResponse",
            "updatelineitemshippingdetails": "fn(resource: Content.V2.Schema.OrdersUpdateLineItemShippingDetailsRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersUpdateLineItemShippingDetailsResponse",
            "updatemerchantorderid": "fn(resource: Content.V2.Schema.OrdersUpdateMerchantOrderIdRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersUpdateMerchantOrderIdResponse",
            "updateshipment": "fn(resource: Content.V2.Schema.OrdersUpdateShipmentRequest, merchantId: string, orderId: string) -> +Content.V2.Schema.OrdersUpdateShipmentResponse"
          }
        },
        "Content.V2.Collection.PosCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.PosCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.PosCustomBatchResponse",
            "get": "fn(merchantId: string, targetMerchantId: string, storeCode: string) -> +Content.V2.Schema.PosStore",
            "insert": "fn(resource: Content.V2.Schema.PosStore, merchantId: string, targetMerchantId: string, optionalArgs: object) -> +Content.V2.Schema.PosStore",
            "inventory": "fn(resource: Content.V2.Schema.PosInventoryRequest, merchantId: string, targetMerchantId: string, optionalArgs: object) -> +Content.V2.Schema.PosInventoryResponse",
            "list": "fn(merchantId: string, targetMerchantId: string) -> +Content.V2.Schema.PosListResponse",
            "remove": "fn(merchantId: string, targetMerchantId: string, storeCode: string, optionalArgs: object)",
            "sale": "fn(resource: Content.V2.Schema.PosSaleRequest, merchantId: string, targetMerchantId: string, optionalArgs: object) -> +Content.V2.Schema.PosSaleResponse"
          }
        },
        "Content.V2.Collection.ProductsCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.ProductsCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.ProductsCustomBatchResponse",
            "get": "fn(merchantId: string, productId: string) -> +Content.V2.Schema.Product",
            "insert": "fn(resource: Content.V2.Schema.Product, merchantId: string, optionalArgs: object) -> +Content.V2.Schema.Product",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.ProductsListResponse",
            "remove": "fn(merchantId: string, productId: string, optionalArgs: object)"
          }
        },
        "Content.V2.Collection.ProductstatusesCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.ProductstatusesCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.ProductstatusesCustomBatchResponse",
            "get": "fn(merchantId: string, productId: string, optionalArgs: object) -> +Content.V2.Schema.ProductStatus",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.ProductstatusesListResponse"
          }
        },
        "Content.V2.Collection.ShippingsettingsCollection": {
          "prototype": {
            "custombatch": "fn(resource: Content.V2.Schema.ShippingsettingsCustomBatchRequest, optionalArgs: object) -> +Content.V2.Schema.ShippingsettingsCustomBatchResponse",
            "get": "fn(merchantId: string, accountId: string) -> +Content.V2.Schema.ShippingSettings",
            "getsupportedcarriers": "fn(merchantId: string) -> +Content.V2.Schema.ShippingsettingsGetSupportedCarriersResponse",
            "getsupportedholidays": "fn(merchantId: string) -> +Content.V2.Schema.ShippingsettingsGetSupportedHolidaysResponse",
            "list": "fn(merchantId: string, optionalArgs: object) -> +Content.V2.Schema.ShippingsettingsListResponse",
            "patch": "fn(resource: Content.V2.Schema.ShippingSettings, merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.ShippingSettings",
            "update": "fn(resource: Content.V2.Schema.ShippingSettings, merchantId: string, accountId: string, optionalArgs: object) -> +Content.V2.Schema.ShippingSettings"
          }
        },
        "Content.V2.Schema.Account": {
          "prototype": {
            "adultContent": "bool",
            "adwordsLinks": "[+Content.V2.Schema.AccountAdwordsLink]",
            "businessInformation": "+Content.V2.Schema.AccountBusinessInformation",
            "googleMyBusinessLink": "+Content.V2.Schema.AccountGoogleMyBusinessLink",
            "id": "string",
            "kind": "string",
            "name": "string",
            "reviewsUrl": "string",
            "sellerId": "string",
            "users": "[+Content.V2.Schema.AccountUser]",
            "websiteUrl": "string",
            "youtubeChannelLinks": "[+Content.V2.Schema.AccountYouTubeChannelLink]"
          }
        },
        "Content.V2.Schema.AccountAddress": {
          "prototype": {
            "country": "string",
            "locality": "string",
            "postalCode": "string",
            "region": "string",
            "streetAddress": "string"
          }
        },
        "Content.V2.Schema.AccountAdwordsLink": {
          "prototype": {
            "adwordsId": "string",
            "status": "string"
          }
        },
        "Content.V2.Schema.AccountBusinessInformation": {
          "prototype": {
            "address": "+Content.V2.Schema.AccountAddress",
            "customerService": "+Content.V2.Schema.AccountCustomerService",
            "phoneNumber": "string"
          }
        },
        "Content.V2.Schema.AccountCustomerService": {
          "prototype": {
            "email": "string",
            "phoneNumber": "string",
            "url": "string"
          }
        },
        "Content.V2.Schema.AccountGoogleMyBusinessLink": {
          "prototype": {
            "gmbEmail": "string",
            "status": "string"
          }
        },
        "Content.V2.Schema.AccountIdentifier": {
          "prototype": {
            "aggregatorId": "string",
            "merchantId": "string"
          }
        },
        "Content.V2.Schema.AccountStatus": {
          "prototype": {
            "accountId": "string",
            "accountLevelIssues": "[+Content.V2.Schema.AccountStatusAccountLevelIssue]",
            "dataQualityIssues": "[+Content.V2.Schema.AccountStatusDataQualityIssue]",
            "kind": "string",
            "products": "[+Content.V2.Schema.AccountStatusProducts]",
            "websiteClaimed": "bool"
          }
        },
        "Content.V2.Schema.AccountStatusAccountLevelIssue": {
          "prototype": {
            "country": "string",
            "destination": "string",
            "detail": "string",
            "documentation": "string",
            "id": "string",
            "severity": "string",
            "title": "string"
          }
        },
        "Content.V2.Schema.AccountStatusDataQualityIssue": {
          "prototype": {
            "country": "string",
            "destination": "string",
            "detail": "string",
            "displayedValue": "string",
            "exampleItems": "[+Content.V2.Schema.AccountStatusExampleItem]",
            "id": "string",
            "lastChecked": "string",
            "location": "string",
            "numItems": "Integer",
            "severity": "string",
            "submittedValue": "string"
          }
        },
        "Content.V2.Schema.AccountStatusExampleItem": {
          "prototype": {
            "itemId": "string",
            "link": "string",
            "submittedValue": "string",
            "title": "string",
            "valueOnLandingPage": "string"
          }
        },
        "Content.V2.Schema.AccountStatusItemLevelIssue": {
          "prototype": {
            "attributeName": "string",
            "code": "string",
            "description": "string",
            "detail": "string",
            "documentation": "string",
            "numItems": "string",
            "resolution": "string",
            "servability": "string"
          }
        },
        "Content.V2.Schema.AccountStatusProducts": {
          "prototype": {
            "channel": "string",
            "country": "string",
            "destination": "string",
            "itemLevelIssues": "[+Content.V2.Schema.AccountStatusItemLevelIssue]",
            "statistics": "+Content.V2.Schema.AccountStatusStatistics"
          }
        },
        "Content.V2.Schema.AccountStatusStatistics": {
          "prototype": {
            "active": "string",
            "disapproved": "string",
            "expiring": "string",
            "pending": "string"
          }
        },
        "Content.V2.Schema.AccountTax": {
          "prototype": {
            "accountId": "string",
            "kind": "string",
            "rules": "[+Content.V2.Schema.AccountTaxTaxRule]"
          }
        },
        "Content.V2.Schema.AccountTaxTaxRule": {
          "prototype": {
            "country": "string",
            "locationId": "string",
            "ratePercent": "string",
            "shippingTaxed": "bool",
            "useGlobalRate": "bool"
          }
        },
        "Content.V2.Schema.AccountUser": {
          "prototype": {
            "admin": "bool",
            "emailAddress": "string",
            "orderManager": "bool",
            "paymentsAnalyst": "bool",
            "paymentsManager": "bool"
          }
        },
        "Content.V2.Schema.AccountYouTubeChannelLink": {
          "prototype": {
            "channelId": "string",
            "status": "string"
          }
        },
        "Content.V2.Schema.AccountsAuthInfoResponse": {
          "prototype": {
            "accountIdentifiers": "[+Content.V2.Schema.AccountIdentifier]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.AccountsClaimWebsiteResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.AccountsCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.AccountsCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.AccountsCustomBatchRequestEntry": {
          "prototype": {
            "account": "+Content.V2.Schema.Account",
            "accountId": "string",
            "batchId": "Integer",
            "force": "bool",
            "linkRequest": "+Content.V2.Schema.AccountsCustomBatchRequestEntryLinkRequest",
            "merchantId": "string",
            "method": "string",
            "overwrite": "bool"
          }
        },
        "Content.V2.Schema.AccountsCustomBatchRequestEntryLinkRequest": {
          "prototype": {
            "action": "string",
            "linkType": "string",
            "linkedAccountId": "string"
          }
        },
        "Content.V2.Schema.AccountsCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.AccountsCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.AccountsCustomBatchResponseEntry": {
          "prototype": {
            "account": "+Content.V2.Schema.Account",
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "kind": "string",
            "linkStatus": "string"
          }
        },
        "Content.V2.Schema.AccountsLinkRequest": {
          "prototype": {
            "action": "string",
            "linkType": "string",
            "linkedAccountId": "string"
          }
        },
        "Content.V2.Schema.AccountsLinkResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.AccountsListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.Account]"
          }
        },
        "Content.V2.Schema.AccountstatusesCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.AccountstatusesCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.AccountstatusesCustomBatchRequestEntry": {
          "prototype": {
            "accountId": "string",
            "batchId": "Integer",
            "destinations": "[string]",
            "merchantId": "string",
            "method": "string"
          }
        },
        "Content.V2.Schema.AccountstatusesCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.AccountstatusesCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.AccountstatusesCustomBatchResponseEntry": {
          "prototype": {
            "accountStatus": "+Content.V2.Schema.AccountStatus",
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors"
          }
        },
        "Content.V2.Schema.AccountstatusesListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.AccountStatus]"
          }
        },
        "Content.V2.Schema.AccounttaxCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.AccounttaxCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.AccounttaxCustomBatchRequestEntry": {
          "prototype": {
            "accountId": "string",
            "accountTax": "+Content.V2.Schema.AccountTax",
            "batchId": "Integer",
            "merchantId": "string",
            "method": "string"
          }
        },
        "Content.V2.Schema.AccounttaxCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.AccounttaxCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.AccounttaxCustomBatchResponseEntry": {
          "prototype": {
            "accountTax": "+Content.V2.Schema.AccountTax",
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "kind": "string"
          }
        },
        "Content.V2.Schema.AccounttaxListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.AccountTax]"
          }
        },
        "Content.V2.Schema.Amount": {
          "prototype": {
            "pretax": "+Content.V2.Schema.Price",
            "tax": "+Content.V2.Schema.Price"
          }
        },
        "Content.V2.Schema.BusinessDayConfig": {
          "prototype": {
            "businessDays": "[string]"
          }
        },
        "Content.V2.Schema.CarrierRate": {
          "prototype": {
            "carrierName": "string",
            "carrierService": "string",
            "flatAdjustment": "+Content.V2.Schema.Price",
            "name": "string",
            "originPostalCode": "string",
            "percentageAdjustment": "string"
          }
        },
        "Content.V2.Schema.CarriersCarrier": {
          "prototype": {
            "country": "string",
            "name": "string",
            "services": "[string]"
          }
        },
        "Content.V2.Schema.CustomAttribute": {
          "prototype": {
            "name": "string",
            "type": "string",
            "unit": "string",
            "value": "string"
          }
        },
        "Content.V2.Schema.CustomGroup": {
          "prototype": {
            "attributes": "[+Content.V2.Schema.CustomAttribute]",
            "name": "string"
          }
        },
        "Content.V2.Schema.CustomerReturnReason": {
          "prototype": {
            "description": "string",
            "reasonCode": "string"
          }
        },
        "Content.V2.Schema.CutoffTime": {
          "prototype": {
            "hour": "Integer",
            "minute": "Integer",
            "timezone": "string"
          }
        },
        "Content.V2.Schema.Datafeed": {
          "prototype": {
            "attributeLanguage": "string",
            "contentLanguage": "string",
            "contentType": "string",
            "fetchSchedule": "+Content.V2.Schema.DatafeedFetchSchedule",
            "fileName": "string",
            "format": "+Content.V2.Schema.DatafeedFormat",
            "id": "string",
            "intendedDestinations": "[string]",
            "kind": "string",
            "name": "string",
            "targetCountry": "string",
            "targets": "[+Content.V2.Schema.DatafeedTarget]"
          }
        },
        "Content.V2.Schema.DatafeedFetchSchedule": {
          "prototype": {
            "dayOfMonth": "Integer",
            "fetchUrl": "string",
            "hour": "Integer",
            "minuteOfHour": "Integer",
            "password": "string",
            "paused": "bool",
            "timeZone": "string",
            "username": "string",
            "weekday": "string"
          }
        },
        "Content.V2.Schema.DatafeedFormat": {
          "prototype": {
            "columnDelimiter": "string",
            "fileEncoding": "string",
            "quotingMode": "string"
          }
        },
        "Content.V2.Schema.DatafeedStatus": {
          "prototype": {
            "country": "string",
            "datafeedId": "string",
            "errors": "[+Content.V2.Schema.DatafeedStatusError]",
            "itemsTotal": "string",
            "itemsValid": "string",
            "kind": "string",
            "language": "string",
            "lastUploadDate": "string",
            "processingStatus": "string",
            "warnings": "[+Content.V2.Schema.DatafeedStatusError]"
          }
        },
        "Content.V2.Schema.DatafeedStatusError": {
          "prototype": {
            "code": "string",
            "count": "string",
            "examples": "[+Content.V2.Schema.DatafeedStatusExample]",
            "message": "string"
          }
        },
        "Content.V2.Schema.DatafeedStatusExample": {
          "prototype": {
            "itemId": "string",
            "lineNumber": "string",
            "value": "string"
          }
        },
        "Content.V2.Schema.DatafeedTarget": {
          "prototype": {
            "country": "string",
            "excludedDestinations": "[string]",
            "includedDestinations": "[string]",
            "language": "string"
          }
        },
        "Content.V2.Schema.DatafeedsCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.DatafeedsCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.DatafeedsCustomBatchRequestEntry": {
          "prototype": {
            "batchId": "Integer",
            "datafeed": "+Content.V2.Schema.Datafeed",
            "datafeedId": "string",
            "merchantId": "string",
            "method": "string"
          }
        },
        "Content.V2.Schema.DatafeedsCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.DatafeedsCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.DatafeedsCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "datafeed": "+Content.V2.Schema.Datafeed",
            "errors": "+Content.V2.Schema.Errors"
          }
        },
        "Content.V2.Schema.DatafeedsFetchNowResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.DatafeedsListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.Datafeed]"
          }
        },
        "Content.V2.Schema.DatafeedstatusesCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.DatafeedstatusesCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.DatafeedstatusesCustomBatchRequestEntry": {
          "prototype": {
            "batchId": "Integer",
            "country": "string",
            "datafeedId": "string",
            "language": "string",
            "merchantId": "string",
            "method": "string"
          }
        },
        "Content.V2.Schema.DatafeedstatusesCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.DatafeedstatusesCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.DatafeedstatusesCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "datafeedStatus": "+Content.V2.Schema.DatafeedStatus",
            "errors": "+Content.V2.Schema.Errors"
          }
        },
        "Content.V2.Schema.DatafeedstatusesListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.DatafeedStatus]"
          }
        },
        "Content.V2.Schema.DeliveryTime": {
          "prototype": {
            "cutoffTime": "+Content.V2.Schema.CutoffTime",
            "handlingBusinessDayConfig": "+Content.V2.Schema.BusinessDayConfig",
            "holidayCutoffs": "[+Content.V2.Schema.HolidayCutoff]",
            "maxHandlingTimeInDays": "Integer",
            "maxTransitTimeInDays": "Integer",
            "minHandlingTimeInDays": "Integer",
            "minTransitTimeInDays": "Integer",
            "transitBusinessDayConfig": "+Content.V2.Schema.BusinessDayConfig",
            "transitTimeTable": "+Content.V2.Schema.TransitTable"
          }
        },
        "Content.V2.Schema.Error": {
          "prototype": {
            "domain": "string",
            "message": "string",
            "reason": "string"
          }
        },
        "Content.V2.Schema.Errors": {
          "prototype": {
            "code": "Integer",
            "errors": "[+Content.V2.Schema.Error]",
            "message": "string"
          }
        },
        "Content.V2.Schema.GmbAccounts": {
          "prototype": {
            "accountId": "string",
            "gmbAccounts": "[+Content.V2.Schema.GmbAccountsGmbAccount]"
          }
        },
        "Content.V2.Schema.GmbAccountsGmbAccount": {
          "prototype": {
            "email": "string",
            "listingCount": "string",
            "name": "string",
            "type": "string"
          }
        },
        "Content.V2.Schema.Headers": {
          "prototype": {
            "locations": "[+Content.V2.Schema.LocationIdSet]",
            "numberOfItems": "[string]",
            "postalCodeGroupNames": "[string]",
            "prices": "[+Content.V2.Schema.Price]",
            "weights": "[+Content.V2.Schema.Weight]"
          }
        },
        "Content.V2.Schema.HolidayCutoff": {
          "prototype": {
            "deadlineDate": "string",
            "deadlineHour": "Integer",
            "deadlineTimezone": "string",
            "holidayId": "string",
            "visibleFromDate": "string"
          }
        },
        "Content.V2.Schema.HolidaysHoliday": {
          "prototype": {
            "countryCode": "string",
            "date": "string",
            "deliveryGuaranteeDate": "string",
            "deliveryGuaranteeHour": "string",
            "id": "string",
            "type": "string"
          }
        },
        "Content.V2.Schema.Installment": {
          "prototype": {
            "amount": "+Content.V2.Schema.Price",
            "months": "string"
          }
        },
        "Content.V2.Schema.Inventory": {
          "prototype": {
            "availability": "string",
            "customLabel0": "string",
            "customLabel1": "string",
            "customLabel2": "string",
            "customLabel3": "string",
            "customLabel4": "string",
            "installment": "+Content.V2.Schema.Installment",
            "instoreProductLocation": "string",
            "kind": "string",
            "loyaltyPoints": "+Content.V2.Schema.LoyaltyPoints",
            "pickup": "+Content.V2.Schema.InventoryPickup",
            "price": "+Content.V2.Schema.Price",
            "quantity": "Integer",
            "salePrice": "+Content.V2.Schema.Price",
            "salePriceEffectiveDate": "string",
            "sellOnGoogleQuantity": "Integer"
          }
        },
        "Content.V2.Schema.InventoryCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.InventoryCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.InventoryCustomBatchRequestEntry": {
          "prototype": {
            "batchId": "Integer",
            "inventory": "+Content.V2.Schema.Inventory",
            "merchantId": "string",
            "productId": "string",
            "storeCode": "string"
          }
        },
        "Content.V2.Schema.InventoryCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.InventoryCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.InventoryCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "kind": "string"
          }
        },
        "Content.V2.Schema.InventoryPickup": {
          "prototype": {
            "pickupMethod": "string",
            "pickupSla": "string"
          }
        },
        "Content.V2.Schema.InventorySetRequest": {
          "prototype": {
            "availability": "string",
            "customLabel0": "string",
            "customLabel1": "string",
            "customLabel2": "string",
            "customLabel3": "string",
            "customLabel4": "string",
            "installment": "+Content.V2.Schema.Installment",
            "instoreProductLocation": "string",
            "loyaltyPoints": "+Content.V2.Schema.LoyaltyPoints",
            "pickup": "+Content.V2.Schema.InventoryPickup",
            "price": "+Content.V2.Schema.Price",
            "quantity": "Integer",
            "salePrice": "+Content.V2.Schema.Price",
            "salePriceEffectiveDate": "string",
            "sellOnGoogleQuantity": "Integer"
          }
        },
        "Content.V2.Schema.InventorySetResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.InvoiceSummary": {
          "prototype": {
            "additionalChargeSummaries": "[+Content.V2.Schema.InvoiceSummaryAdditionalChargeSummary]",
            "customerBalance": "+Content.V2.Schema.Amount",
            "googleBalance": "+Content.V2.Schema.Amount",
            "merchantBalance": "+Content.V2.Schema.Amount",
            "productTotal": "+Content.V2.Schema.Amount",
            "promotionSummaries": "[+Content.V2.Schema.Promotion]"
          }
        },
        "Content.V2.Schema.InvoiceSummaryAdditionalChargeSummary": {
          "prototype": {
            "totalAmount": "+Content.V2.Schema.Amount",
            "type": "string"
          }
        },
        "Content.V2.Schema.LiaAboutPageSettings": {
          "prototype": {
            "status": "string",
            "url": "string"
          }
        },
        "Content.V2.Schema.LiaCountrySettings": {
          "prototype": {
            "about": "+Content.V2.Schema.LiaAboutPageSettings",
            "country": "string",
            "hostedLocalStorefrontActive": "bool",
            "inventory": "+Content.V2.Schema.LiaInventorySettings",
            "onDisplayToOrder": "+Content.V2.Schema.LiaOnDisplayToOrderSettings",
            "posDataProvider": "+Content.V2.Schema.LiaPosDataProvider",
            "storePickupActive": "bool"
          }
        },
        "Content.V2.Schema.LiaInventorySettings": {
          "prototype": {
            "inventoryVerificationContactEmail": "string",
            "inventoryVerificationContactName": "string",
            "inventoryVerificationContactStatus": "string",
            "status": "string"
          }
        },
        "Content.V2.Schema.LiaOnDisplayToOrderSettings": {
          "prototype": {
            "shippingCostPolicyUrl": "string",
            "status": "string"
          }
        },
        "Content.V2.Schema.LiaPosDataProvider": {
          "prototype": {
            "posDataProviderId": "string",
            "posExternalAccountId": "string"
          }
        },
        "Content.V2.Schema.LiaSettings": {
          "prototype": {
            "accountId": "string",
            "countrySettings": "[+Content.V2.Schema.LiaCountrySettings]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.LiasettingsCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.LiasettingsCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.LiasettingsCustomBatchRequestEntry": {
          "prototype": {
            "accountId": "string",
            "batchId": "Integer",
            "contactEmail": "string",
            "contactName": "string",
            "country": "string",
            "gmbEmail": "string",
            "liaSettings": "+Content.V2.Schema.LiaSettings",
            "merchantId": "string",
            "method": "string",
            "posDataProviderId": "string",
            "posExternalAccountId": "string"
          }
        },
        "Content.V2.Schema.LiasettingsCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.LiasettingsCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.LiasettingsCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "gmbAccounts": "+Content.V2.Schema.GmbAccounts",
            "kind": "string",
            "liaSettings": "+Content.V2.Schema.LiaSettings",
            "posDataProviders": "[+Content.V2.Schema.PosDataProviders]"
          }
        },
        "Content.V2.Schema.LiasettingsGetAccessibleGmbAccountsResponse": {
          "prototype": {
            "accountId": "string",
            "gmbAccounts": "[+Content.V2.Schema.GmbAccountsGmbAccount]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.LiasettingsListPosDataProvidersResponse": {
          "prototype": {
            "kind": "string",
            "posDataProviders": "[+Content.V2.Schema.PosDataProviders]"
          }
        },
        "Content.V2.Schema.LiasettingsListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.LiaSettings]"
          }
        },
        "Content.V2.Schema.LiasettingsRequestGmbAccessResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.LiasettingsRequestInventoryVerificationResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.LiasettingsSetInventoryVerificationContactResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.LiasettingsSetPosDataProviderResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.LocationIdSet": {
          "prototype": {
            "locationIds": "[string]"
          }
        },
        "Content.V2.Schema.LoyaltyPoints": {
          "prototype": {
            "name": "string",
            "pointsValue": "string",
            "ratio": "number"
          }
        },
        "Content.V2.Schema.MerchantOrderReturn": {
          "prototype": {
            "creationDate": "string",
            "merchantOrderId": "string",
            "orderId": "string",
            "orderReturnId": "string",
            "returnItems": "[+Content.V2.Schema.MerchantOrderReturnItem]",
            "returnShipments": "[+Content.V2.Schema.ReturnShipment]"
          }
        },
        "Content.V2.Schema.MerchantOrderReturnItem": {
          "prototype": {
            "customerReturnReason": "+Content.V2.Schema.CustomerReturnReason",
            "itemId": "string",
            "merchantReturnReason": "+Content.V2.Schema.RefundReason",
            "product": "+Content.V2.Schema.OrderLineItemProduct",
            "returnShipmentIds": "[string]",
            "state": "string"
          }
        },
        "Content.V2.Schema.Order": {
          "prototype": {
            "acknowledged": "bool",
            "channelType": "string",
            "customer": "+Content.V2.Schema.OrderCustomer",
            "deliveryDetails": "+Content.V2.Schema.OrderDeliveryDetails",
            "id": "string",
            "kind": "string",
            "lineItems": "[+Content.V2.Schema.OrderLineItem]",
            "merchantId": "string",
            "merchantOrderId": "string",
            "netAmount": "+Content.V2.Schema.Price",
            "paymentMethod": "+Content.V2.Schema.OrderPaymentMethod",
            "paymentStatus": "string",
            "placedDate": "string",
            "promotions": "[+Content.V2.Schema.OrderLegacyPromotion]",
            "refunds": "[+Content.V2.Schema.OrderRefund]",
            "shipments": "[+Content.V2.Schema.OrderShipment]",
            "shippingCost": "+Content.V2.Schema.Price",
            "shippingCostTax": "+Content.V2.Schema.Price",
            "shippingOption": "string",
            "status": "string",
            "taxCollector": "string"
          }
        },
        "Content.V2.Schema.OrderAddress": {
          "prototype": {
            "country": "string",
            "fullAddress": "[string]",
            "isPostOfficeBox": "bool",
            "locality": "string",
            "postalCode": "string",
            "recipientName": "string",
            "region": "string",
            "streetAddress": "[string]"
          }
        },
        "Content.V2.Schema.OrderCancellation": {
          "prototype": {
            "actor": "string",
            "creationDate": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrderCustomer": {
          "prototype": {
            "email": "string",
            "explicitMarketingPreference": "bool",
            "fullName": "string",
            "marketingRightsInfo": "+Content.V2.Schema.OrderCustomerMarketingRightsInfo"
          }
        },
        "Content.V2.Schema.OrderCustomerMarketingRightsInfo": {
          "prototype": {
            "explicitMarketingPreference": "string",
            "lastUpdatedTimestamp": "string",
            "marketingEmailAddress": "string"
          }
        },
        "Content.V2.Schema.OrderDeliveryDetails": {
          "prototype": {
            "address": "+Content.V2.Schema.OrderAddress",
            "phoneNumber": "string"
          }
        },
        "Content.V2.Schema.OrderLegacyPromotion": {
          "prototype": {
            "benefits": "[+Content.V2.Schema.OrderLegacyPromotionBenefit]",
            "effectiveDates": "string",
            "genericRedemptionCode": "string",
            "id": "string",
            "longTitle": "string",
            "productApplicability": "string",
            "redemptionChannel": "string"
          }
        },
        "Content.V2.Schema.OrderLegacyPromotionBenefit": {
          "prototype": {
            "discount": "+Content.V2.Schema.Price",
            "offerIds": "[string]",
            "subType": "string",
            "taxImpact": "+Content.V2.Schema.Price",
            "type": "string"
          }
        },
        "Content.V2.Schema.OrderLineItem": {
          "prototype": {
            "annotations": "[+Content.V2.Schema.OrderMerchantProvidedAnnotation]",
            "cancellations": "[+Content.V2.Schema.OrderCancellation]",
            "id": "string",
            "price": "+Content.V2.Schema.Price",
            "product": "+Content.V2.Schema.OrderLineItemProduct",
            "quantityCanceled": "Integer",
            "quantityDelivered": "Integer",
            "quantityOrdered": "Integer",
            "quantityPending": "Integer",
            "quantityReturned": "Integer",
            "quantityShipped": "Integer",
            "returnInfo": "+Content.V2.Schema.OrderLineItemReturnInfo",
            "returns": "[+Content.V2.Schema.OrderReturn]",
            "shippingDetails": "+Content.V2.Schema.OrderLineItemShippingDetails",
            "tax": "+Content.V2.Schema.Price"
          }
        },
        "Content.V2.Schema.OrderLineItemProduct": {
          "prototype": {
            "brand": "string",
            "channel": "string",
            "condition": "string",
            "contentLanguage": "string",
            "fees": "[+Content.V2.Schema.OrderLineItemProductFee]",
            "gtin": "string",
            "id": "string",
            "imageLink": "string",
            "itemGroupId": "string",
            "mpn": "string",
            "offerId": "string",
            "price": "+Content.V2.Schema.Price",
            "shownImage": "string",
            "targetCountry": "string",
            "title": "string",
            "variantAttributes": "[+Content.V2.Schema.OrderLineItemProductVariantAttribute]"
          }
        },
        "Content.V2.Schema.OrderLineItemProductFee": {
          "prototype": {
            "amount": "+Content.V2.Schema.Price",
            "name": "string"
          }
        },
        "Content.V2.Schema.OrderLineItemProductVariantAttribute": {
          "prototype": {
            "dimension": "string",
            "value": "string"
          }
        },
        "Content.V2.Schema.OrderLineItemReturnInfo": {
          "prototype": {
            "daysToReturn": "Integer",
            "isReturnable": "bool",
            "policyUrl": "string"
          }
        },
        "Content.V2.Schema.OrderLineItemShippingDetails": {
          "prototype": {
            "deliverByDate": "string",
            "method": "+Content.V2.Schema.OrderLineItemShippingDetailsMethod",
            "shipByDate": "string"
          }
        },
        "Content.V2.Schema.OrderLineItemShippingDetailsMethod": {
          "prototype": {
            "carrier": "string",
            "maxDaysInTransit": "Integer",
            "methodName": "string",
            "minDaysInTransit": "Integer"
          }
        },
        "Content.V2.Schema.OrderMerchantProvidedAnnotation": {
          "prototype": {
            "key": "string",
            "value": "string"
          }
        },
        "Content.V2.Schema.OrderPaymentMethod": {
          "prototype": {
            "billingAddress": "+Content.V2.Schema.OrderAddress",
            "expirationMonth": "Integer",
            "expirationYear": "Integer",
            "lastFourDigits": "string",
            "phoneNumber": "string",
            "type": "string"
          }
        },
        "Content.V2.Schema.OrderRefund": {
          "prototype": {
            "actor": "string",
            "amount": "+Content.V2.Schema.Price",
            "creationDate": "string",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrderReportDisbursement": {
          "prototype": {
            "disbursementAmount": "+Content.V2.Schema.Price",
            "disbursementCreationDate": "string",
            "disbursementDate": "string",
            "disbursementId": "string",
            "merchantId": "string"
          }
        },
        "Content.V2.Schema.OrderReportTransaction": {
          "prototype": {
            "disbursementAmount": "+Content.V2.Schema.Price",
            "disbursementCreationDate": "string",
            "disbursementDate": "string",
            "disbursementId": "string",
            "merchantId": "string",
            "merchantOrderId": "string",
            "orderId": "string",
            "productAmount": "+Content.V2.Schema.Amount",
            "productAmountWithRemittedTax": "+Content.V2.Schema.ProductAmount",
            "transactionDate": "string"
          }
        },
        "Content.V2.Schema.OrderReturn": {
          "prototype": {
            "actor": "string",
            "creationDate": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrderShipment": {
          "prototype": {
            "carrier": "string",
            "creationDate": "string",
            "deliveryDate": "string",
            "id": "string",
            "lineItems": "[+Content.V2.Schema.OrderShipmentLineItemShipment]",
            "status": "string",
            "trackingId": "string"
          }
        },
        "Content.V2.Schema.OrderShipmentLineItemShipment": {
          "prototype": {
            "lineItemId": "string",
            "productId": "string",
            "quantity": "Integer"
          }
        },
        "Content.V2.Schema.OrderinvoicesCreateChargeInvoiceRequest": {
          "prototype": {
            "invoiceId": "string",
            "invoiceSummary": "+Content.V2.Schema.InvoiceSummary",
            "lineItemInvoices": "[+Content.V2.Schema.ShipmentInvoiceLineItemInvoice]",
            "operationId": "string",
            "shipmentGroupId": "string"
          }
        },
        "Content.V2.Schema.OrderinvoicesCreateChargeInvoiceResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrderinvoicesCreateRefundInvoiceRequest": {
          "prototype": {
            "invoiceId": "string",
            "operationId": "string",
            "refundOnlyOption": "+Content.V2.Schema.OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption",
            "returnOption": "+Content.V2.Schema.OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption",
            "shipmentInvoices": "[+Content.V2.Schema.ShipmentInvoice]"
          }
        },
        "Content.V2.Schema.OrderinvoicesCreateRefundInvoiceResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption": {
          "prototype": {
            "description": "string",
            "reason": "string"
          }
        },
        "Content.V2.Schema.OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption": {
          "prototype": {
            "description": "string",
            "reason": "string"
          }
        },
        "Content.V2.Schema.OrderpaymentsNotifyAuthApprovedRequest": {
          "prototype": {
            "authAmountPretax": "+Content.V2.Schema.Price",
            "authAmountTax": "+Content.V2.Schema.Price"
          }
        },
        "Content.V2.Schema.OrderpaymentsNotifyAuthApprovedResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrderpaymentsNotifyAuthDeclinedRequest": {
          "prototype": {
            "declineReason": "string"
          }
        },
        "Content.V2.Schema.OrderpaymentsNotifyAuthDeclinedResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrderpaymentsNotifyChargeRequest": {
          "prototype": {
            "chargeState": "string",
            "invoiceId": "string",
            "invoiceIds": "[string]"
          }
        },
        "Content.V2.Schema.OrderpaymentsNotifyChargeResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrderpaymentsNotifyRefundRequest": {
          "prototype": {
            "invoiceId": "string",
            "invoiceIds": "[string]",
            "refundState": "string"
          }
        },
        "Content.V2.Schema.OrderpaymentsNotifyRefundResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrderreportsListDisbursementsResponse": {
          "prototype": {
            "disbursements": "[+Content.V2.Schema.OrderReportDisbursement]",
            "kind": "string",
            "nextPageToken": "string"
          }
        },
        "Content.V2.Schema.OrderreportsListTransactionsResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "transactions": "[+Content.V2.Schema.OrderReportTransaction]"
          }
        },
        "Content.V2.Schema.OrderreturnsListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.MerchantOrderReturn]"
          }
        },
        "Content.V2.Schema.OrdersAcknowledgeRequest": {
          "prototype": {
            "operationId": "string"
          }
        },
        "Content.V2.Schema.OrdersAcknowledgeResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersAdvanceTestOrderResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersCancelLineItemRequest": {
          "prototype": {
            "amount": "+Content.V2.Schema.Price",
            "amountPretax": "+Content.V2.Schema.Price",
            "amountTax": "+Content.V2.Schema.Price",
            "lineItemId": "string",
            "operationId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCancelLineItemResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersCancelRequest": {
          "prototype": {
            "operationId": "string",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCancelResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersCancelTestOrderByCustomerRequest": {
          "prototype": {
            "reason": "string"
          }
        },
        "Content.V2.Schema.OrdersCancelTestOrderByCustomerResponse": {
          "prototype": {
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersCreateTestOrderRequest": {
          "prototype": {
            "country": "string",
            "templateName": "string",
            "testOrder": "+Content.V2.Schema.TestOrder"
          }
        },
        "Content.V2.Schema.OrdersCreateTestOrderResponse": {
          "prototype": {
            "kind": "string",
            "orderId": "string"
          }
        },
        "Content.V2.Schema.OrdersCreateTestReturnRequest": {
          "prototype": {
            "items": "[+Content.V2.Schema.OrdersCustomBatchRequestEntryCreateTestReturnReturnItem]"
          }
        },
        "Content.V2.Schema.OrdersCreateTestReturnResponse": {
          "prototype": {
            "kind": "string",
            "returnId": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.OrdersCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntry": {
          "prototype": {
            "batchId": "Integer",
            "cancel": "+Content.V2.Schema.OrdersCustomBatchRequestEntryCancel",
            "cancelLineItem": "+Content.V2.Schema.OrdersCustomBatchRequestEntryCancelLineItem",
            "inStoreRefundLineItem": "+Content.V2.Schema.OrdersCustomBatchRequestEntryInStoreRefundLineItem",
            "merchantId": "string",
            "merchantOrderId": "string",
            "method": "string",
            "operationId": "string",
            "orderId": "string",
            "refund": "+Content.V2.Schema.OrdersCustomBatchRequestEntryRefund",
            "rejectReturnLineItem": "+Content.V2.Schema.OrdersCustomBatchRequestEntryRejectReturnLineItem",
            "returnLineItem": "+Content.V2.Schema.OrdersCustomBatchRequestEntryReturnLineItem",
            "returnRefundLineItem": "+Content.V2.Schema.OrdersCustomBatchRequestEntryReturnRefundLineItem",
            "setLineItemMetadata": "+Content.V2.Schema.OrdersCustomBatchRequestEntrySetLineItemMetadata",
            "shipLineItems": "+Content.V2.Schema.OrdersCustomBatchRequestEntryShipLineItems",
            "updateLineItemShippingDetails": "+Content.V2.Schema.OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails",
            "updateShipment": "+Content.V2.Schema.OrdersCustomBatchRequestEntryUpdateShipment"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryCancel": {
          "prototype": {
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryCancelLineItem": {
          "prototype": {
            "amount": "+Content.V2.Schema.Price",
            "amountPretax": "+Content.V2.Schema.Price",
            "amountTax": "+Content.V2.Schema.Price",
            "lineItemId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryCreateTestReturnReturnItem": {
          "prototype": {
            "lineItemId": "string",
            "quantity": "Integer"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryInStoreRefundLineItem": {
          "prototype": {
            "amountPretax": "+Content.V2.Schema.Price",
            "amountTax": "+Content.V2.Schema.Price",
            "lineItemId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryRefund": {
          "prototype": {
            "amount": "+Content.V2.Schema.Price",
            "amountPretax": "+Content.V2.Schema.Price",
            "amountTax": "+Content.V2.Schema.Price",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryRejectReturnLineItem": {
          "prototype": {
            "lineItemId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryReturnLineItem": {
          "prototype": {
            "lineItemId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryReturnRefundLineItem": {
          "prototype": {
            "amountPretax": "+Content.V2.Schema.Price",
            "amountTax": "+Content.V2.Schema.Price",
            "lineItemId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntrySetLineItemMetadata": {
          "prototype": {
            "annotations": "[+Content.V2.Schema.OrderMerchantProvidedAnnotation]",
            "lineItemId": "string",
            "productId": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryShipLineItems": {
          "prototype": {
            "carrier": "string",
            "lineItems": "[+Content.V2.Schema.OrderShipmentLineItemShipment]",
            "shipmentGroupId": "string",
            "shipmentId": "string",
            "shipmentInfos": "[+Content.V2.Schema.OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo]",
            "trackingId": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo": {
          "prototype": {
            "carrier": "string",
            "shipmentId": "string",
            "trackingId": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails": {
          "prototype": {
            "deliverByDate": "string",
            "lineItemId": "string",
            "productId": "string",
            "shipByDate": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchRequestEntryUpdateShipment": {
          "prototype": {
            "carrier": "string",
            "deliveryDate": "string",
            "shipmentId": "string",
            "status": "string",
            "trackingId": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.OrdersCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "executionStatus": "string",
            "kind": "string",
            "order": "+Content.V2.Schema.Order"
          }
        },
        "Content.V2.Schema.OrdersGetByMerchantOrderIdResponse": {
          "prototype": {
            "kind": "string",
            "order": "+Content.V2.Schema.Order"
          }
        },
        "Content.V2.Schema.OrdersGetTestOrderTemplateResponse": {
          "prototype": {
            "kind": "string",
            "template": "+Content.V2.Schema.TestOrder"
          }
        },
        "Content.V2.Schema.OrdersInStoreRefundLineItemRequest": {
          "prototype": {
            "amountPretax": "+Content.V2.Schema.Price",
            "amountTax": "+Content.V2.Schema.Price",
            "lineItemId": "string",
            "operationId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersInStoreRefundLineItemResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.Order]"
          }
        },
        "Content.V2.Schema.OrdersRefundRequest": {
          "prototype": {
            "amount": "+Content.V2.Schema.Price",
            "amountPretax": "+Content.V2.Schema.Price",
            "amountTax": "+Content.V2.Schema.Price",
            "operationId": "string",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersRefundResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersRejectReturnLineItemRequest": {
          "prototype": {
            "lineItemId": "string",
            "operationId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersRejectReturnLineItemResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersReturnLineItemRequest": {
          "prototype": {
            "lineItemId": "string",
            "operationId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersReturnLineItemResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersReturnRefundLineItemRequest": {
          "prototype": {
            "amountPretax": "+Content.V2.Schema.Price",
            "amountTax": "+Content.V2.Schema.Price",
            "lineItemId": "string",
            "operationId": "string",
            "productId": "string",
            "quantity": "Integer",
            "reason": "string",
            "reasonText": "string"
          }
        },
        "Content.V2.Schema.OrdersReturnRefundLineItemResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersSetLineItemMetadataRequest": {
          "prototype": {
            "annotations": "[+Content.V2.Schema.OrderMerchantProvidedAnnotation]",
            "lineItemId": "string",
            "operationId": "string",
            "productId": "string"
          }
        },
        "Content.V2.Schema.OrdersSetLineItemMetadataResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersShipLineItemsRequest": {
          "prototype": {
            "carrier": "string",
            "lineItems": "[+Content.V2.Schema.OrderShipmentLineItemShipment]",
            "operationId": "string",
            "shipmentGroupId": "string",
            "shipmentId": "string",
            "shipmentInfos": "[+Content.V2.Schema.OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo]",
            "trackingId": "string"
          }
        },
        "Content.V2.Schema.OrdersShipLineItemsResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersUpdateLineItemShippingDetailsRequest": {
          "prototype": {
            "deliverByDate": "string",
            "lineItemId": "string",
            "operationId": "string",
            "productId": "string",
            "shipByDate": "string"
          }
        },
        "Content.V2.Schema.OrdersUpdateLineItemShippingDetailsResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersUpdateMerchantOrderIdRequest": {
          "prototype": {
            "merchantOrderId": "string",
            "operationId": "string"
          }
        },
        "Content.V2.Schema.OrdersUpdateMerchantOrderIdResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.OrdersUpdateShipmentRequest": {
          "prototype": {
            "carrier": "string",
            "deliveryDate": "string",
            "operationId": "string",
            "shipmentId": "string",
            "status": "string",
            "trackingId": "string"
          }
        },
        "Content.V2.Schema.OrdersUpdateShipmentResponse": {
          "prototype": {
            "executionStatus": "string",
            "kind": "string"
          }
        },
        "Content.V2.Schema.PosCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.PosCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.PosCustomBatchRequestEntry": {
          "prototype": {
            "batchId": "Integer",
            "inventory": "+Content.V2.Schema.PosInventory",
            "merchantId": "string",
            "method": "string",
            "sale": "+Content.V2.Schema.PosSale",
            "store": "+Content.V2.Schema.PosStore",
            "storeCode": "string",
            "targetMerchantId": "string"
          }
        },
        "Content.V2.Schema.PosCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.PosCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.PosCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "inventory": "+Content.V2.Schema.PosInventory",
            "kind": "string",
            "sale": "+Content.V2.Schema.PosSale",
            "store": "+Content.V2.Schema.PosStore"
          }
        },
        "Content.V2.Schema.PosDataProviders": {
          "prototype": {
            "country": "string",
            "posDataProviders": "[+Content.V2.Schema.PosDataProvidersPosDataProvider]"
          }
        },
        "Content.V2.Schema.PosDataProvidersPosDataProvider": {
          "prototype": {
            "displayName": "string",
            "fullName": "string",
            "providerId": "string"
          }
        },
        "Content.V2.Schema.PosInventory": {
          "prototype": {
            "contentLanguage": "string",
            "gtin": "string",
            "itemId": "string",
            "kind": "string",
            "price": "+Content.V2.Schema.Price",
            "quantity": "string",
            "storeCode": "string",
            "targetCountry": "string",
            "timestamp": "string"
          }
        },
        "Content.V2.Schema.PosInventoryRequest": {
          "prototype": {
            "contentLanguage": "string",
            "gtin": "string",
            "itemId": "string",
            "price": "+Content.V2.Schema.Price",
            "quantity": "string",
            "storeCode": "string",
            "targetCountry": "string",
            "timestamp": "string"
          }
        },
        "Content.V2.Schema.PosInventoryResponse": {
          "prototype": {
            "contentLanguage": "string",
            "gtin": "string",
            "itemId": "string",
            "kind": "string",
            "price": "+Content.V2.Schema.Price",
            "quantity": "string",
            "storeCode": "string",
            "targetCountry": "string",
            "timestamp": "string"
          }
        },
        "Content.V2.Schema.PosListResponse": {
          "prototype": {
            "kind": "string",
            "resources": "[+Content.V2.Schema.PosStore]"
          }
        },
        "Content.V2.Schema.PosSale": {
          "prototype": {
            "contentLanguage": "string",
            "gtin": "string",
            "itemId": "string",
            "kind": "string",
            "price": "+Content.V2.Schema.Price",
            "quantity": "string",
            "saleId": "string",
            "storeCode": "string",
            "targetCountry": "string",
            "timestamp": "string"
          }
        },
        "Content.V2.Schema.PosSaleRequest": {
          "prototype": {
            "contentLanguage": "string",
            "gtin": "string",
            "itemId": "string",
            "price": "+Content.V2.Schema.Price",
            "quantity": "string",
            "saleId": "string",
            "storeCode": "string",
            "targetCountry": "string",
            "timestamp": "string"
          }
        },
        "Content.V2.Schema.PosSaleResponse": {
          "prototype": {
            "contentLanguage": "string",
            "gtin": "string",
            "itemId": "string",
            "kind": "string",
            "price": "+Content.V2.Schema.Price",
            "quantity": "string",
            "saleId": "string",
            "storeCode": "string",
            "targetCountry": "string",
            "timestamp": "string"
          }
        },
        "Content.V2.Schema.PosStore": {
          "prototype": {
            "kind": "string",
            "storeAddress": "string",
            "storeCode": "string"
          }
        },
        "Content.V2.Schema.PostalCodeGroup": {
          "prototype": {
            "country": "string",
            "name": "string",
            "postalCodeRanges": "[+Content.V2.Schema.PostalCodeRange]"
          }
        },
        "Content.V2.Schema.PostalCodeRange": {
          "prototype": {
            "postalCodeRangeBegin": "string",
            "postalCodeRangeEnd": "string"
          }
        },
        "Content.V2.Schema.Price": {
          "prototype": {
            "currency": "string",
            "value": "string"
          }
        },
        "Content.V2.Schema.Product": {
          "prototype": {
            "additionalImageLinks": "[string]",
            "additionalProductTypes": "[string]",
            "adult": "bool",
            "adwordsGrouping": "string",
            "adwordsLabels": "[string]",
            "adwordsRedirect": "string",
            "ageGroup": "string",
            "aspects": "[+Content.V2.Schema.ProductAspect]",
            "availability": "string",
            "availabilityDate": "string",
            "brand": "string",
            "channel": "string",
            "color": "string",
            "condition": "string",
            "contentLanguage": "string",
            "costOfGoodsSold": "+Content.V2.Schema.Price",
            "customAttributes": "[+Content.V2.Schema.CustomAttribute]",
            "customGroups": "[+Content.V2.Schema.CustomGroup]",
            "customLabel0": "string",
            "customLabel1": "string",
            "customLabel2": "string",
            "customLabel3": "string",
            "customLabel4": "string",
            "description": "string",
            "destinations": "[+Content.V2.Schema.ProductDestination]",
            "displayAdsId": "string",
            "displayAdsLink": "string",
            "displayAdsSimilarIds": "[string]",
            "displayAdsTitle": "string",
            "displayAdsValue": "number",
            "energyEfficiencyClass": "string",
            "expirationDate": "string",
            "gender": "string",
            "googleProductCategory": "string",
            "gtin": "string",
            "id": "string",
            "identifierExists": "bool",
            "imageLink": "string",
            "installment": "+Content.V2.Schema.Installment",
            "isBundle": "bool",
            "itemGroupId": "string",
            "kind": "string",
            "link": "string",
            "loyaltyPoints": "+Content.V2.Schema.LoyaltyPoints",
            "material": "string",
            "maxEnergyEfficiencyClass": "string",
            "maxHandlingTime": "string",
            "minEnergyEfficiencyClass": "string",
            "minHandlingTime": "string",
            "mobileLink": "string",
            "mpn": "string",
            "multipack": "string",
            "offerId": "string",
            "onlineOnly": "bool",
            "pattern": "string",
            "price": "+Content.V2.Schema.Price",
            "productType": "string",
            "promotionIds": "[string]",
            "salePrice": "+Content.V2.Schema.Price",
            "salePriceEffectiveDate": "string",
            "sellOnGoogleQuantity": "string",
            "shipping": "[+Content.V2.Schema.ProductShipping]",
            "shippingHeight": "+Content.V2.Schema.ProductShippingDimension",
            "shippingLabel": "string",
            "shippingLength": "+Content.V2.Schema.ProductShippingDimension",
            "shippingWeight": "+Content.V2.Schema.ProductShippingWeight",
            "shippingWidth": "+Content.V2.Schema.ProductShippingDimension",
            "sizeSystem": "string",
            "sizeType": "string",
            "sizes": "[string]",
            "source": "string",
            "targetCountry": "string",
            "taxes": "[+Content.V2.Schema.ProductTax]",
            "title": "string",
            "unitPricingBaseMeasure": "+Content.V2.Schema.ProductUnitPricingBaseMeasure",
            "unitPricingMeasure": "+Content.V2.Schema.ProductUnitPricingMeasure",
            "validatedDestinations": "[string]",
            "warnings": "[+Content.V2.Schema.Error]"
          }
        },
        "Content.V2.Schema.ProductAmount": {
          "prototype": {
            "priceAmount": "+Content.V2.Schema.Price",
            "remittedTaxAmount": "+Content.V2.Schema.Price",
            "taxAmount": "+Content.V2.Schema.Price"
          }
        },
        "Content.V2.Schema.ProductAspect": {
          "prototype": {
            "aspectName": "string",
            "destinationName": "string",
            "intention": "string"
          }
        },
        "Content.V2.Schema.ProductDestination": {
          "prototype": {
            "destinationName": "string",
            "intention": "string"
          }
        },
        "Content.V2.Schema.ProductShipping": {
          "prototype": {
            "country": "string",
            "locationGroupName": "string",
            "locationId": "string",
            "postalCode": "string",
            "price": "+Content.V2.Schema.Price",
            "region": "string",
            "service": "string"
          }
        },
        "Content.V2.Schema.ProductShippingDimension": {
          "prototype": {
            "unit": "string",
            "value": "number"
          }
        },
        "Content.V2.Schema.ProductShippingWeight": {
          "prototype": {
            "unit": "string",
            "value": "number"
          }
        },
        "Content.V2.Schema.ProductStatus": {
          "prototype": {
            "creationDate": "string",
            "dataQualityIssues": "[+Content.V2.Schema.ProductStatusDataQualityIssue]",
            "destinationStatuses": "[+Content.V2.Schema.ProductStatusDestinationStatus]",
            "googleExpirationDate": "string",
            "itemLevelIssues": "[+Content.V2.Schema.ProductStatusItemLevelIssue]",
            "kind": "string",
            "lastUpdateDate": "string",
            "link": "string",
            "product": "+Content.V2.Schema.Product",
            "productId": "string",
            "title": "string"
          }
        },
        "Content.V2.Schema.ProductStatusDataQualityIssue": {
          "prototype": {
            "destination": "string",
            "detail": "string",
            "fetchStatus": "string",
            "id": "string",
            "location": "string",
            "severity": "string",
            "timestamp": "string",
            "valueOnLandingPage": "string",
            "valueProvided": "string"
          }
        },
        "Content.V2.Schema.ProductStatusDestinationStatus": {
          "prototype": {
            "approvalPending": "bool",
            "approvalStatus": "string",
            "destination": "string",
            "intention": "string"
          }
        },
        "Content.V2.Schema.ProductStatusItemLevelIssue": {
          "prototype": {
            "attributeName": "string",
            "code": "string",
            "description": "string",
            "destination": "string",
            "detail": "string",
            "documentation": "string",
            "resolution": "string",
            "servability": "string"
          }
        },
        "Content.V2.Schema.ProductTax": {
          "prototype": {
            "country": "string",
            "locationId": "string",
            "postalCode": "string",
            "rate": "number",
            "region": "string",
            "taxShip": "bool"
          }
        },
        "Content.V2.Schema.ProductUnitPricingBaseMeasure": {
          "prototype": {
            "unit": "string",
            "value": "string"
          }
        },
        "Content.V2.Schema.ProductUnitPricingMeasure": {
          "prototype": {
            "unit": "string",
            "value": "number"
          }
        },
        "Content.V2.Schema.ProductsCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.ProductsCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.ProductsCustomBatchRequestEntry": {
          "prototype": {
            "batchId": "Integer",
            "merchantId": "string",
            "method": "string",
            "product": "+Content.V2.Schema.Product",
            "productId": "string"
          }
        },
        "Content.V2.Schema.ProductsCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.ProductsCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.ProductsCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "kind": "string",
            "product": "+Content.V2.Schema.Product"
          }
        },
        "Content.V2.Schema.ProductsListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.Product]"
          }
        },
        "Content.V2.Schema.ProductstatusesCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.ProductstatusesCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.ProductstatusesCustomBatchRequestEntry": {
          "prototype": {
            "batchId": "Integer",
            "destinations": "[string]",
            "includeAttributes": "bool",
            "merchantId": "string",
            "method": "string",
            "productId": "string"
          }
        },
        "Content.V2.Schema.ProductstatusesCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.ProductstatusesCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.ProductstatusesCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "kind": "string",
            "productStatus": "+Content.V2.Schema.ProductStatus"
          }
        },
        "Content.V2.Schema.ProductstatusesListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.ProductStatus]"
          }
        },
        "Content.V2.Schema.Promotion": {
          "prototype": {
            "promotionAmount": "+Content.V2.Schema.Amount",
            "promotionId": "string"
          }
        },
        "Content.V2.Schema.RateGroup": {
          "prototype": {
            "applicableShippingLabels": "[string]",
            "carrierRates": "[+Content.V2.Schema.CarrierRate]",
            "mainTable": "+Content.V2.Schema.Table",
            "name": "string",
            "singleValue": "+Content.V2.Schema.Value",
            "subtables": "[+Content.V2.Schema.Table]"
          }
        },
        "Content.V2.Schema.RefundReason": {
          "prototype": {
            "description": "string",
            "reasonCode": "string"
          }
        },
        "Content.V2.Schema.ReturnShipment": {
          "prototype": {
            "creationDate": "string",
            "deliveryDate": "string",
            "returnMethodType": "string",
            "shipmentId": "string",
            "shipmentTrackingInfos": "[+Content.V2.Schema.ShipmentTrackingInfo]",
            "shippingDate": "string",
            "state": "string"
          }
        },
        "Content.V2.Schema.Row": {
          "prototype": {
            "cells": "[+Content.V2.Schema.Value]"
          }
        },
        "Content.V2.Schema.Service": {
          "prototype": {
            "active": "bool",
            "currency": "string",
            "deliveryCountry": "string",
            "deliveryTime": "+Content.V2.Schema.DeliveryTime",
            "eligibility": "string",
            "minimumOrderValue": "+Content.V2.Schema.Price",
            "name": "string",
            "rateGroups": "[+Content.V2.Schema.RateGroup]"
          }
        },
        "Content.V2.Schema.ShipmentInvoice": {
          "prototype": {
            "invoiceSummary": "+Content.V2.Schema.InvoiceSummary",
            "lineItemInvoices": "[+Content.V2.Schema.ShipmentInvoiceLineItemInvoice]",
            "shipmentGroupId": "string"
          }
        },
        "Content.V2.Schema.ShipmentInvoiceLineItemInvoice": {
          "prototype": {
            "lineItemId": "string",
            "productId": "string",
            "shipmentUnitIds": "[string]",
            "unitInvoice": "+Content.V2.Schema.UnitInvoice"
          }
        },
        "Content.V2.Schema.ShipmentTrackingInfo": {
          "prototype": {
            "carrier": "string",
            "trackingNumber": "string"
          }
        },
        "Content.V2.Schema.ShippingSettings": {
          "prototype": {
            "accountId": "string",
            "postalCodeGroups": "[+Content.V2.Schema.PostalCodeGroup]",
            "services": "[+Content.V2.Schema.Service]"
          }
        },
        "Content.V2.Schema.ShippingsettingsCustomBatchRequest": {
          "prototype": {
            "entries": "[+Content.V2.Schema.ShippingsettingsCustomBatchRequestEntry]"
          }
        },
        "Content.V2.Schema.ShippingsettingsCustomBatchRequestEntry": {
          "prototype": {
            "accountId": "string",
            "batchId": "Integer",
            "merchantId": "string",
            "method": "string",
            "shippingSettings": "+Content.V2.Schema.ShippingSettings"
          }
        },
        "Content.V2.Schema.ShippingsettingsCustomBatchResponse": {
          "prototype": {
            "entries": "[+Content.V2.Schema.ShippingsettingsCustomBatchResponseEntry]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.ShippingsettingsCustomBatchResponseEntry": {
          "prototype": {
            "batchId": "Integer",
            "errors": "+Content.V2.Schema.Errors",
            "kind": "string",
            "shippingSettings": "+Content.V2.Schema.ShippingSettings"
          }
        },
        "Content.V2.Schema.ShippingsettingsGetSupportedCarriersResponse": {
          "prototype": {
            "carriers": "[+Content.V2.Schema.CarriersCarrier]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.ShippingsettingsGetSupportedHolidaysResponse": {
          "prototype": {
            "holidays": "[+Content.V2.Schema.HolidaysHoliday]",
            "kind": "string"
          }
        },
        "Content.V2.Schema.ShippingsettingsListResponse": {
          "prototype": {
            "kind": "string",
            "nextPageToken": "string",
            "resources": "[+Content.V2.Schema.ShippingSettings]"
          }
        },
        "Content.V2.Schema.Table": {
          "prototype": {
            "columnHeaders": "+Content.V2.Schema.Headers",
            "name": "string",
            "rowHeaders": "+Content.V2.Schema.Headers",
            "rows": "[+Content.V2.Schema.Row]"
          }
        },
        "Content.V2.Schema.TestOrder": {
          "prototype": {
            "customer": "+Content.V2.Schema.TestOrderCustomer",
            "enableOrderinvoices": "bool",
            "kind": "string",
            "lineItems": "[+Content.V2.Schema.TestOrderLineItem]",
            "notificationMode": "string",
            "paymentMethod": "+Content.V2.Schema.TestOrderPaymentMethod",
            "predefinedDeliveryAddress": "string",
            "promotions": "[+Content.V2.Schema.OrderLegacyPromotion]",
            "shippingCost": "+Content.V2.Schema.Price",
            "shippingCostTax": "+Content.V2.Schema.Price",
            "shippingOption": "string"
          }
        },
        "Content.V2.Schema.TestOrderCustomer": {
          "prototype": {
            "email": "string",
            "explicitMarketingPreference": "bool",
            "fullName": "string",
            "marketingRightsInfo": "+Content.V2.Schema.TestOrderCustomerMarketingRightsInfo"
          }
        },
        "Content.V2.Schema.TestOrderCustomerMarketingRightsInfo": {
          "prototype": {
            "explicitMarketingPreference": "string",
            "lastUpdatedTimestamp": "string"
          }
        },
        "Content.V2.Schema.TestOrderLineItem": {
          "prototype": {
            "product": "+Content.V2.Schema.TestOrderLineItemProduct",
            "quantityOrdered": "Integer",
            "returnInfo": "+Content.V2.Schema.OrderLineItemReturnInfo",
            "shippingDetails": "+Content.V2.Schema.OrderLineItemShippingDetails",
            "unitTax": "+Content.V2.Schema.Price"
          }
        },
        "Content.V2.Schema.TestOrderLineItemProduct": {
          "prototype": {
            "brand": "string",
            "channel": "string",
            "condition": "string",
            "contentLanguage": "string",
            "fees": "[+Content.V2.Schema.OrderLineItemProductFee]",
            "gtin": "string",
            "imageLink": "string",
            "itemGroupId": "string",
            "mpn": "string",
            "offerId": "string",
            "price": "+Content.V2.Schema.Price",
            "targetCountry": "string",
            "title": "string",
            "variantAttributes": "[+Content.V2.Schema.OrderLineItemProductVariantAttribute]"
          }
        },
        "Content.V2.Schema.TestOrderPaymentMethod": {
          "prototype": {
            "expirationMonth": "Integer",
            "expirationYear": "Integer",
            "lastFourDigits": "string",
            "predefinedBillingAddress": "string",
            "type": "string"
          }
        },
        "Content.V2.Schema.TransitTable": {
          "prototype": {
            "postalCodeGroupNames": "[string]",
            "rows": "[+Content.V2.Schema.TransitTableTransitTimeRow]",
            "transitTimeLabels": "[string]"
          }
        },
        "Content.V2.Schema.TransitTableTransitTimeRow": {
          "prototype": {
            "values": "[+Content.V2.Schema.TransitTableTransitTimeRowTransitTimeValue]"
          }
        },
        "Content.V2.Schema.TransitTableTransitTimeRowTransitTimeValue": {
          "prototype": {
            "maxTransitTimeInDays": "Integer",
            "minTransitTimeInDays": "Integer"
          }
        },
        "Content.V2.Schema.UnitInvoice": {
          "prototype": {
            "additionalCharges": "[+Content.V2.Schema.UnitInvoiceAdditionalCharge]",
            "promotions": "[+Content.V2.Schema.Promotion]",
            "unitPricePretax": "+Content.V2.Schema.Price",
            "unitPriceTaxes": "[+Content.V2.Schema.UnitInvoiceTaxLine]"
          }
        },
        "Content.V2.Schema.UnitInvoiceAdditionalCharge": {
          "prototype": {
            "additionalChargeAmount": "+Content.V2.Schema.Amount",
            "additionalChargePromotions": "[+Content.V2.Schema.Promotion]",
            "type": "string"
          }
        },
        "Content.V2.Schema.UnitInvoiceTaxLine": {
          "prototype": {
            "taxAmount": "+Content.V2.Schema.Price",
            "taxName": "string",
            "taxType": "string"
          }
        },
        "Content.V2.Schema.Value": {
          "prototype": {
            "carrierRateName": "string",
            "flatRate": "+Content.V2.Schema.Price",
            "noShipping": "bool",
            "pricePercentage": "string",
            "subtableName": "string"
          }
        },
        "Content.V2.Schema.Weight": {
          "prototype": {
            "unit": "string",
            "value": "string"
          }
        }
      }
    },
    {
      "!name": "Slides",
      "Slides": {
        "newAffineTransform": "fn() -> +Slides.V1.Schema.AffineTransform",
        "newAutoText": "fn() -> +Slides.V1.Schema.AutoText",
        "newBatchUpdatePresentationRequest": "fn() -> +Slides.V1.Schema.BatchUpdatePresentationRequest",
        "newBullet": "fn() -> +Slides.V1.Schema.Bullet",
        "newColorScheme": "fn() -> +Slides.V1.Schema.ColorScheme",
        "newColorStop": "fn() -> +Slides.V1.Schema.ColorStop",
        "newCreateImageRequest": "fn() -> +Slides.V1.Schema.CreateImageRequest",
        "newCreateLineRequest": "fn() -> +Slides.V1.Schema.CreateLineRequest",
        "newCreateParagraphBulletsRequest": "fn() -> +Slides.V1.Schema.CreateParagraphBulletsRequest",
        "newCreateShapeRequest": "fn() -> +Slides.V1.Schema.CreateShapeRequest",
        "newCreateSheetsChartRequest": "fn() -> +Slides.V1.Schema.CreateSheetsChartRequest",
        "newCreateSlideRequest": "fn() -> +Slides.V1.Schema.CreateSlideRequest",
        "newCreateTableRequest": "fn() -> +Slides.V1.Schema.CreateTableRequest",
        "newCreateVideoRequest": "fn() -> +Slides.V1.Schema.CreateVideoRequest",
        "newCropProperties": "fn() -> +Slides.V1.Schema.CropProperties",
        "newDeleteObjectRequest": "fn() -> +Slides.V1.Schema.DeleteObjectRequest",
        "newDeleteParagraphBulletsRequest": "fn() -> +Slides.V1.Schema.DeleteParagraphBulletsRequest",
        "newDeleteTableColumnRequest": "fn() -> +Slides.V1.Schema.DeleteTableColumnRequest",
        "newDeleteTableRowRequest": "fn() -> +Slides.V1.Schema.DeleteTableRowRequest",
        "newDeleteTextRequest": "fn() -> +Slides.V1.Schema.DeleteTextRequest",
        "newDimension": "fn() -> +Slides.V1.Schema.Dimension",
        "newDuplicateObjectRequest": "fn() -> +Slides.V1.Schema.DuplicateObjectRequest",
        "newGroup": "fn() -> +Slides.V1.Schema.Group",
        "newGroupObjectsRequest": "fn() -> +Slides.V1.Schema.GroupObjectsRequest",
        "newImage": "fn() -> +Slides.V1.Schema.Image",
        "newImageProperties": "fn() -> +Slides.V1.Schema.ImageProperties",
        "newInsertTableColumnsRequest": "fn() -> +Slides.V1.Schema.InsertTableColumnsRequest",
        "newInsertTableRowsRequest": "fn() -> +Slides.V1.Schema.InsertTableRowsRequest",
        "newInsertTextRequest": "fn() -> +Slides.V1.Schema.InsertTextRequest",
        "newLayoutPlaceholderIdMapping": "fn() -> +Slides.V1.Schema.LayoutPlaceholderIdMapping",
        "newLayoutProperties": "fn() -> +Slides.V1.Schema.LayoutProperties",
        "newLayoutReference": "fn() -> +Slides.V1.Schema.LayoutReference",
        "newLine": "fn() -> +Slides.V1.Schema.Line",
        "newLineConnection": "fn() -> +Slides.V1.Schema.LineConnection",
        "newLineFill": "fn() -> +Slides.V1.Schema.LineFill",
        "newLineProperties": "fn() -> +Slides.V1.Schema.LineProperties",
        "newLink": "fn() -> +Slides.V1.Schema.Link",
        "newMasterProperties": "fn() -> +Slides.V1.Schema.MasterProperties",
        "newMergeTableCellsRequest": "fn() -> +Slides.V1.Schema.MergeTableCellsRequest",
        "newNotesProperties": "fn() -> +Slides.V1.Schema.NotesProperties",
        "newOpaqueColor": "fn() -> +Slides.V1.Schema.OpaqueColor",
        "newOptionalColor": "fn() -> +Slides.V1.Schema.OptionalColor",
        "newOutline": "fn() -> +Slides.V1.Schema.Outline",
        "newOutlineFill": "fn() -> +Slides.V1.Schema.OutlineFill",
        "newPage": "fn() -> +Slides.V1.Schema.Page",
        "newPageBackgroundFill": "fn() -> +Slides.V1.Schema.PageBackgroundFill",
        "newPageElement": "fn() -> +Slides.V1.Schema.PageElement",
        "newPageElementProperties": "fn() -> +Slides.V1.Schema.PageElementProperties",
        "newPageProperties": "fn() -> +Slides.V1.Schema.PageProperties",
        "newParagraphMarker": "fn() -> +Slides.V1.Schema.ParagraphMarker",
        "newParagraphStyle": "fn() -> +Slides.V1.Schema.ParagraphStyle",
        "newPlaceholder": "fn() -> +Slides.V1.Schema.Placeholder",
        "newPresentation": "fn() -> +Slides.V1.Schema.Presentation",
        "newRange": "fn() -> +Slides.V1.Schema.Range",
        "newRecolor": "fn() -> +Slides.V1.Schema.Recolor",
        "newRefreshSheetsChartRequest": "fn() -> +Slides.V1.Schema.RefreshSheetsChartRequest",
        "newReplaceAllShapesWithImageRequest": "fn() -> +Slides.V1.Schema.ReplaceAllShapesWithImageRequest",
        "newReplaceAllShapesWithSheetsChartRequest": "fn() -> +Slides.V1.Schema.ReplaceAllShapesWithSheetsChartRequest",
        "newReplaceAllTextRequest": "fn() -> +Slides.V1.Schema.ReplaceAllTextRequest",
        "newReplaceImageRequest": "fn() -> +Slides.V1.Schema.ReplaceImageRequest",
        "newRequest": "fn() -> +Slides.V1.Schema.Request",
        "newRerouteLineRequest": "fn() -> +Slides.V1.Schema.RerouteLineRequest",
        "newRgbColor": "fn() -> +Slides.V1.Schema.RgbColor",
        "newShadow": "fn() -> +Slides.V1.Schema.Shadow",
        "newShape": "fn() -> +Slides.V1.Schema.Shape",
        "newShapeBackgroundFill": "fn() -> +Slides.V1.Schema.ShapeBackgroundFill",
        "newShapeProperties": "fn() -> +Slides.V1.Schema.ShapeProperties",
        "newSheetsChart": "fn() -> +Slides.V1.Schema.SheetsChart",
        "newSheetsChartProperties": "fn() -> +Slides.V1.Schema.SheetsChartProperties",
        "newSize": "fn() -> +Slides.V1.Schema.Size",
        "newSlideProperties": "fn() -> +Slides.V1.Schema.SlideProperties",
        "newSolidFill": "fn() -> +Slides.V1.Schema.SolidFill",
        "newStretchedPictureFill": "fn() -> +Slides.V1.Schema.StretchedPictureFill",
        "newSubstringMatchCriteria": "fn() -> +Slides.V1.Schema.SubstringMatchCriteria",
        "newTable": "fn() -> +Slides.V1.Schema.Table",
        "newTableBorderCell": "fn() -> +Slides.V1.Schema.TableBorderCell",
        "newTableBorderFill": "fn() -> +Slides.V1.Schema.TableBorderFill",
        "newTableBorderProperties": "fn() -> +Slides.V1.Schema.TableBorderProperties",
        "newTableBorderRow": "fn() -> +Slides.V1.Schema.TableBorderRow",
        "newTableCell": "fn() -> +Slides.V1.Schema.TableCell",
        "newTableCellBackgroundFill": "fn() -> +Slides.V1.Schema.TableCellBackgroundFill",
        "newTableCellLocation": "fn() -> +Slides.V1.Schema.TableCellLocation",
        "newTableCellProperties": "fn() -> +Slides.V1.Schema.TableCellProperties",
        "newTableColumnProperties": "fn() -> +Slides.V1.Schema.TableColumnProperties",
        "newTableRange": "fn() -> +Slides.V1.Schema.TableRange",
        "newTableRow": "fn() -> +Slides.V1.Schema.TableRow",
        "newTableRowProperties": "fn() -> +Slides.V1.Schema.TableRowProperties",
        "newTextContent": "fn() -> +Slides.V1.Schema.TextContent",
        "newTextElement": "fn() -> +Slides.V1.Schema.TextElement",
        "newTextRun": "fn() -> +Slides.V1.Schema.TextRun",
        "newTextStyle": "fn() -> +Slides.V1.Schema.TextStyle",
        "newThemeColorPair": "fn() -> +Slides.V1.Schema.ThemeColorPair",
        "newUngroupObjectsRequest": "fn() -> +Slides.V1.Schema.UngroupObjectsRequest",
        "newUnmergeTableCellsRequest": "fn() -> +Slides.V1.Schema.UnmergeTableCellsRequest",
        "newUpdateImagePropertiesRequest": "fn() -> +Slides.V1.Schema.UpdateImagePropertiesRequest",
        "newUpdateLineCategoryRequest": "fn() -> +Slides.V1.Schema.UpdateLineCategoryRequest",
        "newUpdateLinePropertiesRequest": "fn() -> +Slides.V1.Schema.UpdateLinePropertiesRequest",
        "newUpdatePageElementAltTextRequest": "fn() -> +Slides.V1.Schema.UpdatePageElementAltTextRequest",
        "newUpdatePageElementTransformRequest": "fn() -> +Slides.V1.Schema.UpdatePageElementTransformRequest",
        "newUpdatePageElementsZOrderRequest": "fn() -> +Slides.V1.Schema.UpdatePageElementsZOrderRequest",
        "newUpdatePagePropertiesRequest": "fn() -> +Slides.V1.Schema.UpdatePagePropertiesRequest",
        "newUpdateParagraphStyleRequest": "fn() -> +Slides.V1.Schema.UpdateParagraphStyleRequest",
        "newUpdateShapePropertiesRequest": "fn() -> +Slides.V1.Schema.UpdateShapePropertiesRequest",
        "newUpdateSlidesPositionRequest": "fn() -> +Slides.V1.Schema.UpdateSlidesPositionRequest",
        "newUpdateTableBorderPropertiesRequest": "fn() -> +Slides.V1.Schema.UpdateTableBorderPropertiesRequest",
        "newUpdateTableCellPropertiesRequest": "fn() -> +Slides.V1.Schema.UpdateTableCellPropertiesRequest",
        "newUpdateTableColumnPropertiesRequest": "fn() -> +Slides.V1.Schema.UpdateTableColumnPropertiesRequest",
        "newUpdateTableRowPropertiesRequest": "fn() -> +Slides.V1.Schema.UpdateTableRowPropertiesRequest",
        "newUpdateTextStyleRequest": "fn() -> +Slides.V1.Schema.UpdateTextStyleRequest",
        "newUpdateVideoPropertiesRequest": "fn() -> +Slides.V1.Schema.UpdateVideoPropertiesRequest",
        "newVideo": "fn() -> +Slides.V1.Schema.Video",
        "newVideoProperties": "fn() -> +Slides.V1.Schema.VideoProperties",
        "newWeightedFontFamily": "fn() -> +Slides.V1.Schema.WeightedFontFamily",
        "newWordArt": "fn() -> +Slides.V1.Schema.WordArt",
        "newWriteControl": "fn() -> +Slides.V1.Schema.WriteControl",
        "Presentations": "+Slides.V1.Collection.PresentationsCollection"
      },
      "!define": {
        "Slides.V1.Collection.Presentations.PagesCollection": {
          "prototype": {
            "get": "fn(presentationId: string, pageObjectId: string) -> +Slides.V1.Schema.Page",
            "getThumbnail": "fn(presentationId: string, pageObjectId: string, optionalArgs: object) -> +Slides.V1.Schema.Thumbnail"
          }
        },
        "Slides.V1.Collection.PresentationsCollection": {
          "prototype": {
            "batchUpdate": "fn(resource: Slides.V1.Schema.BatchUpdatePresentationRequest, presentationId: string) -> +Slides.V1.Schema.BatchUpdatePresentationResponse",
            "create": "fn(resource: Slides.V1.Schema.Presentation) -> +Slides.V1.Schema.Presentation",
            "get": "fn(presentationId: string) -> +Slides.V1.Schema.Presentation",
            "Pages": "+Slides.V1.Collection.Presentations.PagesCollection"
          }
        },
        "Slides.V1.Schema.AffineTransform": {
          "prototype": {
            "scaleX": "number",
            "scaleY": "number",
            "shearX": "number",
            "shearY": "number",
            "translateX": "number",
            "translateY": "number",
            "unit": "string"
          }
        },
        "Slides.V1.Schema.AutoText": {
          "prototype": {
            "content": "string",
            "style": "+Slides.V1.Schema.TextStyle",
            "type": "string"
          }
        },
        "Slides.V1.Schema.BatchUpdatePresentationRequest": {
          "prototype": {
            "requests": "[+Slides.V1.Schema.Request]",
            "writeControl": "+Slides.V1.Schema.WriteControl"
          }
        },
        "Slides.V1.Schema.BatchUpdatePresentationResponse": {
          "prototype": {
            "presentationId": "string",
            "replies": "[+Slides.V1.Schema.Response]",
            "writeControl": "+Slides.V1.Schema.WriteControl"
          }
        },
        "Slides.V1.Schema.Bullet": {
          "prototype": {
            "bulletStyle": "+Slides.V1.Schema.TextStyle",
            "glyph": "string",
            "listId": "string",
            "nestingLevel": "Integer"
          }
        },
        "Slides.V1.Schema.ColorScheme": {
          "prototype": {
            "colors": "[+Slides.V1.Schema.ThemeColorPair]"
          }
        },
        "Slides.V1.Schema.ColorStop": {
          "prototype": {
            "alpha": "number",
            "color": "+Slides.V1.Schema.OpaqueColor",
            "position": "number"
          }
        },
        "Slides.V1.Schema.CreateImageRequest": {
          "prototype": {
            "elementProperties": "+Slides.V1.Schema.PageElementProperties",
            "objectId": "string",
            "url": "string"
          }
        },
        "Slides.V1.Schema.CreateImageResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.CreateLineRequest": {
          "prototype": {
            "category": "string",
            "elementProperties": "+Slides.V1.Schema.PageElementProperties",
            "lineCategory": "string",
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.CreateLineResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.CreateParagraphBulletsRequest": {
          "prototype": {
            "bulletPreset": "string",
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "objectId": "string",
            "textRange": "+Slides.V1.Schema.Range"
          }
        },
        "Slides.V1.Schema.CreateShapeRequest": {
          "prototype": {
            "elementProperties": "+Slides.V1.Schema.PageElementProperties",
            "objectId": "string",
            "shapeType": "string"
          }
        },
        "Slides.V1.Schema.CreateShapeResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.CreateSheetsChartRequest": {
          "prototype": {
            "chartId": "Integer",
            "elementProperties": "+Slides.V1.Schema.PageElementProperties",
            "linkingMode": "string",
            "objectId": "string",
            "spreadsheetId": "string"
          }
        },
        "Slides.V1.Schema.CreateSheetsChartResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.CreateSlideRequest": {
          "prototype": {
            "insertionIndex": "Integer",
            "objectId": "string",
            "placeholderIdMappings": "[+Slides.V1.Schema.LayoutPlaceholderIdMapping]",
            "slideLayoutReference": "+Slides.V1.Schema.LayoutReference"
          }
        },
        "Slides.V1.Schema.CreateSlideResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.CreateTableRequest": {
          "prototype": {
            "columns": "Integer",
            "elementProperties": "+Slides.V1.Schema.PageElementProperties",
            "objectId": "string",
            "rows": "Integer"
          }
        },
        "Slides.V1.Schema.CreateTableResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.CreateVideoRequest": {
          "prototype": {
            "elementProperties": "+Slides.V1.Schema.PageElementProperties",
            "id": "string",
            "objectId": "string",
            "source": "string"
          }
        },
        "Slides.V1.Schema.CreateVideoResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.CropProperties": {
          "prototype": {
            "angle": "number",
            "bottomOffset": "number",
            "leftOffset": "number",
            "rightOffset": "number",
            "topOffset": "number"
          }
        },
        "Slides.V1.Schema.DeleteObjectRequest": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.DeleteParagraphBulletsRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "objectId": "string",
            "textRange": "+Slides.V1.Schema.Range"
          }
        },
        "Slides.V1.Schema.DeleteTableColumnRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "tableObjectId": "string"
          }
        },
        "Slides.V1.Schema.DeleteTableRowRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "tableObjectId": "string"
          }
        },
        "Slides.V1.Schema.DeleteTextRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "objectId": "string",
            "textRange": "+Slides.V1.Schema.Range"
          }
        },
        "Slides.V1.Schema.Dimension": {
          "prototype": {
            "magnitude": "number",
            "unit": "string"
          }
        },
        "Slides.V1.Schema.DuplicateObjectRequest": {
          "prototype": {
            "objectId": "string",
            "objectIds": "Object"
          }
        },
        "Slides.V1.Schema.DuplicateObjectResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.Group": {
          "prototype": {
            "children": "[+Slides.V1.Schema.PageElement]"
          }
        },
        "Slides.V1.Schema.GroupObjectsRequest": {
          "prototype": {
            "childrenObjectIds": "[string]",
            "groupObjectId": "string"
          }
        },
        "Slides.V1.Schema.GroupObjectsResponse": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.Image": {
          "prototype": {
            "contentUrl": "string",
            "imageProperties": "+Slides.V1.Schema.ImageProperties",
            "sourceUrl": "string"
          }
        },
        "Slides.V1.Schema.ImageProperties": {
          "prototype": {
            "brightness": "number",
            "contrast": "number",
            "cropProperties": "+Slides.V1.Schema.CropProperties",
            "link": "+Slides.V1.Schema.Link",
            "outline": "+Slides.V1.Schema.Outline",
            "recolor": "+Slides.V1.Schema.Recolor",
            "shadow": "+Slides.V1.Schema.Shadow",
            "transparency": "number"
          }
        },
        "Slides.V1.Schema.InsertTableColumnsRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "insertRight": "bool",
            "number": "Integer",
            "tableObjectId": "string"
          }
        },
        "Slides.V1.Schema.InsertTableRowsRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "insertBelow": "bool",
            "number": "Integer",
            "tableObjectId": "string"
          }
        },
        "Slides.V1.Schema.InsertTextRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "insertionIndex": "Integer",
            "objectId": "string",
            "text": "string"
          }
        },
        "Slides.V1.Schema.LayoutPlaceholderIdMapping": {
          "prototype": {
            "layoutPlaceholder": "+Slides.V1.Schema.Placeholder",
            "layoutPlaceholderObjectId": "string",
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.LayoutProperties": {
          "prototype": {
            "displayName": "string",
            "masterObjectId": "string",
            "name": "string"
          }
        },
        "Slides.V1.Schema.LayoutReference": {
          "prototype": {
            "layoutId": "string",
            "predefinedLayout": "string"
          }
        },
        "Slides.V1.Schema.Line": {
          "prototype": {
            "lineCategory": "string",
            "lineProperties": "+Slides.V1.Schema.LineProperties",
            "lineType": "string"
          }
        },
        "Slides.V1.Schema.LineConnection": {
          "prototype": {
            "connectedObjectId": "string",
            "connectionSiteIndex": "Integer"
          }
        },
        "Slides.V1.Schema.LineFill": {
          "prototype": {
            "solidFill": "+Slides.V1.Schema.SolidFill"
          }
        },
        "Slides.V1.Schema.LineProperties": {
          "prototype": {
            "dashStyle": "string",
            "endArrow": "string",
            "endConnection": "+Slides.V1.Schema.LineConnection",
            "lineFill": "+Slides.V1.Schema.LineFill",
            "link": "+Slides.V1.Schema.Link",
            "startArrow": "string",
            "startConnection": "+Slides.V1.Schema.LineConnection",
            "weight": "+Slides.V1.Schema.Dimension"
          }
        },
        "Slides.V1.Schema.Link": {
          "prototype": {
            "pageObjectId": "string",
            "relativeLink": "string",
            "slideIndex": "Integer",
            "url": "string"
          }
        },
        "Slides.V1.Schema.List": {
          "prototype": {
            "listId": "string",
            "nestingLevel": "Object"
          }
        },
        "Slides.V1.Schema.MasterProperties": {
          "prototype": {
            "displayName": "string"
          }
        },
        "Slides.V1.Schema.MergeTableCellsRequest": {
          "prototype": {
            "objectId": "string",
            "tableRange": "+Slides.V1.Schema.TableRange"
          }
        },
        "Slides.V1.Schema.NestingLevel": {
          "prototype": {
            "bulletStyle": "+Slides.V1.Schema.TextStyle"
          }
        },
        "Slides.V1.Schema.NotesProperties": {
          "prototype": {
            "speakerNotesObjectId": "string"
          }
        },
        "Slides.V1.Schema.OpaqueColor": {
          "prototype": {
            "rgbColor": "+Slides.V1.Schema.RgbColor",
            "themeColor": "string"
          }
        },
        "Slides.V1.Schema.OptionalColor": {
          "prototype": {
            "opaqueColor": "+Slides.V1.Schema.OpaqueColor"
          }
        },
        "Slides.V1.Schema.Outline": {
          "prototype": {
            "dashStyle": "string",
            "outlineFill": "+Slides.V1.Schema.OutlineFill",
            "propertyState": "string",
            "weight": "+Slides.V1.Schema.Dimension"
          }
        },
        "Slides.V1.Schema.OutlineFill": {
          "prototype": {
            "solidFill": "+Slides.V1.Schema.SolidFill"
          }
        },
        "Slides.V1.Schema.Page": {
          "prototype": {
            "layoutProperties": "+Slides.V1.Schema.LayoutProperties",
            "masterProperties": "+Slides.V1.Schema.MasterProperties",
            "notesProperties": "+Slides.V1.Schema.NotesProperties",
            "objectId": "string",
            "pageElements": "[+Slides.V1.Schema.PageElement]",
            "pageProperties": "+Slides.V1.Schema.PageProperties",
            "pageType": "string",
            "revisionId": "string",
            "slideProperties": "+Slides.V1.Schema.SlideProperties"
          }
        },
        "Slides.V1.Schema.PageBackgroundFill": {
          "prototype": {
            "propertyState": "string",
            "solidFill": "+Slides.V1.Schema.SolidFill",
            "stretchedPictureFill": "+Slides.V1.Schema.StretchedPictureFill"
          }
        },
        "Slides.V1.Schema.PageElement": {
          "prototype": {
            "description": "string",
            "elementGroup": "+Slides.V1.Schema.Group",
            "image": "+Slides.V1.Schema.Image",
            "line": "+Slides.V1.Schema.Line",
            "objectId": "string",
            "shape": "+Slides.V1.Schema.Shape",
            "sheetsChart": "+Slides.V1.Schema.SheetsChart",
            "size": "+Slides.V1.Schema.Size",
            "table": "+Slides.V1.Schema.Table",
            "title": "string",
            "transform": "+Slides.V1.Schema.AffineTransform",
            "video": "+Slides.V1.Schema.Video",
            "wordArt": "+Slides.V1.Schema.WordArt"
          }
        },
        "Slides.V1.Schema.PageElementProperties": {
          "prototype": {
            "pageObjectId": "string",
            "size": "+Slides.V1.Schema.Size",
            "transform": "+Slides.V1.Schema.AffineTransform"
          }
        },
        "Slides.V1.Schema.PageProperties": {
          "prototype": {
            "colorScheme": "+Slides.V1.Schema.ColorScheme",
            "pageBackgroundFill": "+Slides.V1.Schema.PageBackgroundFill"
          }
        },
        "Slides.V1.Schema.ParagraphMarker": {
          "prototype": {
            "bullet": "+Slides.V1.Schema.Bullet",
            "style": "+Slides.V1.Schema.ParagraphStyle"
          }
        },
        "Slides.V1.Schema.ParagraphStyle": {
          "prototype": {
            "alignment": "string",
            "direction": "string",
            "indentEnd": "+Slides.V1.Schema.Dimension",
            "indentFirstLine": "+Slides.V1.Schema.Dimension",
            "indentStart": "+Slides.V1.Schema.Dimension",
            "lineSpacing": "number",
            "spaceAbove": "+Slides.V1.Schema.Dimension",
            "spaceBelow": "+Slides.V1.Schema.Dimension",
            "spacingMode": "string"
          }
        },
        "Slides.V1.Schema.Placeholder": {
          "prototype": {
            "index": "Integer",
            "parentObjectId": "string",
            "type": "string"
          }
        },
        "Slides.V1.Schema.Presentation": {
          "prototype": {
            "layouts": "[+Slides.V1.Schema.Page]",
            "locale": "string",
            "masters": "[+Slides.V1.Schema.Page]",
            "notesMaster": "+Slides.V1.Schema.Page",
            "pageSize": "+Slides.V1.Schema.Size",
            "presentationId": "string",
            "revisionId": "string",
            "slides": "[+Slides.V1.Schema.Page]",
            "title": "string"
          }
        },
        "Slides.V1.Schema.Range": {
          "prototype": {
            "endIndex": "Integer",
            "startIndex": "Integer",
            "type": "string"
          }
        },
        "Slides.V1.Schema.Recolor": {
          "prototype": {
            "name": "string",
            "recolorStops": "[+Slides.V1.Schema.ColorStop]"
          }
        },
        "Slides.V1.Schema.RefreshSheetsChartRequest": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.ReplaceAllShapesWithImageRequest": {
          "prototype": {
            "containsText": "+Slides.V1.Schema.SubstringMatchCriteria",
            "imageReplaceMethod": "string",
            "imageUrl": "string",
            "pageObjectIds": "[string]",
            "replaceMethod": "string"
          }
        },
        "Slides.V1.Schema.ReplaceAllShapesWithImageResponse": {
          "prototype": {
            "occurrencesChanged": "Integer"
          }
        },
        "Slides.V1.Schema.ReplaceAllShapesWithSheetsChartRequest": {
          "prototype": {
            "chartId": "Integer",
            "containsText": "+Slides.V1.Schema.SubstringMatchCriteria",
            "linkingMode": "string",
            "pageObjectIds": "[string]",
            "spreadsheetId": "string"
          }
        },
        "Slides.V1.Schema.ReplaceAllShapesWithSheetsChartResponse": {
          "prototype": {
            "occurrencesChanged": "Integer"
          }
        },
        "Slides.V1.Schema.ReplaceAllTextRequest": {
          "prototype": {
            "containsText": "+Slides.V1.Schema.SubstringMatchCriteria",
            "pageObjectIds": "[string]",
            "replaceText": "string"
          }
        },
        "Slides.V1.Schema.ReplaceAllTextResponse": {
          "prototype": {
            "occurrencesChanged": "Integer"
          }
        },
        "Slides.V1.Schema.ReplaceImageRequest": {
          "prototype": {
            "imageObjectId": "string",
            "imageReplaceMethod": "string",
            "url": "string"
          }
        },
        "Slides.V1.Schema.Request": {
          "prototype": {
            "createImage": "+Slides.V1.Schema.CreateImageRequest",
            "createLine": "+Slides.V1.Schema.CreateLineRequest",
            "createParagraphBullets": "+Slides.V1.Schema.CreateParagraphBulletsRequest",
            "createShape": "+Slides.V1.Schema.CreateShapeRequest",
            "createSheetsChart": "+Slides.V1.Schema.CreateSheetsChartRequest",
            "createSlide": "+Slides.V1.Schema.CreateSlideRequest",
            "createTable": "+Slides.V1.Schema.CreateTableRequest",
            "createVideo": "+Slides.V1.Schema.CreateVideoRequest",
            "deleteObject": "+Slides.V1.Schema.DeleteObjectRequest",
            "deleteParagraphBullets": "+Slides.V1.Schema.DeleteParagraphBulletsRequest",
            "deleteTableColumn": "+Slides.V1.Schema.DeleteTableColumnRequest",
            "deleteTableRow": "+Slides.V1.Schema.DeleteTableRowRequest",
            "deleteText": "+Slides.V1.Schema.DeleteTextRequest",
            "duplicateObject": "+Slides.V1.Schema.DuplicateObjectRequest",
            "groupObjects": "+Slides.V1.Schema.GroupObjectsRequest",
            "insertTableColumns": "+Slides.V1.Schema.InsertTableColumnsRequest",
            "insertTableRows": "+Slides.V1.Schema.InsertTableRowsRequest",
            "insertText": "+Slides.V1.Schema.InsertTextRequest",
            "mergeTableCells": "+Slides.V1.Schema.MergeTableCellsRequest",
            "refreshSheetsChart": "+Slides.V1.Schema.RefreshSheetsChartRequest",
            "replaceAllShapesWithImage": "+Slides.V1.Schema.ReplaceAllShapesWithImageRequest",
            "replaceAllShapesWithSheetsChart": "+Slides.V1.Schema.ReplaceAllShapesWithSheetsChartRequest",
            "replaceAllText": "+Slides.V1.Schema.ReplaceAllTextRequest",
            "replaceImage": "+Slides.V1.Schema.ReplaceImageRequest",
            "rerouteLine": "+Slides.V1.Schema.RerouteLineRequest",
            "ungroupObjects": "+Slides.V1.Schema.UngroupObjectsRequest",
            "unmergeTableCells": "+Slides.V1.Schema.UnmergeTableCellsRequest",
            "updateImageProperties": "+Slides.V1.Schema.UpdateImagePropertiesRequest",
            "updateLineCategory": "+Slides.V1.Schema.UpdateLineCategoryRequest",
            "updateLineProperties": "+Slides.V1.Schema.UpdateLinePropertiesRequest",
            "updatePageElementAltText": "+Slides.V1.Schema.UpdatePageElementAltTextRequest",
            "updatePageElementTransform": "+Slides.V1.Schema.UpdatePageElementTransformRequest",
            "updatePageElementsZOrder": "+Slides.V1.Schema.UpdatePageElementsZOrderRequest",
            "updatePageProperties": "+Slides.V1.Schema.UpdatePagePropertiesRequest",
            "updateParagraphStyle": "+Slides.V1.Schema.UpdateParagraphStyleRequest",
            "updateShapeProperties": "+Slides.V1.Schema.UpdateShapePropertiesRequest",
            "updateSlidesPosition": "+Slides.V1.Schema.UpdateSlidesPositionRequest",
            "updateTableBorderProperties": "+Slides.V1.Schema.UpdateTableBorderPropertiesRequest",
            "updateTableCellProperties": "+Slides.V1.Schema.UpdateTableCellPropertiesRequest",
            "updateTableColumnProperties": "+Slides.V1.Schema.UpdateTableColumnPropertiesRequest",
            "updateTableRowProperties": "+Slides.V1.Schema.UpdateTableRowPropertiesRequest",
            "updateTextStyle": "+Slides.V1.Schema.UpdateTextStyleRequest",
            "updateVideoProperties": "+Slides.V1.Schema.UpdateVideoPropertiesRequest"
          }
        },
        "Slides.V1.Schema.RerouteLineRequest": {
          "prototype": {
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.Response": {
          "prototype": {
            "createImage": "+Slides.V1.Schema.CreateImageResponse",
            "createLine": "+Slides.V1.Schema.CreateLineResponse",
            "createShape": "+Slides.V1.Schema.CreateShapeResponse",
            "createSheetsChart": "+Slides.V1.Schema.CreateSheetsChartResponse",
            "createSlide": "+Slides.V1.Schema.CreateSlideResponse",
            "createTable": "+Slides.V1.Schema.CreateTableResponse",
            "createVideo": "+Slides.V1.Schema.CreateVideoResponse",
            "duplicateObject": "+Slides.V1.Schema.DuplicateObjectResponse",
            "groupObjects": "+Slides.V1.Schema.GroupObjectsResponse",
            "replaceAllShapesWithImage": "+Slides.V1.Schema.ReplaceAllShapesWithImageResponse",
            "replaceAllShapesWithSheetsChart": "+Slides.V1.Schema.ReplaceAllShapesWithSheetsChartResponse",
            "replaceAllText": "+Slides.V1.Schema.ReplaceAllTextResponse"
          }
        },
        "Slides.V1.Schema.RgbColor": {
          "prototype": {
            "blue": "number",
            "green": "number",
            "red": "number"
          }
        },
        "Slides.V1.Schema.Shadow": {
          "prototype": {
            "alignment": "string",
            "alpha": "number",
            "blurRadius": "+Slides.V1.Schema.Dimension",
            "color": "+Slides.V1.Schema.OpaqueColor",
            "propertyState": "string",
            "rotateWithShape": "bool",
            "transform": "+Slides.V1.Schema.AffineTransform",
            "type": "string"
          }
        },
        "Slides.V1.Schema.Shape": {
          "prototype": {
            "placeholder": "+Slides.V1.Schema.Placeholder",
            "shapeProperties": "+Slides.V1.Schema.ShapeProperties",
            "shapeType": "string",
            "text": "+Slides.V1.Schema.TextContent"
          }
        },
        "Slides.V1.Schema.ShapeBackgroundFill": {
          "prototype": {
            "propertyState": "string",
            "solidFill": "+Slides.V1.Schema.SolidFill"
          }
        },
        "Slides.V1.Schema.ShapeProperties": {
          "prototype": {
            "contentAlignment": "string",
            "link": "+Slides.V1.Schema.Link",
            "outline": "+Slides.V1.Schema.Outline",
            "shadow": "+Slides.V1.Schema.Shadow",
            "shapeBackgroundFill": "+Slides.V1.Schema.ShapeBackgroundFill"
          }
        },
        "Slides.V1.Schema.SheetsChart": {
          "prototype": {
            "chartId": "Integer",
            "contentUrl": "string",
            "sheetsChartProperties": "+Slides.V1.Schema.SheetsChartProperties",
            "spreadsheetId": "string"
          }
        },
        "Slides.V1.Schema.SheetsChartProperties": {
          "prototype": {
            "chartImageProperties": "+Slides.V1.Schema.ImageProperties"
          }
        },
        "Slides.V1.Schema.Size": {
          "prototype": {
            "height": "+Slides.V1.Schema.Dimension",
            "width": "+Slides.V1.Schema.Dimension"
          }
        },
        "Slides.V1.Schema.SlideProperties": {
          "prototype": {
            "layoutObjectId": "string",
            "masterObjectId": "string",
            "notesPage": "+Slides.V1.Schema.Page"
          }
        },
        "Slides.V1.Schema.SolidFill": {
          "prototype": {
            "alpha": "number",
            "color": "+Slides.V1.Schema.OpaqueColor"
          }
        },
        "Slides.V1.Schema.StretchedPictureFill": {
          "prototype": {
            "contentUrl": "string",
            "size": "+Slides.V1.Schema.Size"
          }
        },
        "Slides.V1.Schema.SubstringMatchCriteria": {
          "prototype": {
            "matchCase": "bool",
            "text": "string"
          }
        },
        "Slides.V1.Schema.Table": {
          "prototype": {
            "columns": "Integer",
            "horizontalBorderRows": "[+Slides.V1.Schema.TableBorderRow]",
            "rows": "Integer",
            "tableColumns": "[+Slides.V1.Schema.TableColumnProperties]",
            "tableRows": "[+Slides.V1.Schema.TableRow]",
            "verticalBorderRows": "[+Slides.V1.Schema.TableBorderRow]"
          }
        },
        "Slides.V1.Schema.TableBorderCell": {
          "prototype": {
            "location": "+Slides.V1.Schema.TableCellLocation",
            "tableBorderProperties": "+Slides.V1.Schema.TableBorderProperties"
          }
        },
        "Slides.V1.Schema.TableBorderFill": {
          "prototype": {
            "solidFill": "+Slides.V1.Schema.SolidFill"
          }
        },
        "Slides.V1.Schema.TableBorderProperties": {
          "prototype": {
            "dashStyle": "string",
            "tableBorderFill": "+Slides.V1.Schema.TableBorderFill",
            "weight": "+Slides.V1.Schema.Dimension"
          }
        },
        "Slides.V1.Schema.TableBorderRow": {
          "prototype": {
            "tableBorderCells": "[+Slides.V1.Schema.TableBorderCell]"
          }
        },
        "Slides.V1.Schema.TableCell": {
          "prototype": {
            "columnSpan": "Integer",
            "location": "+Slides.V1.Schema.TableCellLocation",
            "rowSpan": "Integer",
            "tableCellProperties": "+Slides.V1.Schema.TableCellProperties",
            "text": "+Slides.V1.Schema.TextContent"
          }
        },
        "Slides.V1.Schema.TableCellBackgroundFill": {
          "prototype": {
            "propertyState": "string",
            "solidFill": "+Slides.V1.Schema.SolidFill"
          }
        },
        "Slides.V1.Schema.TableCellLocation": {
          "prototype": {
            "columnIndex": "Integer",
            "rowIndex": "Integer"
          }
        },
        "Slides.V1.Schema.TableCellProperties": {
          "prototype": {
            "contentAlignment": "string",
            "tableCellBackgroundFill": "+Slides.V1.Schema.TableCellBackgroundFill"
          }
        },
        "Slides.V1.Schema.TableColumnProperties": {
          "prototype": {
            "columnWidth": "+Slides.V1.Schema.Dimension"
          }
        },
        "Slides.V1.Schema.TableRange": {
          "prototype": {
            "columnSpan": "Integer",
            "location": "+Slides.V1.Schema.TableCellLocation",
            "rowSpan": "Integer"
          }
        },
        "Slides.V1.Schema.TableRow": {
          "prototype": {
            "rowHeight": "+Slides.V1.Schema.Dimension",
            "tableCells": "[+Slides.V1.Schema.TableCell]",
            "tableRowProperties": "+Slides.V1.Schema.TableRowProperties"
          }
        },
        "Slides.V1.Schema.TableRowProperties": {
          "prototype": {
            "minRowHeight": "+Slides.V1.Schema.Dimension"
          }
        },
        "Slides.V1.Schema.TextContent": {
          "prototype": {
            "lists": "Object",
            "textElements": "[+Slides.V1.Schema.TextElement]"
          }
        },
        "Slides.V1.Schema.TextElement": {
          "prototype": {
            "autoText": "+Slides.V1.Schema.AutoText",
            "endIndex": "Integer",
            "paragraphMarker": "+Slides.V1.Schema.ParagraphMarker",
            "startIndex": "Integer",
            "textRun": "+Slides.V1.Schema.TextRun"
          }
        },
        "Slides.V1.Schema.TextRun": {
          "prototype": {
            "content": "string",
            "style": "+Slides.V1.Schema.TextStyle"
          }
        },
        "Slides.V1.Schema.TextStyle": {
          "prototype": {
            "backgroundColor": "+Slides.V1.Schema.OptionalColor",
            "baselineOffset": "string",
            "bold": "bool",
            "fontFamily": "string",
            "fontSize": "+Slides.V1.Schema.Dimension",
            "foregroundColor": "+Slides.V1.Schema.OptionalColor",
            "italic": "bool",
            "link": "+Slides.V1.Schema.Link",
            "smallCaps": "bool",
            "strikethrough": "bool",
            "underline": "bool",
            "weightedFontFamily": "+Slides.V1.Schema.WeightedFontFamily"
          }
        },
        "Slides.V1.Schema.ThemeColorPair": {
          "prototype": {
            "color": "+Slides.V1.Schema.RgbColor",
            "type": "string"
          }
        },
        "Slides.V1.Schema.Thumbnail": {
          "prototype": {
            "contentUrl": "string",
            "height": "Integer",
            "width": "Integer"
          }
        },
        "Slides.V1.Schema.UngroupObjectsRequest": {
          "prototype": {
            "objectIds": "[string]"
          }
        },
        "Slides.V1.Schema.UnmergeTableCellsRequest": {
          "prototype": {
            "objectId": "string",
            "tableRange": "+Slides.V1.Schema.TableRange"
          }
        },
        "Slides.V1.Schema.UpdateImagePropertiesRequest": {
          "prototype": {
            "fields": "string",
            "imageProperties": "+Slides.V1.Schema.ImageProperties",
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.UpdateLineCategoryRequest": {
          "prototype": {
            "lineCategory": "string",
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.UpdateLinePropertiesRequest": {
          "prototype": {
            "fields": "string",
            "lineProperties": "+Slides.V1.Schema.LineProperties",
            "objectId": "string"
          }
        },
        "Slides.V1.Schema.UpdatePageElementAltTextRequest": {
          "prototype": {
            "description": "string",
            "objectId": "string",
            "title": "string"
          }
        },
        "Slides.V1.Schema.UpdatePageElementTransformRequest": {
          "prototype": {
            "applyMode": "string",
            "objectId": "string",
            "transform": "+Slides.V1.Schema.AffineTransform"
          }
        },
        "Slides.V1.Schema.UpdatePageElementsZOrderRequest": {
          "prototype": {
            "operation": "string",
            "pageElementObjectIds": "[string]"
          }
        },
        "Slides.V1.Schema.UpdatePagePropertiesRequest": {
          "prototype": {
            "fields": "string",
            "objectId": "string",
            "pageProperties": "+Slides.V1.Schema.PageProperties"
          }
        },
        "Slides.V1.Schema.UpdateParagraphStyleRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "fields": "string",
            "objectId": "string",
            "style": "+Slides.V1.Schema.ParagraphStyle",
            "textRange": "+Slides.V1.Schema.Range"
          }
        },
        "Slides.V1.Schema.UpdateShapePropertiesRequest": {
          "prototype": {
            "fields": "string",
            "objectId": "string",
            "shapeProperties": "+Slides.V1.Schema.ShapeProperties"
          }
        },
        "Slides.V1.Schema.UpdateSlidesPositionRequest": {
          "prototype": {
            "insertionIndex": "Integer",
            "slideObjectIds": "[string]"
          }
        },
        "Slides.V1.Schema.UpdateTableBorderPropertiesRequest": {
          "prototype": {
            "borderPosition": "string",
            "fields": "string",
            "objectId": "string",
            "tableBorderProperties": "+Slides.V1.Schema.TableBorderProperties",
            "tableRange": "+Slides.V1.Schema.TableRange"
          }
        },
        "Slides.V1.Schema.UpdateTableCellPropertiesRequest": {
          "prototype": {
            "fields": "string",
            "objectId": "string",
            "tableCellProperties": "+Slides.V1.Schema.TableCellProperties",
            "tableRange": "+Slides.V1.Schema.TableRange"
          }
        },
        "Slides.V1.Schema.UpdateTableColumnPropertiesRequest": {
          "prototype": {
            "columnIndices": "[number]",
            "fields": "string",
            "objectId": "string",
            "tableColumnProperties": "+Slides.V1.Schema.TableColumnProperties"
          }
        },
        "Slides.V1.Schema.UpdateTableRowPropertiesRequest": {
          "prototype": {
            "fields": "string",
            "objectId": "string",
            "rowIndices": "[number]",
            "tableRowProperties": "+Slides.V1.Schema.TableRowProperties"
          }
        },
        "Slides.V1.Schema.UpdateTextStyleRequest": {
          "prototype": {
            "cellLocation": "+Slides.V1.Schema.TableCellLocation",
            "fields": "string",
            "objectId": "string",
            "style": "+Slides.V1.Schema.TextStyle",
            "textRange": "+Slides.V1.Schema.Range"
          }
        },
        "Slides.V1.Schema.UpdateVideoPropertiesRequest": {
          "prototype": {
            "fields": "string",
            "objectId": "string",
            "videoProperties": "+Slides.V1.Schema.VideoProperties"
          }
        },
        "Slides.V1.Schema.Video": {
          "prototype": {
            "id": "string",
            "source": "string",
            "url": "string",
            "videoProperties": "+Slides.V1.Schema.VideoProperties"
          }
        },
        "Slides.V1.Schema.VideoProperties": {
          "prototype": {
            "autoPlay": "bool",
            "end": "Integer",
            "mute": "bool",
            "outline": "+Slides.V1.Schema.Outline",
            "start": "Integer"
          }
        },
        "Slides.V1.Schema.WeightedFontFamily": {
          "prototype": {
            "fontFamily": "string",
            "weight": "Integer"
          }
        },
        "Slides.V1.Schema.WordArt": {
          "prototype": {
            "renderedText": "string"
          }
        },
        "Slides.V1.Schema.WriteControl": {
          "prototype": {
            "requiredRevisionId": "string"
          }
        }
      }
    },
    {
      "!name": "Tasks",
      "Tasks": {
        "newTask": "fn() -> +Tasks.V1.Schema.Task",
        "newTaskLinks": "fn() -> +Tasks.V1.Schema.TaskLinks",
        "newTaskList": "fn() -> +Tasks.V1.Schema.TaskList",
        "Tasklists": "+Tasks.V1.Collection.TasklistsCollection",
        "Tasks": "+Tasks.V1.Collection.TasksCollection"
      },
      "!define": {
        "Tasks.V1.Collection.TasklistsCollection": {
          "prototype": {
            "get": "fn(tasklist: string) -> +Tasks.V1.Schema.TaskList",
            "insert": "fn(resource: Tasks.V1.Schema.TaskList) -> +Tasks.V1.Schema.TaskList",
            "list": "fn(optionalArgs: object) -> +Tasks.V1.Schema.TaskLists",
            "patch": "fn(resource: Tasks.V1.Schema.TaskList, tasklist: string) -> +Tasks.V1.Schema.TaskList",
            "remove": "fn(tasklist: string)",
            "update": "fn(resource: Tasks.V1.Schema.TaskList, tasklist: string) -> +Tasks.V1.Schema.TaskList"
          }
        },
        "Tasks.V1.Collection.TasksCollection": {
          "prototype": {
            "clear": "fn(tasklist: string)",
            "get": "fn(tasklist: string, task: string) -> +Tasks.V1.Schema.Task",
            "insert": "fn(resource: Tasks.V1.Schema.Task, tasklist: string, optionalArgs: object) -> +Tasks.V1.Schema.Task",
            "list": "fn(tasklist: string, optionalArgs: object) -> +Tasks.V1.Schema.Tasks",
            "move": "fn(tasklist: string, task: string, optionalArgs: object) -> +Tasks.V1.Schema.Task",
            "patch": "fn(resource: Tasks.V1.Schema.Task, tasklist: string, task: string) -> +Tasks.V1.Schema.Task",
            "remove": "fn(tasklist: string, task: string)",
            "update": "fn(resource: Tasks.V1.Schema.Task, tasklist: string, task: string) -> +Tasks.V1.Schema.Task"
          }
        },
        "Tasks.V1.Schema.Task": {
          "prototype": {
            "completed": "string",
            "deleted": "bool",
            "due": "string",
            "etag": "string",
            "hidden": "bool",
            "id": "string",
            "kind": "string",
            "links": "[+Tasks.V1.Schema.TaskLinks]",
            "notes": "string",
            "parent": "string",
            "position": "string",
            "selfLink": "string",
            "status": "string",
            "title": "string",
            "updated": "string"
          }
        },
        "Tasks.V1.Schema.TaskLinks": {
          "prototype": {
            "description": "string",
            "link": "string",
            "type": "string"
          }
        },
        "Tasks.V1.Schema.TaskList": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "selfLink": "string",
            "title": "string",
            "updated": "string"
          }
        },
        "Tasks.V1.Schema.TaskLists": {
          "prototype": {
            "etag": "string",
            "items": "[+Tasks.V1.Schema.TaskList]",
            "kind": "string",
            "nextPageToken": "string"
          }
        },
        "Tasks.V1.Schema.Tasks": {
          "prototype": {
            "etag": "string",
            "items": "[+Tasks.V1.Schema.Task]",
            "kind": "string",
            "nextPageToken": "string"
          }
        }
      }
    },
    {
      "!name": "YouTube",
      "YouTube": {
        "newAccessPolicy": "fn() -> +Youtube.V3.Schema.AccessPolicy",
        "newActivity": "fn() -> +Youtube.V3.Schema.Activity",
        "newActivityContentDetails": "fn() -> +Youtube.V3.Schema.ActivityContentDetails",
        "newActivityContentDetailsBulletin": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsBulletin",
        "newActivityContentDetailsChannelItem": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsChannelItem",
        "newActivityContentDetailsComment": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsComment",
        "newActivityContentDetailsFavorite": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsFavorite",
        "newActivityContentDetailsLike": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsLike",
        "newActivityContentDetailsPlaylistItem": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsPlaylistItem",
        "newActivityContentDetailsPromotedItem": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsPromotedItem",
        "newActivityContentDetailsRecommendation": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsRecommendation",
        "newActivityContentDetailsSocial": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsSocial",
        "newActivityContentDetailsSubscription": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsSubscription",
        "newActivityContentDetailsUpload": "fn() -> +Youtube.V3.Schema.ActivityContentDetailsUpload",
        "newActivitySnippet": "fn() -> +Youtube.V3.Schema.ActivitySnippet",
        "newCaption": "fn() -> +Youtube.V3.Schema.Caption",
        "newCaptionSnippet": "fn() -> +Youtube.V3.Schema.CaptionSnippet",
        "newCdnSettings": "fn() -> +Youtube.V3.Schema.CdnSettings",
        "newChannel": "fn() -> +Youtube.V3.Schema.Channel",
        "newChannelAuditDetails": "fn() -> +Youtube.V3.Schema.ChannelAuditDetails",
        "newChannelBannerResource": "fn() -> +Youtube.V3.Schema.ChannelBannerResource",
        "newChannelBrandingSettings": "fn() -> +Youtube.V3.Schema.ChannelBrandingSettings",
        "newChannelContentDetails": "fn() -> +Youtube.V3.Schema.ChannelContentDetails",
        "newChannelContentDetailsRelatedPlaylists": "fn() -> +Youtube.V3.Schema.ChannelContentDetailsRelatedPlaylists",
        "newChannelContentOwnerDetails": "fn() -> +Youtube.V3.Schema.ChannelContentOwnerDetails",
        "newChannelConversionPing": "fn() -> +Youtube.V3.Schema.ChannelConversionPing",
        "newChannelConversionPings": "fn() -> +Youtube.V3.Schema.ChannelConversionPings",
        "newChannelLocalization": "fn() -> +Youtube.V3.Schema.ChannelLocalization",
        "newChannelProfileDetails": "fn() -> +Youtube.V3.Schema.ChannelProfileDetails",
        "newChannelSection": "fn() -> +Youtube.V3.Schema.ChannelSection",
        "newChannelSectionContentDetails": "fn() -> +Youtube.V3.Schema.ChannelSectionContentDetails",
        "newChannelSectionLocalization": "fn() -> +Youtube.V3.Schema.ChannelSectionLocalization",
        "newChannelSectionSnippet": "fn() -> +Youtube.V3.Schema.ChannelSectionSnippet",
        "newChannelSectionTargeting": "fn() -> +Youtube.V3.Schema.ChannelSectionTargeting",
        "newChannelSettings": "fn() -> +Youtube.V3.Schema.ChannelSettings",
        "newChannelSnippet": "fn() -> +Youtube.V3.Schema.ChannelSnippet",
        "newChannelStatistics": "fn() -> +Youtube.V3.Schema.ChannelStatistics",
        "newChannelStatus": "fn() -> +Youtube.V3.Schema.ChannelStatus",
        "newChannelTopicDetails": "fn() -> +Youtube.V3.Schema.ChannelTopicDetails",
        "newComment": "fn() -> +Youtube.V3.Schema.Comment",
        "newCommentSnippet": "fn() -> +Youtube.V3.Schema.CommentSnippet",
        "newCommentThread": "fn() -> +Youtube.V3.Schema.CommentThread",
        "newCommentThreadReplies": "fn() -> +Youtube.V3.Schema.CommentThreadReplies",
        "newCommentThreadSnippet": "fn() -> +Youtube.V3.Schema.CommentThreadSnippet",
        "newContentRating": "fn() -> +Youtube.V3.Schema.ContentRating",
        "newGeoPoint": "fn() -> +Youtube.V3.Schema.GeoPoint",
        "newImageSettings": "fn() -> +Youtube.V3.Schema.ImageSettings",
        "newIngestionInfo": "fn() -> +Youtube.V3.Schema.IngestionInfo",
        "newInvideoBranding": "fn() -> +Youtube.V3.Schema.InvideoBranding",
        "newInvideoPosition": "fn() -> +Youtube.V3.Schema.InvideoPosition",
        "newInvideoPromotion": "fn() -> +Youtube.V3.Schema.InvideoPromotion",
        "newInvideoTiming": "fn() -> +Youtube.V3.Schema.InvideoTiming",
        "newLanguageTag": "fn() -> +Youtube.V3.Schema.LanguageTag",
        "newLiveBroadcast": "fn() -> +Youtube.V3.Schema.LiveBroadcast",
        "newLiveBroadcastContentDetails": "fn() -> +Youtube.V3.Schema.LiveBroadcastContentDetails",
        "newLiveBroadcastSnippet": "fn() -> +Youtube.V3.Schema.LiveBroadcastSnippet",
        "newLiveBroadcastStatistics": "fn() -> +Youtube.V3.Schema.LiveBroadcastStatistics",
        "newLiveBroadcastStatus": "fn() -> +Youtube.V3.Schema.LiveBroadcastStatus",
        "newLiveChatBan": "fn() -> +Youtube.V3.Schema.LiveChatBan",
        "newLiveChatBanSnippet": "fn() -> +Youtube.V3.Schema.LiveChatBanSnippet",
        "newLiveChatFanFundingEventDetails": "fn() -> +Youtube.V3.Schema.LiveChatFanFundingEventDetails",
        "newLiveChatMessage": "fn() -> +Youtube.V3.Schema.LiveChatMessage",
        "newLiveChatMessageAuthorDetails": "fn() -> +Youtube.V3.Schema.LiveChatMessageAuthorDetails",
        "newLiveChatMessageDeletedDetails": "fn() -> +Youtube.V3.Schema.LiveChatMessageDeletedDetails",
        "newLiveChatMessageRetractedDetails": "fn() -> +Youtube.V3.Schema.LiveChatMessageRetractedDetails",
        "newLiveChatMessageSnippet": "fn() -> +Youtube.V3.Schema.LiveChatMessageSnippet",
        "newLiveChatModerator": "fn() -> +Youtube.V3.Schema.LiveChatModerator",
        "newLiveChatModeratorSnippet": "fn() -> +Youtube.V3.Schema.LiveChatModeratorSnippet",
        "newLiveChatPollClosedDetails": "fn() -> +Youtube.V3.Schema.LiveChatPollClosedDetails",
        "newLiveChatPollEditedDetails": "fn() -> +Youtube.V3.Schema.LiveChatPollEditedDetails",
        "newLiveChatPollItem": "fn() -> +Youtube.V3.Schema.LiveChatPollItem",
        "newLiveChatPollOpenedDetails": "fn() -> +Youtube.V3.Schema.LiveChatPollOpenedDetails",
        "newLiveChatPollVotedDetails": "fn() -> +Youtube.V3.Schema.LiveChatPollVotedDetails",
        "newLiveChatSuperChatDetails": "fn() -> +Youtube.V3.Schema.LiveChatSuperChatDetails",
        "newLiveChatSuperStickerDetails": "fn() -> +Youtube.V3.Schema.LiveChatSuperStickerDetails",
        "newLiveChatTextMessageDetails": "fn() -> +Youtube.V3.Schema.LiveChatTextMessageDetails",
        "newLiveChatUserBannedMessageDetails": "fn() -> +Youtube.V3.Schema.LiveChatUserBannedMessageDetails",
        "newLiveStream": "fn() -> +Youtube.V3.Schema.LiveStream",
        "newLiveStreamConfigurationIssue": "fn() -> +Youtube.V3.Schema.LiveStreamConfigurationIssue",
        "newLiveStreamContentDetails": "fn() -> +Youtube.V3.Schema.LiveStreamContentDetails",
        "newLiveStreamHealthStatus": "fn() -> +Youtube.V3.Schema.LiveStreamHealthStatus",
        "newLiveStreamSnippet": "fn() -> +Youtube.V3.Schema.LiveStreamSnippet",
        "newLiveStreamStatus": "fn() -> +Youtube.V3.Schema.LiveStreamStatus",
        "newLocalizedProperty": "fn() -> +Youtube.V3.Schema.LocalizedProperty",
        "newLocalizedString": "fn() -> +Youtube.V3.Schema.LocalizedString",
        "newMonitorStreamInfo": "fn() -> +Youtube.V3.Schema.MonitorStreamInfo",
        "newPlaylist": "fn() -> +Youtube.V3.Schema.Playlist",
        "newPlaylistContentDetails": "fn() -> +Youtube.V3.Schema.PlaylistContentDetails",
        "newPlaylistItem": "fn() -> +Youtube.V3.Schema.PlaylistItem",
        "newPlaylistItemContentDetails": "fn() -> +Youtube.V3.Schema.PlaylistItemContentDetails",
        "newPlaylistItemSnippet": "fn() -> +Youtube.V3.Schema.PlaylistItemSnippet",
        "newPlaylistItemStatus": "fn() -> +Youtube.V3.Schema.PlaylistItemStatus",
        "newPlaylistLocalization": "fn() -> +Youtube.V3.Schema.PlaylistLocalization",
        "newPlaylistPlayer": "fn() -> +Youtube.V3.Schema.PlaylistPlayer",
        "newPlaylistSnippet": "fn() -> +Youtube.V3.Schema.PlaylistSnippet",
        "newPlaylistStatus": "fn() -> +Youtube.V3.Schema.PlaylistStatus",
        "newPromotedItem": "fn() -> +Youtube.V3.Schema.PromotedItem",
        "newPromotedItemId": "fn() -> +Youtube.V3.Schema.PromotedItemId",
        "newPropertyValue": "fn() -> +Youtube.V3.Schema.PropertyValue",
        "newResourceId": "fn() -> +Youtube.V3.Schema.ResourceId",
        "newSubscription": "fn() -> +Youtube.V3.Schema.Subscription",
        "newSubscriptionContentDetails": "fn() -> +Youtube.V3.Schema.SubscriptionContentDetails",
        "newSubscriptionSnippet": "fn() -> +Youtube.V3.Schema.SubscriptionSnippet",
        "newSubscriptionSubscriberSnippet": "fn() -> +Youtube.V3.Schema.SubscriptionSubscriberSnippet",
        "newSuperStickerMetadata": "fn() -> +Youtube.V3.Schema.SuperStickerMetadata",
        "newThumbnail": "fn() -> +Youtube.V3.Schema.Thumbnail",
        "newThumbnailDetails": "fn() -> +Youtube.V3.Schema.ThumbnailDetails",
        "newVideo": "fn() -> +Youtube.V3.Schema.Video",
        "newVideoAbuseReport": "fn() -> +Youtube.V3.Schema.VideoAbuseReport",
        "newVideoAgeGating": "fn() -> +Youtube.V3.Schema.VideoAgeGating",
        "newVideoContentDetails": "fn() -> +Youtube.V3.Schema.VideoContentDetails",
        "newVideoContentDetailsRegionRestriction": "fn() -> +Youtube.V3.Schema.VideoContentDetailsRegionRestriction",
        "newVideoFileDetails": "fn() -> +Youtube.V3.Schema.VideoFileDetails",
        "newVideoFileDetailsAudioStream": "fn() -> +Youtube.V3.Schema.VideoFileDetailsAudioStream",
        "newVideoFileDetailsVideoStream": "fn() -> +Youtube.V3.Schema.VideoFileDetailsVideoStream",
        "newVideoLiveStreamingDetails": "fn() -> +Youtube.V3.Schema.VideoLiveStreamingDetails",
        "newVideoLocalization": "fn() -> +Youtube.V3.Schema.VideoLocalization",
        "newVideoMonetizationDetails": "fn() -> +Youtube.V3.Schema.VideoMonetizationDetails",
        "newVideoPlayer": "fn() -> +Youtube.V3.Schema.VideoPlayer",
        "newVideoProcessingDetails": "fn() -> +Youtube.V3.Schema.VideoProcessingDetails",
        "newVideoProcessingDetailsProcessingProgress": "fn() -> +Youtube.V3.Schema.VideoProcessingDetailsProcessingProgress",
        "newVideoProjectDetails": "fn() -> +Youtube.V3.Schema.VideoProjectDetails",
        "newVideoRecordingDetails": "fn() -> +Youtube.V3.Schema.VideoRecordingDetails",
        "newVideoSnippet": "fn() -> +Youtube.V3.Schema.VideoSnippet",
        "newVideoStatistics": "fn() -> +Youtube.V3.Schema.VideoStatistics",
        "newVideoStatus": "fn() -> +Youtube.V3.Schema.VideoStatus",
        "newVideoSuggestions": "fn() -> +Youtube.V3.Schema.VideoSuggestions",
        "newVideoSuggestionsTagSuggestion": "fn() -> +Youtube.V3.Schema.VideoSuggestionsTagSuggestion",
        "newVideoTopicDetails": "fn() -> +Youtube.V3.Schema.VideoTopicDetails",
        "newWatchSettings": "fn() -> +Youtube.V3.Schema.WatchSettings",
        "Activities": "+Youtube.V3.Collection.ActivitiesCollection",
        "Captions": "+Youtube.V3.Collection.CaptionsCollection",
        "ChannelBanners": "+Youtube.V3.Collection.ChannelBannersCollection",
        "ChannelSections": "+Youtube.V3.Collection.ChannelSectionsCollection",
        "Channels": "+Youtube.V3.Collection.ChannelsCollection",
        "CommentThreads": "+Youtube.V3.Collection.CommentThreadsCollection",
        "Comments": "+Youtube.V3.Collection.CommentsCollection",
        "GuideCategories": "+Youtube.V3.Collection.GuideCategoriesCollection",
        "I18nLanguages": "+Youtube.V3.Collection.I18nLanguagesCollection",
        "I18nRegions": "+Youtube.V3.Collection.I18nRegionsCollection",
        "LiveBroadcasts": "+Youtube.V3.Collection.LiveBroadcastsCollection",
        "LiveChatBans": "+Youtube.V3.Collection.LiveChatBansCollection",
        "LiveChatMessages": "+Youtube.V3.Collection.LiveChatMessagesCollection",
        "LiveChatModerators": "+Youtube.V3.Collection.LiveChatModeratorsCollection",
        "LiveStreams": "+Youtube.V3.Collection.LiveStreamsCollection",
        "PlaylistItems": "+Youtube.V3.Collection.PlaylistItemsCollection",
        "Playlists": "+Youtube.V3.Collection.PlaylistsCollection",
        "Search": "+Youtube.V3.Collection.SearchCollection",
        "Sponsors": "+Youtube.V3.Collection.SponsorsCollection",
        "Subscriptions": "+Youtube.V3.Collection.SubscriptionsCollection",
        "SuperChatEvents": "+Youtube.V3.Collection.SuperChatEventsCollection",
        "Thumbnails": "+Youtube.V3.Collection.ThumbnailsCollection",
        "VideoAbuseReportReasons": "+Youtube.V3.Collection.VideoAbuseReportReasonsCollection",
        "VideoCategories": "+Youtube.V3.Collection.VideoCategoriesCollection",
        "Videos": "+Youtube.V3.Collection.VideosCollection",
        "Watermarks": "+Youtube.V3.Collection.WatermarksCollection"
      },
      "!define": {
        "Youtube.V3.Collection.ActivitiesCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.Activity, part: string) -> +Youtube.V3.Schema.Activity",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.ActivityListResponse"
          }
        },
        "Youtube.V3.Collection.CaptionsCollection": {
          "prototype": {
            "download": "fn(id: string, optionalArgs: object)",
            "insert": "fn(resource: Youtube.V3.Schema.Caption, part: string, mediaData: Blob, optionalArgs: object) -> +Youtube.V3.Schema.Caption",
            "list": "fn(part: string, videoId: string, optionalArgs: object) -> +Youtube.V3.Schema.CaptionListResponse",
            "remove": "fn(id: string, optionalArgs: object)",
            "update": "fn(resource: Youtube.V3.Schema.Caption, part: string, mediaData: Blob, optionalArgs: object) -> +Youtube.V3.Schema.Caption"
          }
        },
        "Youtube.V3.Collection.ChannelBannersCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.ChannelBannerResource, mediaData: Blob, optionalArgs: object) -> +Youtube.V3.Schema.ChannelBannerResource"
          }
        },
        "Youtube.V3.Collection.ChannelSectionsCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.ChannelSection, part: string, optionalArgs: object) -> +Youtube.V3.Schema.ChannelSection",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.ChannelSectionListResponse",
            "remove": "fn(id: string, optionalArgs: object)",
            "update": "fn(resource: Youtube.V3.Schema.ChannelSection, part: string, optionalArgs: object) -> +Youtube.V3.Schema.ChannelSection"
          }
        },
        "Youtube.V3.Collection.ChannelsCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.ChannelListResponse",
            "update": "fn(resource: Youtube.V3.Schema.Channel, part: string, optionalArgs: object) -> +Youtube.V3.Schema.Channel"
          }
        },
        "Youtube.V3.Collection.CommentThreadsCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.CommentThread, part: string) -> +Youtube.V3.Schema.CommentThread",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.CommentThreadListResponse",
            "update": "fn(resource: Youtube.V3.Schema.CommentThread, part: string) -> +Youtube.V3.Schema.CommentThread"
          }
        },
        "Youtube.V3.Collection.CommentsCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.Comment, part: string) -> +Youtube.V3.Schema.Comment",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.CommentListResponse",
            "markAsSpam": "fn(id: string)",
            "remove": "fn(id: string)",
            "setModerationStatus": "fn(id: string, moderationStatus: string, optionalArgs: object)",
            "update": "fn(resource: Youtube.V3.Schema.Comment, part: string) -> +Youtube.V3.Schema.Comment"
          }
        },
        "Youtube.V3.Collection.GuideCategoriesCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.GuideCategoryListResponse"
          }
        },
        "Youtube.V3.Collection.I18nLanguagesCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.I18nLanguageListResponse"
          }
        },
        "Youtube.V3.Collection.I18nRegionsCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.I18nRegionListResponse"
          }
        },
        "Youtube.V3.Collection.LiveBroadcastsCollection": {
          "prototype": {
            "bind": "fn(id: string, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveBroadcast",
            "control": "fn(id: string, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveBroadcast",
            "insert": "fn(resource: Youtube.V3.Schema.LiveBroadcast, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveBroadcast",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveBroadcastListResponse",
            "remove": "fn(id: string, optionalArgs: object)",
            "transition": "fn(broadcastStatus: string, id: string, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveBroadcast",
            "update": "fn(resource: Youtube.V3.Schema.LiveBroadcast, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveBroadcast"
          }
        },
        "Youtube.V3.Collection.LiveChatBansCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.LiveChatBan, part: string) -> +Youtube.V3.Schema.LiveChatBan",
            "remove": "fn(id: string)"
          }
        },
        "Youtube.V3.Collection.LiveChatMessagesCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.LiveChatMessage, part: string) -> +Youtube.V3.Schema.LiveChatMessage",
            "list": "fn(liveChatId: string, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveChatMessageListResponse",
            "remove": "fn(id: string)"
          }
        },
        "Youtube.V3.Collection.LiveChatModeratorsCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.LiveChatModerator, part: string) -> +Youtube.V3.Schema.LiveChatModerator",
            "list": "fn(liveChatId: string, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveChatModeratorListResponse",
            "remove": "fn(id: string)"
          }
        },
        "Youtube.V3.Collection.LiveStreamsCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.LiveStream, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveStream",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveStreamListResponse",
            "remove": "fn(id: string, optionalArgs: object)",
            "update": "fn(resource: Youtube.V3.Schema.LiveStream, part: string, optionalArgs: object) -> +Youtube.V3.Schema.LiveStream"
          }
        },
        "Youtube.V3.Collection.PlaylistItemsCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.PlaylistItem, part: string, optionalArgs: object) -> +Youtube.V3.Schema.PlaylistItem",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.PlaylistItemListResponse",
            "remove": "fn(id: string, optionalArgs: object)",
            "update": "fn(resource: Youtube.V3.Schema.PlaylistItem, part: string, optionalArgs: object) -> +Youtube.V3.Schema.PlaylistItem"
          }
        },
        "Youtube.V3.Collection.PlaylistsCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.Playlist, part: string, optionalArgs: object) -> +Youtube.V3.Schema.Playlist",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.PlaylistListResponse",
            "remove": "fn(id: string, optionalArgs: object)",
            "update": "fn(resource: Youtube.V3.Schema.Playlist, part: string, optionalArgs: object) -> +Youtube.V3.Schema.Playlist"
          }
        },
        "Youtube.V3.Collection.SearchCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.SearchListResponse"
          }
        },
        "Youtube.V3.Collection.SponsorsCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.SponsorListResponse"
          }
        },
        "Youtube.V3.Collection.SubscriptionsCollection": {
          "prototype": {
            "insert": "fn(resource: Youtube.V3.Schema.Subscription, part: string) -> +Youtube.V3.Schema.Subscription",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.SubscriptionListResponse",
            "remove": "fn(id: string)"
          }
        },
        "Youtube.V3.Collection.SuperChatEventsCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.SuperChatEventListResponse"
          }
        },
        "Youtube.V3.Collection.ThumbnailsCollection": {
          "prototype": {
            "set": "fn(videoId: string, mediaData: Blob, optionalArgs: object) -> +Youtube.V3.Schema.ThumbnailSetResponse"
          }
        },
        "Youtube.V3.Collection.VideoAbuseReportReasonsCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.VideoAbuseReportReasonListResponse"
          }
        },
        "Youtube.V3.Collection.VideoCategoriesCollection": {
          "prototype": {
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.VideoCategoryListResponse"
          }
        },
        "Youtube.V3.Collection.VideosCollection": {
          "prototype": {
            "getRating": "fn(id: string, optionalArgs: object) -> +Youtube.V3.Schema.VideoGetRatingResponse",
            "insert": "fn(resource: Youtube.V3.Schema.Video, part: string, mediaData: Blob, optionalArgs: object) -> +Youtube.V3.Schema.Video",
            "list": "fn(part: string, optionalArgs: object) -> +Youtube.V3.Schema.VideoListResponse",
            "rate": "fn(id: string, rating: string)",
            "remove": "fn(id: string, optionalArgs: object)",
            "reportAbuse": "fn(resource: Youtube.V3.Schema.VideoAbuseReport, optionalArgs: object)",
            "update": "fn(resource: Youtube.V3.Schema.Video, part: string, optionalArgs: object) -> +Youtube.V3.Schema.Video"
          }
        },
        "Youtube.V3.Collection.WatermarksCollection": {
          "prototype": {
            "set": "fn(resource: Youtube.V3.Schema.InvideoBranding, channelId: string, mediaData: Blob, optionalArgs: object)",
            "unset": "fn(channelId: string, optionalArgs: object)"
          }
        },
        "Youtube.V3.Schema.AccessPolicy": {
          "prototype": {
            "allowed": "bool",
            "exception": "[string]"
          }
        },
        "Youtube.V3.Schema.Activity": {
          "prototype": {
            "contentDetails": "+Youtube.V3.Schema.ActivityContentDetails",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.ActivitySnippet"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetails": {
          "prototype": {
            "bulletin": "+Youtube.V3.Schema.ActivityContentDetailsBulletin",
            "channelItem": "+Youtube.V3.Schema.ActivityContentDetailsChannelItem",
            "comment": "+Youtube.V3.Schema.ActivityContentDetailsComment",
            "favorite": "+Youtube.V3.Schema.ActivityContentDetailsFavorite",
            "like": "+Youtube.V3.Schema.ActivityContentDetailsLike",
            "playlistItem": "+Youtube.V3.Schema.ActivityContentDetailsPlaylistItem",
            "promotedItem": "+Youtube.V3.Schema.ActivityContentDetailsPromotedItem",
            "recommendation": "+Youtube.V3.Schema.ActivityContentDetailsRecommendation",
            "social": "+Youtube.V3.Schema.ActivityContentDetailsSocial",
            "subscription": "+Youtube.V3.Schema.ActivityContentDetailsSubscription",
            "upload": "+Youtube.V3.Schema.ActivityContentDetailsUpload"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsBulletin": {
          "prototype": {
            "resourceId": "+Youtube.V3.Schema.ResourceId"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsChannelItem": {
          "prototype": {
            "resourceId": "+Youtube.V3.Schema.ResourceId"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsComment": {
          "prototype": {
            "resourceId": "+Youtube.V3.Schema.ResourceId"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsFavorite": {
          "prototype": {
            "resourceId": "+Youtube.V3.Schema.ResourceId"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsLike": {
          "prototype": {
            "resourceId": "+Youtube.V3.Schema.ResourceId"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsPlaylistItem": {
          "prototype": {
            "playlistId": "string",
            "playlistItemId": "string",
            "resourceId": "+Youtube.V3.Schema.ResourceId"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsPromotedItem": {
          "prototype": {
            "adTag": "string",
            "clickTrackingUrl": "string",
            "creativeViewUrl": "string",
            "ctaType": "string",
            "customCtaButtonText": "string",
            "descriptionText": "string",
            "destinationUrl": "string",
            "forecastingUrl": "[string]",
            "impressionUrl": "[string]",
            "videoId": "string"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsRecommendation": {
          "prototype": {
            "reason": "string",
            "resourceId": "+Youtube.V3.Schema.ResourceId",
            "seedResourceId": "+Youtube.V3.Schema.ResourceId"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsSocial": {
          "prototype": {
            "author": "string",
            "imageUrl": "string",
            "referenceUrl": "string",
            "resourceId": "+Youtube.V3.Schema.ResourceId",
            "type": "string"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsSubscription": {
          "prototype": {
            "resourceId": "+Youtube.V3.Schema.ResourceId"
          }
        },
        "Youtube.V3.Schema.ActivityContentDetailsUpload": {
          "prototype": {
            "videoId": "string"
          }
        },
        "Youtube.V3.Schema.ActivityListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.Activity]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.ActivitySnippet": {
          "prototype": {
            "channelId": "string",
            "channelTitle": "string",
            "description": "string",
            "groupId": "string",
            "publishedAt": "string",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string",
            "type": "string"
          }
        },
        "Youtube.V3.Schema.Caption": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.CaptionSnippet"
          }
        },
        "Youtube.V3.Schema.CaptionListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.Caption]",
            "kind": "string",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.CaptionSnippet": {
          "prototype": {
            "audioTrackType": "string",
            "failureReason": "string",
            "isAutoSynced": "bool",
            "isCC": "bool",
            "isDraft": "bool",
            "isEasyReader": "bool",
            "isLarge": "bool",
            "language": "string",
            "lastUpdated": "string",
            "name": "string",
            "status": "string",
            "trackKind": "string",
            "videoId": "string"
          }
        },
        "Youtube.V3.Schema.CdnSettings": {
          "prototype": {
            "format": "string",
            "frameRate": "string",
            "ingestionInfo": "+Youtube.V3.Schema.IngestionInfo",
            "ingestionType": "string",
            "resolution": "string"
          }
        },
        "Youtube.V3.Schema.Channel": {
          "prototype": {
            "auditDetails": "+Youtube.V3.Schema.ChannelAuditDetails",
            "brandingSettings": "+Youtube.V3.Schema.ChannelBrandingSettings",
            "contentDetails": "+Youtube.V3.Schema.ChannelContentDetails",
            "contentOwnerDetails": "+Youtube.V3.Schema.ChannelContentOwnerDetails",
            "conversionPings": "+Youtube.V3.Schema.ChannelConversionPings",
            "etag": "string",
            "id": "string",
            "invideoPromotion": "+Youtube.V3.Schema.InvideoPromotion",
            "kind": "string",
            "localizations": "Object",
            "snippet": "+Youtube.V3.Schema.ChannelSnippet",
            "statistics": "+Youtube.V3.Schema.ChannelStatistics",
            "status": "+Youtube.V3.Schema.ChannelStatus",
            "topicDetails": "+Youtube.V3.Schema.ChannelTopicDetails"
          }
        },
        "Youtube.V3.Schema.ChannelAuditDetails": {
          "prototype": {
            "communityGuidelinesGoodStanding": "bool",
            "contentIdClaimsGoodStanding": "bool",
            "copyrightStrikesGoodStanding": "bool"
          }
        },
        "Youtube.V3.Schema.ChannelBannerResource": {
          "prototype": {
            "etag": "string",
            "kind": "string",
            "url": "string"
          }
        },
        "Youtube.V3.Schema.ChannelBrandingSettings": {
          "prototype": {
            "channel": "+Youtube.V3.Schema.ChannelSettings",
            "hints": "[+Youtube.V3.Schema.PropertyValue]",
            "image": "+Youtube.V3.Schema.ImageSettings",
            "watch": "+Youtube.V3.Schema.WatchSettings"
          }
        },
        "Youtube.V3.Schema.ChannelContentDetails": {
          "prototype": {
            "relatedPlaylists": "+Youtube.V3.Schema.ChannelContentDetailsRelatedPlaylists"
          }
        },
        "Youtube.V3.Schema.ChannelContentDetailsRelatedPlaylists": {
          "prototype": {
            "favorites": "string",
            "likes": "string",
            "uploads": "string",
            "watchHistory": "string",
            "watchLater": "string"
          }
        },
        "Youtube.V3.Schema.ChannelContentOwnerDetails": {
          "prototype": {
            "contentOwner": "string",
            "timeLinked": "string"
          }
        },
        "Youtube.V3.Schema.ChannelConversionPing": {
          "prototype": {
            "context": "string",
            "conversionUrl": "string"
          }
        },
        "Youtube.V3.Schema.ChannelConversionPings": {
          "prototype": {
            "pings": "[+Youtube.V3.Schema.ChannelConversionPing]"
          }
        },
        "Youtube.V3.Schema.ChannelListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.Channel]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.ChannelLocalization": {
          "prototype": {
            "description": "string",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.ChannelProfileDetails": {
          "prototype": {
            "channelId": "string",
            "channelUrl": "string",
            "displayName": "string",
            "profileImageUrl": "string"
          }
        },
        "Youtube.V3.Schema.ChannelSection": {
          "prototype": {
            "contentDetails": "+Youtube.V3.Schema.ChannelSectionContentDetails",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "localizations": "Object",
            "snippet": "+Youtube.V3.Schema.ChannelSectionSnippet",
            "targeting": "+Youtube.V3.Schema.ChannelSectionTargeting"
          }
        },
        "Youtube.V3.Schema.ChannelSectionContentDetails": {
          "prototype": {
            "channels": "[string]",
            "playlists": "[string]"
          }
        },
        "Youtube.V3.Schema.ChannelSectionListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.ChannelSection]",
            "kind": "string",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.ChannelSectionLocalization": {
          "prototype": {
            "title": "string"
          }
        },
        "Youtube.V3.Schema.ChannelSectionSnippet": {
          "prototype": {
            "channelId": "string",
            "defaultLanguage": "string",
            "localized": "+Youtube.V3.Schema.ChannelSectionLocalization",
            "position": "Integer",
            "style": "string",
            "title": "string",
            "type": "string"
          }
        },
        "Youtube.V3.Schema.ChannelSectionTargeting": {
          "prototype": {
            "countries": "[string]",
            "languages": "[string]",
            "regions": "[string]"
          }
        },
        "Youtube.V3.Schema.ChannelSettings": {
          "prototype": {
            "country": "string",
            "defaultLanguage": "string",
            "defaultTab": "string",
            "description": "string",
            "featuredChannelsTitle": "string",
            "featuredChannelsUrls": "[string]",
            "keywords": "string",
            "moderateComments": "bool",
            "profileColor": "string",
            "showBrowseView": "bool",
            "showRelatedChannels": "bool",
            "title": "string",
            "trackingAnalyticsAccountId": "string",
            "unsubscribedTrailer": "string"
          }
        },
        "Youtube.V3.Schema.ChannelSnippet": {
          "prototype": {
            "country": "string",
            "customUrl": "string",
            "defaultLanguage": "string",
            "description": "string",
            "localized": "+Youtube.V3.Schema.ChannelLocalization",
            "publishedAt": "string",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.ChannelStatistics": {
          "prototype": {
            "commentCount": "string",
            "hiddenSubscriberCount": "bool",
            "subscriberCount": "string",
            "videoCount": "string",
            "viewCount": "string"
          }
        },
        "Youtube.V3.Schema.ChannelStatus": {
          "prototype": {
            "isLinked": "bool",
            "longUploadsStatus": "string",
            "privacyStatus": "string"
          }
        },
        "Youtube.V3.Schema.ChannelTopicDetails": {
          "prototype": {
            "topicCategories": "[string]",
            "topicIds": "[string]"
          }
        },
        "Youtube.V3.Schema.Comment": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.CommentSnippet"
          }
        },
        "Youtube.V3.Schema.CommentListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.Comment]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.CommentSnippet": {
          "prototype": {
            "authorChannelId": "Object",
            "authorChannelUrl": "string",
            "authorDisplayName": "string",
            "authorProfileImageUrl": "string",
            "canRate": "bool",
            "channelId": "string",
            "likeCount": "Integer",
            "moderationStatus": "string",
            "parentId": "string",
            "publishedAt": "string",
            "textDisplay": "string",
            "textOriginal": "string",
            "updatedAt": "string",
            "videoId": "string",
            "viewerRating": "string"
          }
        },
        "Youtube.V3.Schema.CommentThread": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "replies": "+Youtube.V3.Schema.CommentThreadReplies",
            "snippet": "+Youtube.V3.Schema.CommentThreadSnippet"
          }
        },
        "Youtube.V3.Schema.CommentThreadListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.CommentThread]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.CommentThreadReplies": {
          "prototype": {
            "comments": "[+Youtube.V3.Schema.Comment]"
          }
        },
        "Youtube.V3.Schema.CommentThreadSnippet": {
          "prototype": {
            "canReply": "bool",
            "channelId": "string",
            "isPublic": "bool",
            "topLevelComment": "+Youtube.V3.Schema.Comment",
            "totalReplyCount": "Integer",
            "videoId": "string"
          }
        },
        "Youtube.V3.Schema.ContentRating": {
          "prototype": {
            "acbRating": "string",
            "agcomRating": "string",
            "anatelRating": "string",
            "bbfcRating": "string",
            "bfvcRating": "string",
            "bmukkRating": "string",
            "catvRating": "string",
            "catvfrRating": "string",
            "cbfcRating": "string",
            "cccRating": "string",
            "cceRating": "string",
            "chfilmRating": "string",
            "chvrsRating": "string",
            "cicfRating": "string",
            "cnaRating": "string",
            "cncRating": "string",
            "csaRating": "string",
            "cscfRating": "string",
            "czfilmRating": "string",
            "djctqRating": "string",
            "djctqRatingReasons": "[string]",
            "ecbmctRating": "string",
            "eefilmRating": "string",
            "egfilmRating": "string",
            "eirinRating": "string",
            "fcbmRating": "string",
            "fcoRating": "string",
            "fmocRating": "string",
            "fpbRating": "string",
            "fpbRatingReasons": "[string]",
            "fskRating": "string",
            "grfilmRating": "string",
            "icaaRating": "string",
            "ifcoRating": "string",
            "ilfilmRating": "string",
            "incaaRating": "string",
            "kfcbRating": "string",
            "kijkwijzerRating": "string",
            "kmrbRating": "string",
            "lsfRating": "string",
            "mccaaRating": "string",
            "mccypRating": "string",
            "mcstRating": "string",
            "mdaRating": "string",
            "medietilsynetRating": "string",
            "mekuRating": "string",
            "menaMpaaRating": "string",
            "mibacRating": "string",
            "mocRating": "string",
            "moctwRating": "string",
            "mpaaRating": "string",
            "mpaatRating": "string",
            "mtrcbRating": "string",
            "nbcRating": "string",
            "nbcplRating": "string",
            "nfrcRating": "string",
            "nfvcbRating": "string",
            "nkclvRating": "string",
            "oflcRating": "string",
            "pefilmRating": "string",
            "rcnofRating": "string",
            "resorteviolenciaRating": "string",
            "rtcRating": "string",
            "rteRating": "string",
            "russiaRating": "string",
            "skfilmRating": "string",
            "smaisRating": "string",
            "smsaRating": "string",
            "tvpgRating": "string",
            "ytRating": "string"
          }
        },
        "Youtube.V3.Schema.GeoPoint": {
          "prototype": {
            "altitude": "number",
            "latitude": "number",
            "longitude": "number"
          }
        },
        "Youtube.V3.Schema.GuideCategory": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.GuideCategorySnippet"
          }
        },
        "Youtube.V3.Schema.GuideCategoryListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.GuideCategory]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.GuideCategorySnippet": {
          "prototype": {
            "channelId": "string",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.I18nLanguage": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.I18nLanguageSnippet"
          }
        },
        "Youtube.V3.Schema.I18nLanguageListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.I18nLanguage]",
            "kind": "string",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.I18nLanguageSnippet": {
          "prototype": {
            "hl": "string",
            "name": "string"
          }
        },
        "Youtube.V3.Schema.I18nRegion": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.I18nRegionSnippet"
          }
        },
        "Youtube.V3.Schema.I18nRegionListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.I18nRegion]",
            "kind": "string",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.I18nRegionSnippet": {
          "prototype": {
            "gl": "string",
            "name": "string"
          }
        },
        "Youtube.V3.Schema.ImageSettings": {
          "prototype": {
            "backgroundImageUrl": "+Youtube.V3.Schema.LocalizedProperty",
            "bannerExternalUrl": "string",
            "bannerImageUrl": "string",
            "bannerMobileExtraHdImageUrl": "string",
            "bannerMobileHdImageUrl": "string",
            "bannerMobileImageUrl": "string",
            "bannerMobileLowImageUrl": "string",
            "bannerMobileMediumHdImageUrl": "string",
            "bannerTabletExtraHdImageUrl": "string",
            "bannerTabletHdImageUrl": "string",
            "bannerTabletImageUrl": "string",
            "bannerTabletLowImageUrl": "string",
            "bannerTvHighImageUrl": "string",
            "bannerTvImageUrl": "string",
            "bannerTvLowImageUrl": "string",
            "bannerTvMediumImageUrl": "string",
            "largeBrandedBannerImageImapScript": "+Youtube.V3.Schema.LocalizedProperty",
            "largeBrandedBannerImageUrl": "+Youtube.V3.Schema.LocalizedProperty",
            "smallBrandedBannerImageImapScript": "+Youtube.V3.Schema.LocalizedProperty",
            "smallBrandedBannerImageUrl": "+Youtube.V3.Schema.LocalizedProperty",
            "trackingImageUrl": "string",
            "watchIconImageUrl": "string"
          }
        },
        "Youtube.V3.Schema.IngestionInfo": {
          "prototype": {
            "backupIngestionAddress": "string",
            "ingestionAddress": "string",
            "streamName": "string"
          }
        },
        "Youtube.V3.Schema.InvideoBranding": {
          "prototype": {
            "imageBytes": "[number]",
            "imageUrl": "string",
            "position": "+Youtube.V3.Schema.InvideoPosition",
            "targetChannelId": "string",
            "timing": "+Youtube.V3.Schema.InvideoTiming"
          }
        },
        "Youtube.V3.Schema.InvideoPosition": {
          "prototype": {
            "cornerPosition": "string",
            "type": "string"
          }
        },
        "Youtube.V3.Schema.InvideoPromotion": {
          "prototype": {
            "defaultTiming": "+Youtube.V3.Schema.InvideoTiming",
            "items": "[+Youtube.V3.Schema.PromotedItem]",
            "position": "+Youtube.V3.Schema.InvideoPosition",
            "useSmartTiming": "bool"
          }
        },
        "Youtube.V3.Schema.InvideoTiming": {
          "prototype": {
            "durationMs": "string",
            "offsetMs": "string",
            "type": "string"
          }
        },
        "Youtube.V3.Schema.LanguageTag": {
          "prototype": {
            "value": "string"
          }
        },
        "Youtube.V3.Schema.LiveBroadcast": {
          "prototype": {
            "contentDetails": "+Youtube.V3.Schema.LiveBroadcastContentDetails",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.LiveBroadcastSnippet",
            "statistics": "+Youtube.V3.Schema.LiveBroadcastStatistics",
            "status": "+Youtube.V3.Schema.LiveBroadcastStatus"
          }
        },
        "Youtube.V3.Schema.LiveBroadcastContentDetails": {
          "prototype": {
            "boundStreamId": "string",
            "boundStreamLastUpdateTimeMs": "string",
            "closedCaptionsType": "string",
            "enableAutoStart": "bool",
            "enableClosedCaptions": "bool",
            "enableContentEncryption": "bool",
            "enableDvr": "bool",
            "enableEmbed": "bool",
            "enableLowLatency": "bool",
            "latencyPreference": "string",
            "mesh": "[number]",
            "monitorStream": "+Youtube.V3.Schema.MonitorStreamInfo",
            "projection": "string",
            "recordFromStart": "bool",
            "startWithSlate": "bool",
            "stereoLayout": "string"
          }
        },
        "Youtube.V3.Schema.LiveBroadcastListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.LiveBroadcast]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.LiveBroadcastSnippet": {
          "prototype": {
            "actualEndTime": "string",
            "actualStartTime": "string",
            "channelId": "string",
            "description": "string",
            "isDefaultBroadcast": "bool",
            "liveChatId": "string",
            "publishedAt": "string",
            "scheduledEndTime": "string",
            "scheduledStartTime": "string",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.LiveBroadcastStatistics": {
          "prototype": {
            "concurrentViewers": "string",
            "totalChatCount": "string"
          }
        },
        "Youtube.V3.Schema.LiveBroadcastStatus": {
          "prototype": {
            "lifeCycleStatus": "string",
            "liveBroadcastPriority": "string",
            "privacyStatus": "string",
            "recordingStatus": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatBan": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.LiveChatBanSnippet"
          }
        },
        "Youtube.V3.Schema.LiveChatBanSnippet": {
          "prototype": {
            "banDurationSeconds": "string",
            "bannedUserDetails": "+Youtube.V3.Schema.ChannelProfileDetails",
            "liveChatId": "string",
            "type": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatFanFundingEventDetails": {
          "prototype": {
            "amountDisplayString": "string",
            "amountMicros": "string",
            "currency": "string",
            "userComment": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatMessage": {
          "prototype": {
            "authorDetails": "+Youtube.V3.Schema.LiveChatMessageAuthorDetails",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.LiveChatMessageSnippet"
          }
        },
        "Youtube.V3.Schema.LiveChatMessageAuthorDetails": {
          "prototype": {
            "channelId": "string",
            "channelUrl": "string",
            "displayName": "string",
            "isChatModerator": "bool",
            "isChatOwner": "bool",
            "isChatSponsor": "bool",
            "isVerified": "bool",
            "profileImageUrl": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatMessageDeletedDetails": {
          "prototype": {
            "deletedMessageId": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatMessageListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.LiveChatMessage]",
            "kind": "string",
            "nextPageToken": "string",
            "offlineAt": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "pollingIntervalMillis": "Integer",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatMessageRetractedDetails": {
          "prototype": {
            "retractedMessageId": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatMessageSnippet": {
          "prototype": {
            "authorChannelId": "string",
            "displayMessage": "string",
            "fanFundingEventDetails": "+Youtube.V3.Schema.LiveChatFanFundingEventDetails",
            "hasDisplayContent": "bool",
            "liveChatId": "string",
            "messageDeletedDetails": "+Youtube.V3.Schema.LiveChatMessageDeletedDetails",
            "messageRetractedDetails": "+Youtube.V3.Schema.LiveChatMessageRetractedDetails",
            "pollClosedDetails": "+Youtube.V3.Schema.LiveChatPollClosedDetails",
            "pollEditedDetails": "+Youtube.V3.Schema.LiveChatPollEditedDetails",
            "pollOpenedDetails": "+Youtube.V3.Schema.LiveChatPollOpenedDetails",
            "pollVotedDetails": "+Youtube.V3.Schema.LiveChatPollVotedDetails",
            "publishedAt": "string",
            "superChatDetails": "+Youtube.V3.Schema.LiveChatSuperChatDetails",
            "superStickerDetails": "+Youtube.V3.Schema.LiveChatSuperStickerDetails",
            "textMessageDetails": "+Youtube.V3.Schema.LiveChatTextMessageDetails",
            "type": "string",
            "userBannedDetails": "+Youtube.V3.Schema.LiveChatUserBannedMessageDetails"
          }
        },
        "Youtube.V3.Schema.LiveChatModerator": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.LiveChatModeratorSnippet"
          }
        },
        "Youtube.V3.Schema.LiveChatModeratorListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.LiveChatModerator]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatModeratorSnippet": {
          "prototype": {
            "liveChatId": "string",
            "moderatorDetails": "+Youtube.V3.Schema.ChannelProfileDetails"
          }
        },
        "Youtube.V3.Schema.LiveChatPollClosedDetails": {
          "prototype": {
            "pollId": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatPollEditedDetails": {
          "prototype": {
            "id": "string",
            "items": "[+Youtube.V3.Schema.LiveChatPollItem]",
            "prompt": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatPollItem": {
          "prototype": {
            "description": "string",
            "itemId": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatPollOpenedDetails": {
          "prototype": {
            "id": "string",
            "items": "[+Youtube.V3.Schema.LiveChatPollItem]",
            "prompt": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatPollVotedDetails": {
          "prototype": {
            "itemId": "string",
            "pollId": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatSuperChatDetails": {
          "prototype": {
            "amountDisplayString": "string",
            "amountMicros": "string",
            "currency": "string",
            "tier": "Integer",
            "userComment": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatSuperStickerDetails": {
          "prototype": {
            "amountDisplayString": "string",
            "amountMicros": "string",
            "currency": "string",
            "superStickerMetadata": "+Youtube.V3.Schema.SuperStickerMetadata",
            "tier": "Integer"
          }
        },
        "Youtube.V3.Schema.LiveChatTextMessageDetails": {
          "prototype": {
            "messageText": "string"
          }
        },
        "Youtube.V3.Schema.LiveChatUserBannedMessageDetails": {
          "prototype": {
            "banDurationSeconds": "string",
            "banType": "string",
            "bannedUserDetails": "+Youtube.V3.Schema.ChannelProfileDetails"
          }
        },
        "Youtube.V3.Schema.LiveStream": {
          "prototype": {
            "cdn": "+Youtube.V3.Schema.CdnSettings",
            "contentDetails": "+Youtube.V3.Schema.LiveStreamContentDetails",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.LiveStreamSnippet",
            "status": "+Youtube.V3.Schema.LiveStreamStatus"
          }
        },
        "Youtube.V3.Schema.LiveStreamConfigurationIssue": {
          "prototype": {
            "description": "string",
            "reason": "string",
            "severity": "string",
            "type": "string"
          }
        },
        "Youtube.V3.Schema.LiveStreamContentDetails": {
          "prototype": {
            "closedCaptionsIngestionUrl": "string",
            "isReusable": "bool"
          }
        },
        "Youtube.V3.Schema.LiveStreamHealthStatus": {
          "prototype": {
            "configurationIssues": "[+Youtube.V3.Schema.LiveStreamConfigurationIssue]",
            "lastUpdateTimeSeconds": "string",
            "status": "string"
          }
        },
        "Youtube.V3.Schema.LiveStreamListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.LiveStream]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.LiveStreamSnippet": {
          "prototype": {
            "channelId": "string",
            "description": "string",
            "isDefaultStream": "bool",
            "publishedAt": "string",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.LiveStreamStatus": {
          "prototype": {
            "healthStatus": "+Youtube.V3.Schema.LiveStreamHealthStatus",
            "streamStatus": "string"
          }
        },
        "Youtube.V3.Schema.LocalizedProperty": {
          "prototype": {
            "default": "string",
            "defaultLanguage": "+Youtube.V3.Schema.LanguageTag",
            "localized": "[+Youtube.V3.Schema.LocalizedString]"
          }
        },
        "Youtube.V3.Schema.LocalizedString": {
          "prototype": {
            "language": "string",
            "value": "string"
          }
        },
        "Youtube.V3.Schema.MonitorStreamInfo": {
          "prototype": {
            "broadcastStreamDelayMs": "Integer",
            "embedHtml": "string",
            "enableMonitorStream": "bool"
          }
        },
        "Youtube.V3.Schema.Nonprofit": {
          "prototype": {
            "nonprofitId": "+Youtube.V3.Schema.NonprofitId",
            "nonprofitLegalName": "string"
          }
        },
        "Youtube.V3.Schema.NonprofitId": {
          "prototype": {
            "value": "string"
          }
        },
        "Youtube.V3.Schema.PageInfo": {
          "prototype": {
            "resultsPerPage": "Integer",
            "totalResults": "Integer"
          }
        },
        "Youtube.V3.Schema.Playlist": {
          "prototype": {
            "contentDetails": "+Youtube.V3.Schema.PlaylistContentDetails",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "localizations": "Object",
            "player": "+Youtube.V3.Schema.PlaylistPlayer",
            "snippet": "+Youtube.V3.Schema.PlaylistSnippet",
            "status": "+Youtube.V3.Schema.PlaylistStatus"
          }
        },
        "Youtube.V3.Schema.PlaylistContentDetails": {
          "prototype": {
            "itemCount": "Integer"
          }
        },
        "Youtube.V3.Schema.PlaylistItem": {
          "prototype": {
            "contentDetails": "+Youtube.V3.Schema.PlaylistItemContentDetails",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.PlaylistItemSnippet",
            "status": "+Youtube.V3.Schema.PlaylistItemStatus"
          }
        },
        "Youtube.V3.Schema.PlaylistItemContentDetails": {
          "prototype": {
            "endAt": "string",
            "note": "string",
            "startAt": "string",
            "videoId": "string",
            "videoPublishedAt": "string"
          }
        },
        "Youtube.V3.Schema.PlaylistItemListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.PlaylistItem]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.PlaylistItemSnippet": {
          "prototype": {
            "channelId": "string",
            "channelTitle": "string",
            "description": "string",
            "playlistId": "string",
            "position": "Integer",
            "publishedAt": "string",
            "resourceId": "+Youtube.V3.Schema.ResourceId",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.PlaylistItemStatus": {
          "prototype": {
            "privacyStatus": "string"
          }
        },
        "Youtube.V3.Schema.PlaylistListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.Playlist]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.PlaylistLocalization": {
          "prototype": {
            "description": "string",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.PlaylistPlayer": {
          "prototype": {
            "embedHtml": "string"
          }
        },
        "Youtube.V3.Schema.PlaylistSnippet": {
          "prototype": {
            "channelId": "string",
            "channelTitle": "string",
            "defaultLanguage": "string",
            "description": "string",
            "localized": "+Youtube.V3.Schema.PlaylistLocalization",
            "publishedAt": "string",
            "tags": "[string]",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.PlaylistStatus": {
          "prototype": {
            "privacyStatus": "string"
          }
        },
        "Youtube.V3.Schema.PromotedItem": {
          "prototype": {
            "customMessage": "string",
            "id": "+Youtube.V3.Schema.PromotedItemId",
            "promotedByContentOwner": "bool",
            "timing": "+Youtube.V3.Schema.InvideoTiming"
          }
        },
        "Youtube.V3.Schema.PromotedItemId": {
          "prototype": {
            "recentlyUploadedBy": "string",
            "type": "string",
            "videoId": "string",
            "websiteUrl": "string"
          }
        },
        "Youtube.V3.Schema.PropertyValue": {
          "prototype": {
            "property": "string",
            "value": "string"
          }
        },
        "Youtube.V3.Schema.ResourceId": {
          "prototype": {
            "channelId": "string",
            "kind": "string",
            "playlistId": "string",
            "videoId": "string"
          }
        },
        "Youtube.V3.Schema.SearchListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.SearchResult]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "regionCode": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.SearchResult": {
          "prototype": {
            "etag": "string",
            "id": "+Youtube.V3.Schema.ResourceId",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.SearchResultSnippet"
          }
        },
        "Youtube.V3.Schema.SearchResultSnippet": {
          "prototype": {
            "channelId": "string",
            "channelTitle": "string",
            "description": "string",
            "liveBroadcastContent": "string",
            "publishedAt": "string",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.Sponsor": {
          "prototype": {
            "etag": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.SponsorSnippet"
          }
        },
        "Youtube.V3.Schema.SponsorListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.Sponsor]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.SponsorSnippet": {
          "prototype": {
            "channelId": "string",
            "cumulativeDurationMonths": "Integer",
            "sponsorDetails": "+Youtube.V3.Schema.ChannelProfileDetails",
            "sponsorSince": "string"
          }
        },
        "Youtube.V3.Schema.Subscription": {
          "prototype": {
            "contentDetails": "+Youtube.V3.Schema.SubscriptionContentDetails",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.SubscriptionSnippet",
            "subscriberSnippet": "+Youtube.V3.Schema.SubscriptionSubscriberSnippet"
          }
        },
        "Youtube.V3.Schema.SubscriptionContentDetails": {
          "prototype": {
            "activityType": "string",
            "newItemCount": "Integer",
            "totalItemCount": "Integer"
          }
        },
        "Youtube.V3.Schema.SubscriptionListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.Subscription]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.SubscriptionSnippet": {
          "prototype": {
            "channelId": "string",
            "channelTitle": "string",
            "description": "string",
            "publishedAt": "string",
            "resourceId": "+Youtube.V3.Schema.ResourceId",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.SubscriptionSubscriberSnippet": {
          "prototype": {
            "channelId": "string",
            "description": "string",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.SuperChatEvent": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.SuperChatEventSnippet"
          }
        },
        "Youtube.V3.Schema.SuperChatEventListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.SuperChatEvent]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.SuperChatEventSnippet": {
          "prototype": {
            "amountMicros": "string",
            "channelId": "string",
            "commentText": "string",
            "createdAt": "string",
            "currency": "string",
            "displayString": "string",
            "isSuperChatForGood": "bool",
            "isSuperStickerEvent": "bool",
            "messageType": "Integer",
            "nonprofit": "+Youtube.V3.Schema.Nonprofit",
            "superStickerMetadata": "+Youtube.V3.Schema.SuperStickerMetadata",
            "supporterDetails": "+Youtube.V3.Schema.ChannelProfileDetails"
          }
        },
        "Youtube.V3.Schema.SuperStickerMetadata": {
          "prototype": {
            "altText": "string",
            "altTextLanguage": "string",
            "stickerId": "string"
          }
        },
        "Youtube.V3.Schema.Thumbnail": {
          "prototype": {
            "height": "Integer",
            "url": "string",
            "width": "Integer"
          }
        },
        "Youtube.V3.Schema.ThumbnailDetails": {
          "prototype": {
            "default": "+Youtube.V3.Schema.Thumbnail",
            "high": "+Youtube.V3.Schema.Thumbnail",
            "maxres": "+Youtube.V3.Schema.Thumbnail",
            "medium": "+Youtube.V3.Schema.Thumbnail",
            "standard": "+Youtube.V3.Schema.Thumbnail"
          }
        },
        "Youtube.V3.Schema.ThumbnailSetResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.ThumbnailDetails]",
            "kind": "string",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.Video": {
          "prototype": {
            "ageGating": "+Youtube.V3.Schema.VideoAgeGating",
            "contentDetails": "+Youtube.V3.Schema.VideoContentDetails",
            "etag": "string",
            "fileDetails": "+Youtube.V3.Schema.VideoFileDetails",
            "id": "string",
            "kind": "string",
            "liveStreamingDetails": "+Youtube.V3.Schema.VideoLiveStreamingDetails",
            "localizations": "Object",
            "monetizationDetails": "+Youtube.V3.Schema.VideoMonetizationDetails",
            "player": "+Youtube.V3.Schema.VideoPlayer",
            "processingDetails": "+Youtube.V3.Schema.VideoProcessingDetails",
            "projectDetails": "+Youtube.V3.Schema.VideoProjectDetails",
            "recordingDetails": "+Youtube.V3.Schema.VideoRecordingDetails",
            "snippet": "+Youtube.V3.Schema.VideoSnippet",
            "statistics": "+Youtube.V3.Schema.VideoStatistics",
            "status": "+Youtube.V3.Schema.VideoStatus",
            "suggestions": "+Youtube.V3.Schema.VideoSuggestions",
            "topicDetails": "+Youtube.V3.Schema.VideoTopicDetails"
          }
        },
        "Youtube.V3.Schema.VideoAbuseReport": {
          "prototype": {
            "comments": "string",
            "language": "string",
            "reasonId": "string",
            "secondaryReasonId": "string",
            "videoId": "string"
          }
        },
        "Youtube.V3.Schema.VideoAbuseReportReason": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.VideoAbuseReportReasonSnippet"
          }
        },
        "Youtube.V3.Schema.VideoAbuseReportReasonListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.VideoAbuseReportReason]",
            "kind": "string",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.VideoAbuseReportReasonSnippet": {
          "prototype": {
            "label": "string",
            "secondaryReasons": "[+Youtube.V3.Schema.VideoAbuseReportSecondaryReason]"
          }
        },
        "Youtube.V3.Schema.VideoAbuseReportSecondaryReason": {
          "prototype": {
            "id": "string",
            "label": "string"
          }
        },
        "Youtube.V3.Schema.VideoAgeGating": {
          "prototype": {
            "alcoholContent": "bool",
            "restricted": "bool",
            "videoGameRating": "string"
          }
        },
        "Youtube.V3.Schema.VideoCategory": {
          "prototype": {
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+Youtube.V3.Schema.VideoCategorySnippet"
          }
        },
        "Youtube.V3.Schema.VideoCategoryListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.VideoCategory]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.VideoCategorySnippet": {
          "prototype": {
            "assignable": "bool",
            "channelId": "string",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.VideoContentDetails": {
          "prototype": {
            "caption": "string",
            "contentRating": "+Youtube.V3.Schema.ContentRating",
            "countryRestriction": "+Youtube.V3.Schema.AccessPolicy",
            "definition": "string",
            "dimension": "string",
            "duration": "string",
            "hasCustomThumbnail": "bool",
            "licensedContent": "bool",
            "projection": "string",
            "regionRestriction": "+Youtube.V3.Schema.VideoContentDetailsRegionRestriction"
          }
        },
        "Youtube.V3.Schema.VideoContentDetailsRegionRestriction": {
          "prototype": {
            "allowed": "[string]",
            "blocked": "[string]"
          }
        },
        "Youtube.V3.Schema.VideoFileDetails": {
          "prototype": {
            "audioStreams": "[+Youtube.V3.Schema.VideoFileDetailsAudioStream]",
            "bitrateBps": "string",
            "container": "string",
            "creationTime": "string",
            "durationMs": "string",
            "fileName": "string",
            "fileSize": "string",
            "fileType": "string",
            "videoStreams": "[+Youtube.V3.Schema.VideoFileDetailsVideoStream]"
          }
        },
        "Youtube.V3.Schema.VideoFileDetailsAudioStream": {
          "prototype": {
            "bitrateBps": "string",
            "channelCount": "Integer",
            "codec": "string",
            "vendor": "string"
          }
        },
        "Youtube.V3.Schema.VideoFileDetailsVideoStream": {
          "prototype": {
            "aspectRatio": "number",
            "bitrateBps": "string",
            "codec": "string",
            "frameRateFps": "number",
            "heightPixels": "Integer",
            "rotation": "string",
            "vendor": "string",
            "widthPixels": "Integer"
          }
        },
        "Youtube.V3.Schema.VideoGetRatingResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.VideoRating]",
            "kind": "string",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.VideoListResponse": {
          "prototype": {
            "etag": "string",
            "eventId": "string",
            "items": "[+Youtube.V3.Schema.Video]",
            "kind": "string",
            "nextPageToken": "string",
            "pageInfo": "+Youtube.V3.Schema.PageInfo",
            "prevPageToken": "string",
            "tokenPagination": "Youtube.V3.Schema.TokenPagination",
            "visitorId": "string"
          }
        },
        "Youtube.V3.Schema.VideoLiveStreamingDetails": {
          "prototype": {
            "activeLiveChatId": "string",
            "actualEndTime": "string",
            "actualStartTime": "string",
            "concurrentViewers": "string",
            "scheduledEndTime": "string",
            "scheduledStartTime": "string"
          }
        },
        "Youtube.V3.Schema.VideoLocalization": {
          "prototype": {
            "description": "string",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.VideoMonetizationDetails": {
          "prototype": {
            "access": "+Youtube.V3.Schema.AccessPolicy"
          }
        },
        "Youtube.V3.Schema.VideoPlayer": {
          "prototype": {
            "embedHeight": "string",
            "embedHtml": "string",
            "embedWidth": "string"
          }
        },
        "Youtube.V3.Schema.VideoProcessingDetails": {
          "prototype": {
            "editorSuggestionsAvailability": "string",
            "fileDetailsAvailability": "string",
            "processingFailureReason": "string",
            "processingIssuesAvailability": "string",
            "processingProgress": "+Youtube.V3.Schema.VideoProcessingDetailsProcessingProgress",
            "processingStatus": "string",
            "tagSuggestionsAvailability": "string",
            "thumbnailsAvailability": "string"
          }
        },
        "Youtube.V3.Schema.VideoProcessingDetailsProcessingProgress": {
          "prototype": {
            "partsProcessed": "string",
            "partsTotal": "string",
            "timeLeftMs": "string"
          }
        },
        "Youtube.V3.Schema.VideoProjectDetails": {
          "prototype": {
            "tags": "[string]"
          }
        },
        "Youtube.V3.Schema.VideoRating": {
          "prototype": {
            "rating": "string",
            "videoId": "string"
          }
        },
        "Youtube.V3.Schema.VideoRecordingDetails": {
          "prototype": {
            "location": "+Youtube.V3.Schema.GeoPoint",
            "locationDescription": "string",
            "recordingDate": "string"
          }
        },
        "Youtube.V3.Schema.VideoSnippet": {
          "prototype": {
            "categoryId": "string",
            "channelId": "string",
            "channelTitle": "string",
            "defaultAudioLanguage": "string",
            "defaultLanguage": "string",
            "description": "string",
            "liveBroadcastContent": "string",
            "localized": "+Youtube.V3.Schema.VideoLocalization",
            "publishedAt": "string",
            "tags": "[string]",
            "thumbnails": "+Youtube.V3.Schema.ThumbnailDetails",
            "title": "string"
          }
        },
        "Youtube.V3.Schema.VideoStatistics": {
          "prototype": {
            "commentCount": "string",
            "dislikeCount": "string",
            "favoriteCount": "string",
            "likeCount": "string",
            "viewCount": "string"
          }
        },
        "Youtube.V3.Schema.VideoStatus": {
          "prototype": {
            "embeddable": "bool",
            "failureReason": "string",
            "license": "string",
            "privacyStatus": "string",
            "publicStatsViewable": "bool",
            "publishAt": "string",
            "rejectionReason": "string",
            "uploadStatus": "string"
          }
        },
        "Youtube.V3.Schema.VideoSuggestions": {
          "prototype": {
            "editorSuggestions": "[string]",
            "processingErrors": "[string]",
            "processingHints": "[string]",
            "processingWarnings": "[string]",
            "tagSuggestions": "[+Youtube.V3.Schema.VideoSuggestionsTagSuggestion]"
          }
        },
        "Youtube.V3.Schema.VideoSuggestionsTagSuggestion": {
          "prototype": {
            "categoryRestricts": "[string]",
            "tag": "string"
          }
        },
        "Youtube.V3.Schema.VideoTopicDetails": {
          "prototype": {
            "relevantTopicIds": "[string]",
            "topicCategories": "[string]",
            "topicIds": "[string]"
          }
        },
        "Youtube.V3.Schema.WatchSettings": {
          "prototype": {
            "backgroundColor": "string",
            "featuredPlaylistId": "string",
            "textColor": "string"
          }
        }
      }
    },
    {
      "!name": "YouTubeAnalytics",
      "YouTubeAnalytics": {
        "newErrorProto": "fn() -> +YoutubeAnalytics.V2.Schema.ErrorProto",
        "newErrors": "fn() -> +YoutubeAnalytics.V2.Schema.Errors",
        "newGroup": "fn() -> +YoutubeAnalytics.V2.Schema.Group",
        "newGroupContentDetails": "fn() -> +YoutubeAnalytics.V2.Schema.GroupContentDetails",
        "newGroupItem": "fn() -> +YoutubeAnalytics.V2.Schema.GroupItem",
        "newGroupItemResource": "fn() -> +YoutubeAnalytics.V2.Schema.GroupItemResource",
        "newGroupSnippet": "fn() -> +YoutubeAnalytics.V2.Schema.GroupSnippet",
        "GroupItems": "+YoutubeAnalytics.V2.Collection.GroupItemsCollection",
        "Groups": "+YoutubeAnalytics.V2.Collection.GroupsCollection",
        "Reports": "+YoutubeAnalytics.V2.Collection.ReportsCollection"
      },
      "!define": {
        "YoutubeAnalytics.V2.Collection.GroupItemsCollection": {
          "prototype": {
            "insert": "fn(resource: YoutubeAnalytics.V2.Schema.GroupItem, optionalArgs: object) -> +YoutubeAnalytics.V2.Schema.GroupItem",
            "list": "fn(optionalArgs: object) -> +YoutubeAnalytics.V2.Schema.ListGroupItemsResponse",
            "remove": "fn(optionalArgs: object) -> +YoutubeAnalytics.V2.Schema.EmptyResponse"
          }
        },
        "YoutubeAnalytics.V2.Collection.GroupsCollection": {
          "prototype": {
            "insert": "fn(resource: YoutubeAnalytics.V2.Schema.Group, optionalArgs: object) -> +YoutubeAnalytics.V2.Schema.Group",
            "list": "fn(optionalArgs: object) -> +YoutubeAnalytics.V2.Schema.ListGroupsResponse",
            "remove": "fn(optionalArgs: object) -> +YoutubeAnalytics.V2.Schema.EmptyResponse",
            "update": "fn(resource: YoutubeAnalytics.V2.Schema.Group, optionalArgs: object) -> +YoutubeAnalytics.V2.Schema.Group"
          }
        },
        "YoutubeAnalytics.V2.Collection.ReportsCollection": {
          "prototype": {
            "query": "fn(optionalArgs: object) -> +YoutubeAnalytics.V2.Schema.QueryResponse"
          }
        },
        "YoutubeAnalytics.V2.Schema.EmptyResponse": {
          "prototype": {
            "errors": "+YoutubeAnalytics.V2.Schema.Errors"
          }
        },
        "YoutubeAnalytics.V2.Schema.ErrorProto": {
          "prototype": {
            "argument": "[string]",
            "code": "string",
            "debugInfo": "string",
            "domain": "string",
            "externalErrorMessage": "string",
            "location": "string",
            "locationType": "string"
          }
        },
        "YoutubeAnalytics.V2.Schema.Errors": {
          "prototype": {
            "code": "string",
            "error": "[+YoutubeAnalytics.V2.Schema.ErrorProto]",
            "requestId": "string"
          }
        },
        "YoutubeAnalytics.V2.Schema.Group": {
          "prototype": {
            "contentDetails": "+YoutubeAnalytics.V2.Schema.GroupContentDetails",
            "errors": "+YoutubeAnalytics.V2.Schema.Errors",
            "etag": "string",
            "id": "string",
            "kind": "string",
            "snippet": "+YoutubeAnalytics.V2.Schema.GroupSnippet"
          }
        },
        "YoutubeAnalytics.V2.Schema.GroupContentDetails": {
          "prototype": {
            "itemCount": "string",
            "itemType": "string"
          }
        },
        "YoutubeAnalytics.V2.Schema.GroupItem": {
          "prototype": {
            "errors": "+YoutubeAnalytics.V2.Schema.Errors",
            "etag": "string",
            "groupId": "string",
            "id": "string",
            "kind": "string",
            "resource": "+YoutubeAnalytics.V2.Schema.GroupItemResource"
          }
        },
        "YoutubeAnalytics.V2.Schema.GroupItemResource": {
          "prototype": {
            "id": "string",
            "kind": "string"
          }
        },
        "YoutubeAnalytics.V2.Schema.GroupSnippet": {
          "prototype": {
            "publishedAt": "string",
            "title": "string"
          }
        },
        "YoutubeAnalytics.V2.Schema.ListGroupItemsResponse": {
          "prototype": {
            "errors": "+YoutubeAnalytics.V2.Schema.Errors",
            "etag": "string",
            "items": "[+YoutubeAnalytics.V2.Schema.GroupItem]",
            "kind": "string"
          }
        },
        "YoutubeAnalytics.V2.Schema.ListGroupsResponse": {
          "prototype": {
            "errors": "+YoutubeAnalytics.V2.Schema.Errors",
            "etag": "string",
            "items": "[+YoutubeAnalytics.V2.Schema.Group]",
            "kind": "string",
            "nextPageToken": "string"
          }
        },
        "YoutubeAnalytics.V2.Schema.QueryResponse": {
          "prototype": {
            "columnHeaders": "[+YoutubeAnalytics.V2.Schema.ResultTableColumnHeader]",
            "errors": "+YoutubeAnalytics.V2.Schema.Errors",
            "kind": "string",
            "rows": "[[object]]"
          }
        },
        "YoutubeAnalytics.V2.Schema.ResultTableColumnHeader": {
          "prototype": {
            "columnType": "string",
            "dataType": "string",
            "name": "string"
          }
        }
      }
    },
    {
      "!name": "AdsManagerApp",
      "AdsManagerApp": {
        "accountLabels": "fn() -> +AccountLabelSelector",
        "accounts": "fn() -> +ManagedAccountSelector",
        "createAccountLabel": "fn(name: string)",
        "select": "fn(account: ManagedAccount)"
      },
      "MccApp": {
        "accountLabels": "fn() -> +AccountLabelSelector",
        "accounts": "fn() -> +ManagedAccountSelector",
        "createAccountLabel": "fn(name: string)",
        "select": "fn(account: ManagedAccount)"
      },
      "!define": {
        "AccountLabel": {
          "prototype": {
            "accounts": "fn() -> +ManagedAccountSelector",
            "getEntityType": "fn() -> string",
            "getId": "fn() -> string",
            "getName": "fn() -> string",
            "remove": "fn()",
            "setName": "fn(name: string)"
          }
        },
        "AccountLabelIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +AccountLabel",
            "totalNumEntities": "fn() -> number"
          }
        },
        "AccountLabelSelector": {
          "prototype": {
            "get": "fn() -> +AccountLabelIterator",
            "withCondition": "fn(condition: string) -> +AccountLabelSelector",
            "withIds": "fn(ids: [number]) -> +AccountLabelSelector"
          }
        },
        "ExecutionResult": {
          "prototype": {
            "getCustomerId": "fn() -> string",
            "getError": "fn() -> string",
            "getReturnValue": "fn() -> string",
            "getStatus": "fn() -> string"
          }
        },
        "ManagedAccount": {
          "prototype": {
            "applyLabel": "fn(name: string)",
            "getCurrencyCode": "fn() -> string",
            "getCustomerId": "fn() -> string",
            "getEntityType": "fn() -> string",
            "getName": "fn() -> string",
            "getStatsFor": "fn(dateRange: string) -> +ManagedAccountStats",
            "getTimeZone": "fn() -> string",
            "labels": "fn() -> +AccountLabelSelector",
            "removeLabel": "fn(name: string)"
          }
        },
        "ManagedAccountIterator": {
          "prototype": {
            "hasNext": "fn() -> bool",
            "next": "fn() -> +ManagedAccount",
            "totalNumEntities": "fn() -> number"
          }
        },
        "ManagedAccountSelector": {
          "prototype": {
            "executeInParallel": "fn(functionName: string, optionalCallbackFunctionName: string, optionalInput: string)",
            "forDateRange": "fn(dateRange: string) -> +ManagedAccountSelector",
            "get": "fn() -> +ManagedAccountIterator",
            "orderBy": "fn(orderBy: string) -> +ManagedAccountSelector",
            "withCondition": "fn(condition: string) -> +ManagedAccountSelector",
            "withIds": "fn(ids: [number]) -> +ManagedAccountSelector",
            "withLimit": "fn(limit: number) -> +ManagedAccountSelector"
          }
        },
        "ManagedAccountStats": {
          "prototype": {
            "getClicks": "fn() -> number",
            "getConversionRate": "fn() -> number",
            "getConversions": "fn() -> number",
            "getCost": "fn() -> number",
            "getCtr": "fn() -> number",
            "getImpressions": "fn() -> number"
          }
        },
        "Stats": {
          "prototype": {
            "getAverageCpc": "fn() -> number",
            "getAverageCpm": "fn() -> number",
            "getAverageCpv": "fn() -> number",
            "getAveragePageviews": "fn() -> number",
            "getAveragePosition": "fn() -> number",
            "getAverageTimeOnSite": "fn() -> number",
            "getBounceRate": "fn() -> number",
            "getClicks": "fn() -> number",
            "getConversionRate": "fn() -> number",
            "getConversions": "fn() -> number",
            "getCost": "fn() -> number",
            "getCtr": "fn() -> number",
            "getImpressions": "fn() -> number",
            "getViewRate": "fn() -> number",
            "getViews": "fn() -> number"
          }
        }
      }
    }
  ]
}